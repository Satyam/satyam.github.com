{
    "project": {},
    "files": {
        "docs/assets/datatable-chkboxselect-tests.js": {
            "name": "docs/assets/datatable-chkboxselect-tests.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/base.js": {
            "name": "js/base.js",
            "modules": {
                "datatable": 1,
                "datatable-base": 1
            },
            "classes": {
                "DataTable": 1,
                "DataTable.Base": 1
            },
            "fors": {},
            "namespaces": {
                "DataTable": 1
            }
        },
        "js/body.js": {
            "name": "js/body.js",
            "modules": {
                "datatable-body": 1
            },
            "classes": {
                "DataTable.BodyView": 1
            },
            "fors": {},
            "namespaces": {
                "DataTable": 1
            }
        },
        "js/celleditor-base.js": {
            "name": "js/celleditor-base.js",
            "modules": {
                "datatable-celleditor-base": 1
            },
            "classes": {
                "DataTable.BaseCellEditor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/celleditor-inline.js": {
            "name": "js/celleditor-inline.js",
            "modules": {
                "datatable-celleditor-inline": 1
            },
            "classes": {
                "DataTable.BaseCellInlineEditor": 1
            },
            "fors": {
                "DataTable.Editors": 1
            },
            "namespaces": {}
        },
        "js/celleditor-keyfiltering.js": {
            "name": "js/celleditor-keyfiltering.js",
            "modules": {
                "datatable-celleditor-keyfiltering": 1
            },
            "classes": {
                "DataTable.BaseCellEditor.KeyFiltering": 1
            },
            "fors": {
                "DataTable.BaseCellEditor": 1
            },
            "namespaces": {}
        },
        "js/celleditor-popup.js": {
            "name": "js/celleditor-popup.js",
            "modules": {
                "datatable-celleditor-popup": 1
            },
            "classes": {
                "DataTable.BaseCellPopupEditor": 1
            },
            "fors": {
                "DataTable.Editors": 1
            },
            "namespaces": {}
        },
        "js/colwidths.js": {
            "name": "js/colwidths.js",
            "modules": {
                "datatable-column-widths": 1
            },
            "classes": {
                "DataTable.ColumnWidths": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {}
        },
        "js/core.js": {
            "name": "js/core.js",
            "modules": {
                "datatable-core": 1
            },
            "classes": {
                "DataTable.Core": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {}
        },
        "js/datatable-datasource.js": {
            "name": "js/datatable-datasource.js",
            "modules": {
                "datatable-datasource": 1
            },
            "classes": {
                "Plugin.DataTableDataSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/editable.js": {
            "name": "js/editable.js",
            "modules": {
                "datatable-editable": 1
            },
            "classes": {
                "DataTable.Editors": 1,
                "DataTable.Editable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/formatters.js": {
            "name": "js/formatters.js",
            "modules": {
                "datatable-formatters": 1
            },
            "classes": {
                "DataTable.BodyView.Formatters": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/head.js": {
            "name": "js/head.js",
            "modules": {
                "datatable-head": 1
            },
            "classes": {
                "DataTable.HeaderView": 1
            },
            "fors": {},
            "namespaces": {
                "DataTable": 1
            }
        },
        "js/inputformatters.js": {
            "name": "js/inputformatters.js",
            "modules": {
                "datatable-input-formatters": 1
            },
            "classes": {
                "DataTable.BodyView.InputFormatters": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/message.js": {
            "name": "js/message.js",
            "modules": {
                "datatable-message": 1
            },
            "classes": {
                "DataTable.Message": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {}
        },
        "js/mutable.js": {
            "name": "js/mutable.js",
            "modules": {
                "datatable-mutable": 1
            },
            "classes": {
                "DataTable.Mutable": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {}
        },
        "js/scroll.js": {
            "name": "js/scroll.js",
            "modules": {
                "datatable-scroll": 1
            },
            "classes": {
                "DataTable.Scrollable": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {}
        },
        "js/sort.js": {
            "name": "js/sort.js",
            "modules": {
                "datatable-sort": 1
            },
            "classes": {
                "DataTable.Sortable": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {}
        },
        "js/table.js": {
            "name": "js/table.js",
            "modules": {
                "datatable-table": 1
            },
            "classes": {
                "DataTable.TableView": 1
            },
            "fors": {},
            "namespaces": {
                "DataTable": 1
            }
        }
    },
    "modules": {
        "datatable": {
            "name": "datatable",
            "submodules": {
                "datatable-base": 1,
                "datatable-body": 1,
                "datatable-celleditor-base": 1,
                "datatable-celleditor-inline": 1,
                "datatable-celleditor-keyfiltering": 1,
                "datatable-celleditor-popup": 1,
                "datatable-column-widths": 1,
                "datatable-core": 1,
                "datatable-datasource": 1,
                "datatable-editable": 1,
                "datatable-formatters": 1,
                "datatable-head": 1,
                "datatable-input-formatters": 1,
                "datatable-message": 1,
                "datatable-mutable": 1,
                "datatable-sort": 1,
                "datatable-table": 1
            },
            "classes": {
                "DataTable": 1,
                "DataTable.Base": 1,
                "DataTable.BodyView": 1,
                "DataTable.BaseCellEditor": 1,
                "DataTable.BaseCellInlineEditor": 1,
                "DataTable.Editors": 1,
                "DataTable.BaseCellEditor.KeyFiltering": 1,
                "DataTable.BaseCellPopupEditor": 1,
                "DataTable.ColumnWidths": 1,
                "DataTable.Core": 1,
                "Plugin.DataTableDataSource": 1,
                "DataTable.Editable": 1,
                "DataTable.BodyView.Formatters": 1,
                "DataTable.HeaderView": 1,
                "DataTable.BodyView.InputFormatters": 1,
                "DataTable.Message": 1,
                "DataTable.Mutable": 1,
                "DataTable.Sortable": 1,
                "DataTable.TableView": 1
            },
            "fors": {
                "DataTable.Editors": 1,
                "DataTable.BaseCellEditor": 1,
                "DataTable": 1
            },
            "namespaces": {
                "DataTable": 1
            },
            "file": "js/table.js",
            "line": 16,
            "description": "A Widget for displaying tabular data.  The base implementation of DataTable\nprovides the ability to dynamically generate an HTML table from a set of column\nconfigurations and row data.\n\nTwo classes are included in the `datatable-base` module: `Y.DataTable` and\n`Y.DataTable.Base`.",
            "tag": "main",
            "itemtype": "main"
        },
        "datatable-base": {
            "name": "datatable-base",
            "submodules": {},
            "classes": {
                "DataTable": 1,
                "DataTable.Base": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "DataTable": 1
            },
            "module": "datatable",
            "namespace": "",
            "file": "js/base.js",
            "line": 167,
            "description": "A Widget for displaying tabular data.  The base implementation of DataTable\nprovides the ability to dynamically generate an HTML table from a set of column\nconfigurations and row data.\n\nTwo classes are included in the `datatable-base` module: `Y.DataTable` and\n`Y.DataTable.Base`.",
            "tag": "main",
            "itemtype": "main",
            "since": "3.5.0"
        },
        "datatable-body": {
            "name": "datatable-body",
            "submodules": {},
            "classes": {
                "DataTable.BodyView": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "DataTable": 1
            },
            "module": "datatable",
            "namespace": "",
            "file": "js/body.js",
            "line": 20,
            "description": "View class responsible for rendering the `<tbody>` section of a table. Used as\nthe default `bodyView` for `Y.DataTable.Base` and `Y.DataTable` classes.",
            "since": "3.5.0"
        },
        "datatable-celleditor-base": {
            "name": "datatable-celleditor-base",
            "submodules": {},
            "classes": {
                "DataTable.BaseCellEditor": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/celleditor-base.js",
            "line": 20,
            "description": "Provides the base services for cell editors. This class is meant to be subclassed\nby actual implementations of cell editors"
        },
        "datatable-celleditor-inline": {
            "name": "datatable-celleditor-inline",
            "submodules": {},
            "classes": {
                "DataTable.BaseCellInlineEditor": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/celleditor-inline.js",
            "line": 6,
            "description": "Provides cell editors that appear to make the cell itself editable by occupying the same region."
        },
        "datatable-celleditor-keyfiltering": {
            "name": "datatable-celleditor-keyfiltering",
            "submodules": {},
            "classes": {
                "DataTable.BaseCellEditor.KeyFiltering": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/celleditor-keyfiltering.js",
            "line": 11,
            "description": "Extension to DataTable Cell Editors that does input validation as the entry is being\ntyped or pasted in.  It uses the `event-valuechange` module to check the on\ninput and textarea elements.\n\nThe built-in cell editors have key filters configured, when applicable, but they\nwill not be operative unless this module is loaded."
        },
        "datatable-celleditor-popup": {
            "name": "datatable-celleditor-popup",
            "submodules": {},
            "classes": {
                "DataTable.BaseCellPopupEditor": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/celleditor-popup.js",
            "line": 6,
            "description": "Provides cell editors contained in an overlay that pops on top of the cell to be edited."
        },
        "datatable-column-widths": {
            "name": "datatable-column-widths",
            "submodules": {},
            "classes": {
                "DataTable.ColumnWidths": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/colwidths.js",
            "line": 45,
            "description": "Adds basic, programmatic column width support to DataTable via column\nconfiguration property `width` and method `table.setColumnWidth(id, width);`.",
            "since": "3.5.0"
        },
        "datatable-core": {
            "name": "datatable-core",
            "submodules": {},
            "classes": {
                "DataTable.Core": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/core.js",
            "line": 24,
            "description": "The core implementation of the `DataTable` and `DataTable.Base` Widgets.",
            "since": "3.5.0"
        },
        "datatable-datasource": {
            "name": "datatable-datasource",
            "submodules": {},
            "classes": {
                "Plugin.DataTableDataSource": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/datatable-datasource.js",
            "line": 8,
            "description": "Plugs DataTable with DataSource integration."
        },
        "datatable-editable": {
            "name": "datatable-editable",
            "submodules": {},
            "classes": {
                "DataTable.Editors": 1,
                "DataTable.Editable": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/editable.js",
            "line": 22,
            "description": "Allows the cells on a DataTable to be edited. Requires either the inline or popup cell editors."
        },
        "datatable-formatters": {
            "name": "datatable-formatters",
            "submodules": {},
            "classes": {
                "DataTable.BodyView.Formatters": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/formatters.js",
            "line": 19,
            "description": "Adds predefined cell formatters to `Y.DataTable.BodyView`.",
            "since": "3.8.0"
        },
        "datatable-head": {
            "name": "datatable-head",
            "submodules": {},
            "classes": {
                "DataTable.HeaderView": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "DataTable": 1
            },
            "module": "datatable",
            "namespace": "",
            "file": "js/head.js",
            "line": 14,
            "description": "View class responsible for rendering the `<thead>` section of a table. Used as\nthe default `headerView` for `Y.DataTable.Base` and `Y.DataTable` classes.",
            "since": "3.5.0"
        },
        "datatable-input-formatters": {
            "name": "datatable-input-formatters",
            "submodules": {},
            "classes": {
                "DataTable.BodyView.InputFormatters": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/inputformatters.js",
            "line": 20,
            "description": "Adds predefined cell formatters to `Y.DataTable.BodyView`.",
            "since": "3.8.0"
        },
        "datatable-message": {
            "name": "datatable-message",
            "submodules": {},
            "classes": {
                "DataTable.Message": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/message.js",
            "line": 12,
            "description": "Adds support for a message container to appear in the table.  This can be used\nto indicate loading progress, lack of records, or any other communication\nneeded.",
            "since": "3.5.0"
        },
        "datatable-mutable": {
            "name": "datatable-mutable",
            "submodules": {},
            "classes": {
                "DataTable.Mutable": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/mutable.js",
            "line": 17,
            "description": "Adds mutation convenience methods such as `table.addRow(data)` to `Y.DataTable`. (or other built class).",
            "since": "3.5.0"
        },
        "datatable-scroll": {
            "name": "datatable-scroll",
            "submodules": {},
            "classes": {
                "DataTable.Scrollable": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "js/scroll.js",
            "line": 21,
            "description": "Adds the ability to make the table rows scrollable while preserving the header\nplacement.",
            "since": "3.5.0"
        },
        "datatable-sort": {
            "name": "datatable-sort",
            "submodules": {},
            "classes": {
                "DataTable.Sortable": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "datatable",
            "namespace": "",
            "file": "js/sort.js",
            "line": 26,
            "description": "Adds support for sorting the table data by API methods `table.sort(...)` or\n`table.toggleSort(...)` or by clicking on column headers in the rendered UI.",
            "since": "3.5.0"
        },
        "datatable-table": {
            "name": "datatable-table",
            "submodules": {},
            "classes": {
                "DataTable.TableView": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "DataTable": 1
            },
            "module": "datatable",
            "namespace": "",
            "file": "js/table.js",
            "line": 16,
            "description": "View class responsible for rendering a `<table>` from provided data.  Used as\nthe default `view` for `Y.DataTable.Base` and `Y.DataTable` classes.",
            "since": "3.6.0"
        }
    },
    "classes": {
        "DataTable": {
            "name": "DataTable",
            "shortname": "DataTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "",
            "file": "js/base.js",
            "line": 16,
            "description": "A Widget for displaying tabular data.  Before feature modules are `use()`d,\nthis class is functionally equivalent to DataTable.Base.  However, feature\nmodules can modify this class in non-destructive ways, expanding the API and\nfunctionality.\n\nThis is the primary DataTable class.  Out of the box, it provides the ability\nto dynamically generate an HTML table from a set of column configurations and\nrow data.  But feature module inclusion can add table sorting, pagintaion,\nhighlighting, selection, and more.\n\n<pre><code>\n// The functionality of this table would require additional modules be use()d,\n// but the feature APIs are aggregated onto Y.DataTable.\n// (Snippet is for illustration. Not all features are available today.)\nvar table = new Y.DataTable({\n    columns: [\n        { type: 'checkbox', defaultChecked: true },\n        { key: 'firstName', sortable: true, resizable: true },\n        { key: 'lastName', sortable: true },\n        { key: 'role', formatter: toRoleName }\n    ],\n    data: {\n        source: 'http://myserver.com/service/json',\n        type: 'json',\n        schema: {\n            resultListLocator: 'results.users',\n            fields: [\n                'username',\n                'firstName',\n                'lastName',\n                { key: 'role', type: 'number' }\n            ]\n        }\n    },\n    recordType: UserModel,\n    pagedData: {\n        location: 'footer',\n        pageSizes: [20, 50, 'all'],\n        rowsPerPage: 20,\n        pageLinks: 5\n    },\n    editable: true\n});\n</code></pre>\n\n### Column Configuration\n\nThe column configurations are set in the form of an array of objects, where\neach object corresponds to a column.  For columns populated directly from the\nrow data, a 'key' property is required to bind the column to that property or\nattribute in the row data.\n\nNot all columns need to relate to row data, nor do all properties or attributes\nof the row data need to have a corresponding column.  However, only those\ncolumns included in the `columns` configuration attribute will be rendered.\n\nOther column configuration properties are supported by the configured\n`view`, class as well as any features added by plugins or class extensions.\nSee the description of DataTable.TableView and its subviews\nDataTable.HeaderView, DataTable.BodyView, and DataTable.FooterView (and other\nDataTable feature classes) to see what column properties they support.\n\nSome examples of column configurations would be:\n\n<pre><code>\n// Basic\nvar columns = [{ key: 'firstName' }, { key: 'lastName' }, { key: 'age' }];\n\n// For columns without any additional configuration, strings can be used\nvar columns = ['firstName', 'lastName', 'age'];\n\n// Multi-row column headers (see DataTable.HeaderView for details)\nvar columns = [\n    {\n        label: 'Name',\n        children: [\n            { key: 'firstName' },\n            { key: 'lastName' }\n        ]\n    },\n    'age' // mixing and matching objects and strings is ok\n];\n\n// Including columns that are not related 1:1 to row data fields/attributes\n// (See DataTable.BodyView for details)\nvar columns = [\n    {\n        label: 'Name', // Needed for the column header\n        formatter: function (o) {\n            // Fill the column cells with data from firstName and lastName\n            if (o.data.age > 55) {\n                o.className += ' senior';\n            }\n            return o.data.lastName + ', ' + o.data.firstName;\n        }\n    },\n    'age'\n];\n\n// Columns that include feature configurations (for illustration; not all\n// features are available today).\nvar columns = [\n    { type: 'checkbox', defaultChecked: true },\n    { key: 'firstName', sortable: true, resizable: true, min-width: '300px' },\n    { key: 'lastName', sortable: true, resizable: true, min-width: '300px' },\n    { key: 'age', emptyCellValue: '<em>unknown</em>' }\n];\n</code></pre>\n\n### Row Data Configuration\n\nThe `data` configuration attribute is responsible for housing the data objects\nthat will be rendered as rows.  You can provide this information in two ways by default:\n\n1. An array of simple objects with key:value pairs\n2. A ModelList of Base-based class instances (presumably Model subclass\n   instances)\n\nIf an array of objects is passed, it will be translated into a ModelList filled\nwith instances of the class provided to the `recordType` attribute.  This\nattribute can also create a custom Model subclass from an array of field names\nor an object of attribute configurations.  If no `recordType` is provided, one\nwill be created for you from available information (see `_initRecordType`).\nProviding either your own ModelList instance for `data`, or at least Model\nclass for `recordType`, is the best way to control client-server\nsynchronization when modifying data on the client side.\n\nThe ModelList instance that manages the table's data is available in the `data`\nproperty on the DataTable instance.\n\n\n### Rendering\n\nTable rendering is a collaborative process between the DataTable and its\nconfigured `view`. The DataTable creates an instance of the configured `view`\n(DataTable.TableView by default), and calls its `render()` method.\nDataTable.TableView, for instance, then creates the `<table>` and `<caption>`,\nthen delegates the rendering of the specific sections of the table to subviews,\nwhich can be configured as `headerView`, `bodyView`, and `footerView`.\nDataTable.TableView defaults the `headerView` to DataTable.HeaderView and the\n`bodyView` to DataTable.BodyView, but leaves the `footerView` unassigned.\nSetting any subview to `null` will result in that table section not being\nrendered.",
            "extends": "DataTable.Base",
            "since": "3.5.0"
        },
        "DataTable.Base": {
            "name": "DataTable.Base",
            "shortname": "DataTable.Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable",
            "file": "js/base.js",
            "line": 167,
            "description": "The baseline implementation of a DataTable.  This class should be used\nprimarily as a superclass for a custom DataTable with a specific set of\nfeatures.  Because features can be composed onto `Y.DataTable`, custom\nsubclasses of DataTable.Base will remain unmodified when new feature modules\nare loaded.\n\nExample usage might look like this:\n\n<pre><code>\n// Custom subclass with only sorting and mutability added.  If other datatable\n// feature modules are loaded, this class will not be affected.\nvar MyTableClass = Y.Base.create('table', Y.DataTable.Base,\n                       [ Y.DataTable.Sortable, Y.DataTable.Mutable ]);\n\nvar table = new MyTableClass({\n    columns: ['firstName', 'lastName', 'age'],\n    data: [\n        { firstName: 'Frank', lastName: 'Zappa', age: 71 },\n        { firstName: 'Frank', lastName: 'Lloyd Wright', age: 144 },\n        { firstName: 'Albert', lastName: 'Einstein', age: 132 },\n        ...\n    ]\n});\n\ntable.render('#over-there');\n\n// DataTable.Base can be instantiated if a featureless table is needed.\nvar table = new Y.DataTable.Base({\n    columns: ['firstName', 'lastName', 'age'],\n    data: [\n        { firstName: 'Frank', lastName: 'Zappa', age: 71 },\n        { firstName: 'Frank', lastName: 'Lloyd Wright', age: 144 },\n        { firstName: 'Albert', lastName: 'Einstein', age: 132 },\n        ...\n    ]\n});\n\ntable.render('#in-here');\n</code></pre>\n\nDataTable.Base is built from DataTable.Core, and sets the default `view`\nto `Y.DataTable.TableView`.",
            "extends": "Widget",
            "uses": [
                "DataTable.Core"
            ],
            "since": "3.5.0"
        },
        "DataTable.BodyView": {
            "name": "DataTable.BodyView",
            "shortname": "DataTable.BodyView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable",
            "file": "js/body.js",
            "line": 20,
            "description": "View class responsible for rendering the `<tbody>` section of a table. Used as\nthe default `bodyView` for `Y.DataTable.Base` and `Y.DataTable` classes.\n\nTranslates the provided `modelList` into a rendered `<tbody>` based on the data\nin the constituent Models, altered or ammended by any special column\nconfigurations.\n\nThe `columns` configuration, passed to the constructor, determines which\ncolumns will be rendered.\n\nThe rendering process involves constructing an HTML template for a complete row\nof data, built by concatenating a customized copy of the instance's\n`CELL_TEMPLATE` into the `ROW_TEMPLATE` once for each column.  This template is\nthen populated with values from each Model in the `modelList`, aggregating a\ncomplete HTML string of all row and column data.  A `<tbody>` Node is then created from the markup and any column `nodeFormatter`s are applied.\n\nSupported properties of the column objects include:\n\n  * `key` - Used to link a column to an attribute in a Model.\n  * `name` - Used for columns that don't relate to an attribute in the Model\n    (`formatter` or `nodeFormatter` only) if the implementer wants a\n    predictable name to refer to in their CSS.\n  * `cellTemplate` - Overrides the instance's `CELL_TEMPLATE` for cells in this\n    column only.\n  * `formatter` - Used to customize or override the content value from the\n    Model.  These do not have access to the cell or row Nodes and should\n    return string (HTML) content.\n  * `nodeFormatter` - Used to provide content for a cell as well as perform any\n    custom modifications on the cell or row Node that could not be performed by\n    `formatter`s.  Should be used sparingly for better performance.\n  * `emptyCellValue` - String (HTML) value to use if the Model data for a\n    column, or the content generated by a `formatter`, is the empty string,\n    `null`, or `undefined`.\n  * `allowHTML` - Set to `true` if a column value, `formatter`, or\n    `emptyCellValue` can contain HTML.  This defaults to `false` to protect\n    against XSS.\n  * `className` - Space delimited CSS classes to add to all `<td>`s in a column.\n\nA column `formatter` can be:\n\n  * a function, as described below.\n  * a string which can be:\n      * the name of a pre-defined formatter function\n        which can be located in the `Y.DataTable.BodyView.Formatters` hash using the\n        value of the `formatter` property as the index.\n      * A template that can use the `{value}` placeholder to include the value\n        for the current cell or the name of any field in the underlaying model\n        also enclosed in curly braces.  Any number and type of these placeholders\n        can be used.\n\nColumn `formatter`s are passed an object (`o`) with the following properties:\n\n  * `value` - The current value of the column's associated attribute, if any.\n  * `data` - An object map of Model keys to their current values.\n  * `record` - The Model instance.\n  * `column` - The column configuration object for the current column.\n  * `className` - Initially empty string to allow `formatter`s to add CSS\n    classes to the cell's `<td>`.\n  * `rowIndex` - The zero-based row number.\n  * `rowClass` - Initially empty string to allow `formatter`s to add CSS\n    classes to the cell's containing row `<tr>`.\n\nThey may return a value or update `o.value` to assign specific HTML content.  A\nreturned value has higher precedence.\n\nColumn `nodeFormatter`s are passed an object (`o`) with the following\nproperties:\n\n  * `value` - The current value of the column's associated attribute, if any.\n  * `td` - The `<td>` Node instance.\n  * `cell` - The `<div>` liner Node instance if present, otherwise, the `<td>`.\n    When adding content to the cell, prefer appending into this property.\n  * `data` - An object map of Model keys to their current values.\n  * `record` - The Model instance.\n  * `column` - The column configuration object for the current column.\n  * `rowIndex` - The zero-based row number.\n\nThey are expected to inject content into the cell's Node directly, including\nany \"empty\" cell content.  Each `nodeFormatter` will have access through the\nNode API to all cells and rows in the `<tbody>`, but not to the `<table>`, as\nit will not be attached yet.\n\nIf a `nodeFormatter` returns `false`, the `o.td` and `o.cell` Nodes will be\n`destroy()`ed to remove them from the Node cache and free up memory.  The DOM\nelements will remain as will any content added to them.  _It is highly\nadvisable to always return `false` from your `nodeFormatter`s_.",
            "extends": "View",
            "since": "3.5.0"
        },
        "DataTable.BaseCellEditor": {
            "name": "DataTable.BaseCellEditor",
            "shortname": "DataTable.BaseCellEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-celleditor-base",
            "namespace": "",
            "file": "js/celleditor-base.js",
            "line": 20,
            "extends": "Y.View",
            "author": "Todd Smith",
            "since": "3.8.0"
        },
        "DataTable.BaseCellInlineEditor": {
            "name": "DataTable.BaseCellInlineEditor",
            "shortname": "DataTable.BaseCellInlineEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-celleditor-inline",
            "namespace": "",
            "file": "js/celleditor-inline.js",
            "line": 6,
            "description": "A View class that serves as the BASE View class for a TD Cell \"inline\" editor, i.e. an editor that\nis a single INPUT node that completely overlies the TD cell.  This editor is intended to replicate\nthe familiar \"spreadsheet\" type of input.",
            "extends": "DataTable.BaseCellEditor",
            "author": "Todd Smith",
            "since": "3.8.0"
        },
        "DataTable.Editors": {
            "name": "DataTable.Editors",
            "shortname": "DataTable.Editors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-editable",
            "namespace": "",
            "file": "js/editable.js",
            "line": 1047,
            "description": "This object is attached to the DataTable namespace to allow addition of \"editors\" in conjunction\nwith the Y.DataTable.Editable module.",
            "type": "{Object}",
            "since": "3.8.0"
        },
        "DataTable.BaseCellEditor.KeyFiltering": {
            "name": "DataTable.BaseCellEditor.KeyFiltering",
            "shortname": "DataTable.BaseCellEditor.KeyFiltering",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-celleditor-keyfiltering",
            "namespace": "",
            "file": "js/celleditor-keyfiltering.js",
            "line": 11,
            "description": "This class is not meant to be used directly, it will get automatically mixed into\n`DataTable.BaseCellEditor`.",
            "static": 1
        },
        "DataTable.BaseCellPopupEditor": {
            "name": "DataTable.BaseCellPopupEditor",
            "shortname": "DataTable.BaseCellPopupEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-celleditor-popup",
            "namespace": "",
            "file": "js/celleditor-popup.js",
            "line": 6,
            "description": "This module defines an extension of View that includes a BASE Y.DataTable.BaseCellPopupEditor View class definition\ncell \"pop-up\" editor.  This view class includes an editor with HTML inserted into an Overlay widget directly over\nthe TD cell.  Positioning, event management, creation/destruction and attribute changes are managed by this class.",
            "extends": "DataTable.BaseCellEditor",
            "author": "Todd Smith",
            "since": "3.8.0"
        },
        "DataTable.ColumnWidths": {
            "name": "DataTable.ColumnWidths",
            "shortname": "DataTable.ColumnWidths",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-column-widths",
            "namespace": "",
            "file": "js/colwidths.js",
            "line": 45,
            "description": "_API docs for this extension are included in the DataTable class._\n\nAdds basic, programmatic column width support to DataTable. Note, this does not\nadd support for truncated columns.  Due to the way HTML tables render, column\nwidth is more like a \"recommended width\".  Column content wider than the\nassigned width will cause the column to expand, despite the configured width.\nSimilarly if the table is too narrow to fit the column with the configured\ncolumn width, the column width will be reduced.\n\nTo set a column width, either add a `width` value to the column configuration\nor call the `setColumnWidth(id, width)` method.\n\nNote, assigning column widths is possible without this module, as each cell is\ndecorated with a class appropriate for that column which you can statically\ntarget in your site's CSS.\n\nTo achieve absolute column widths, with content truncation, you can either:\n\n1. Use this module, configure *all* columns to have `width`s, then add\n   `table-layout: fixed;` to your CSS for the appropriate `<table>`, or\n2. Wrap the contents of all cells in the column with a `<div>` (using a\n   `cellTemplate` or `formatter`), assign the div's style `width`, then assign\n   the column `width` or add a CSS `width` to the column class created by\n   DataTable.\n\n<pre><code>.yui3-datatable .yui3-datatable-col-foo {\n    padding: 0;\n    width: 125px;\n}\n.yui3-datatable .yui3-datatable-col-foo .yui3-datatable-liner {\n    overflow: hidden;\n    padding: 4px 10px;\n    width: 125px;\n}\n</pre></code>\n\n<pre><code>var table = new Y.DataTable({\n    columns: [\n        {\n            key: 'foo',\n            cellTemplate:\n                '&lt;td class=\"{className}\">' +\n                    '&lt;div class=\"yui3-datatable-liner\">{content}&lt;/div>' +\n                '&lt;/td>'\n        },\n        ...\n    ],\n    ...\n});\n</code></pre>\n\nTo add a liner to all columns, either provide a custom `bodyView` to the\nDataTable constructor or update the default `bodyView`'s `CELL_TEMPLATE` like\nso:\n\n<pre><code>table.on('renderBody', function (e) {\n    e.view.CELL_TEMPLATE = e.view.CELL_TEMPLATE.replace(/\\{content\\}/,\n            '&lt;div class=\"yui3-datatable-liner\">{content}&lt;/div>');\n});\n</code></pre>\n\nKeep in mind that DataTable skins apply cell `padding`, so assign your CSS\n`width`s accordingly or override the `padding` style for that column's `<td>`s\nto 0, and add `padding` to the liner `<div>`'s styles as shown above.",
            "since": "3.5.0"
        },
        "DataTable.Core": {
            "name": "DataTable.Core",
            "shortname": "DataTable.Core",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "DataTable.Base"
            ],
            "module": "datatable",
            "submodule": "datatable-core",
            "namespace": "",
            "file": "js/core.js",
            "line": 24,
            "description": "_API docs for this extension are included in the DataTable class._\n\nClass extension providing the core API and structure for the DataTable Widget.\n\nUse this class extension with Widget or another Base-based superclass to create\nthe basic DataTable model API and composing class structure.",
            "since": "3.5.0"
        },
        "Plugin.DataTableDataSource": {
            "name": "Plugin.DataTableDataSource",
            "shortname": "Plugin.DataTableDataSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-datasource",
            "namespace": "",
            "file": "js/datatable-datasource.js",
            "line": 8,
            "description": "Adds DataSource integration to DataTable.",
            "extends": "Plugin.Base"
        },
        "DataTable.Editable": {
            "name": "DataTable.Editable",
            "shortname": "DataTable.Editable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-editable",
            "namespace": "",
            "file": "js/editable.js",
            "line": 22,
            "description": "A DataTable class extension that configures a DataTable for editing.\nCurrently it supports cell editing via both inline and with popups.\n\nThis module is essentially a base wrapper-class to setup a DataTable\nfor editing with the appropriate attributes and\nlistener creation / detachment.  The actual editors are within\nthe datatable-celleditor-inline and datatable-celleditor-popup modules.",
            "extends": "Y.DataTable",
            "author": "Todd Smith",
            "since": "3.8.0"
        },
        "DataTable.BodyView.Formatters": {
            "name": "DataTable.BodyView.Formatters",
            "shortname": "DataTable.BodyView.Formatters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-formatters",
            "namespace": "",
            "file": "js/formatters.js",
            "line": 19,
            "description": "Registry of function producing cell formatting functions.\nAllows for names to be used in the column\ndefinition `formatter` property:\n\n    {key:\"myColumn\", formatter:\"date\"}\n\nThese functions are not meant to be used directly.  Instead, they will be\nautomatically called when their names are used as values for the `formatter`\nproperty in a columnd definition.\nThey will be called just once per rendering cycle and will receive\nthe column configuration.  They are expected to return a function that will\nthen be called once per row and will do the actual formatting.\nThey are expected to do all the preparatory once-per-render work\nso that the actual formatting function doesn't need to repeat it.",
            "since": "3.8.0"
        },
        "DataTable.HeaderView": {
            "name": "DataTable.HeaderView",
            "shortname": "DataTable.HeaderView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable",
            "file": "js/head.js",
            "line": 14,
            "description": "View class responsible for rendering the `<thead>` section of a table. Used as\nthe default `headerView` for `Y.DataTable.Base` and `Y.DataTable` classes.\n\nTranslates the provided array of column configuration objects into a rendered\n`<thead>` based on the data in those objects.\n    \n\nThe structure of the column data is expected to be a single array of objects,\nwhere each object corresponds to a `<th>`.  Those objects may contain a\n`children` property containing a similarly structured array to indicate the\nnested cells should be grouped under the parent column's colspan in a separate\nrow of header cells. E.g.\n\n<pre><code>\nnew Y.DataTable.HeaderView({\n  container: tableNode,\n  columns: [\n    { key: 'id' }, // no nesting\n    { key: 'name', children: [\n      { key: 'firstName', label: 'First' },\n      { key: 'lastName',  label: 'Last' } ] }\n  ]\n}).render();\n</code></pre>\n\nThis would translate to the following visualization:\n\n<pre>\n---------------------\n|    |     name     |\n|    |---------------\n| id | First | Last |\n---------------------\n</pre>\n\nSupported properties of the column objects include:\n\n  * `label`     - The HTML content of the header cell.\n  * `key`       - If `label` is not specified, the `key` is used for content.\n  * `children`  - Array of columns to appear below this column in the next\n                  row.\n  * `headerTemplate` - Overrides the instance's `CELL_TEMPLATE` for cells in this\n    column only.\n  * `abbr`      - The content of the 'abbr' attribute of the `<th>`\n  * `title`     - The content of the 'title' attribute of the `<th>`\n  * `className` - Adds this string of CSS classes to the column header\n\nThrough the life of instantiation and rendering, the column objects will have\nthe following properties added to them:\n\n  * `id`       - (Defaulted by DataTable) The id to assign the rendered column\n  * `_colspan` - To supply the `<th>` attribute\n  * `_rowspan` - To supply the `<th>` attribute\n  * `_parent`  - (Added by DataTable) If the column is a child of another\n    column, this points to its parent column\n\nThe column object is also used to provide values for {placeholder} tokens in the\ninstance's `CELL_TEMPLATE`, so you can modify the template and include other\ncolumn object properties to populate them.",
            "extends": "View",
            "since": "3.5.0"
        },
        "DataTable.BodyView.InputFormatters": {
            "name": "DataTable.BodyView.InputFormatters",
            "shortname": "DataTable.BodyView.InputFormatters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-input-formatters",
            "namespace": "",
            "file": "js/inputformatters.js",
            "line": 20,
            "description": "Registry of cell formatting functions, enables names to be used in column\ndefinition `formatter` property:\n\n    {key:\"myColumn\", formatter:\"date\"}\n\nThese functions are not meant to be used directly.  Instead, they will be\nautomatically called when their names are used as values for the `formatter`\nproperty in a columnd definition.\n\nThe functions provided are simple and with few configurable options.\nThe developers are encouraged to define and add to this hash the functions\nthat better suit their needs.",
            "since": "3.8.0"
        },
        "DataTable.Message": {
            "name": "DataTable.Message",
            "shortname": "DataTable.Message",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-message",
            "namespace": "",
            "file": "js/message.js",
            "line": 12,
            "description": "_API docs for this extension are included in the DataTable class._\n\nAdds support for a message container to appear in the table.  This can be used\nto indicate loading progress, lack of records, or any other communication\nneeded.\n\nFeatures added to `Y.DataTable`, and made available for custom classes at\n`Y.DataTable.Message`.",
            "since": "3.5.0"
        },
        "DataTable.Mutable": {
            "name": "DataTable.Mutable",
            "shortname": "DataTable.Mutable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-mutable",
            "namespace": "",
            "file": "js/mutable.js",
            "line": 17,
            "description": "_API docs for this extension are included in the DataTable class._\n\nClass extension to add mutation convenience methods to `Y.DataTable` (or other\nbuilt class).\n\nColumn mutation methods are paired with new custom events:\n\n * addColumn\n * removeColumn\n * modifyColumn\n * moveColumn\n\nRow mutation events are bubbled from the DataTable's `data` ModelList through\nthe DataTable instance.",
            "since": "3.5.0"
        },
        "DataTable.Scrollable": {
            "name": "DataTable.Scrollable",
            "shortname": "DataTable.Scrollable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable-scroll",
            "namespace": "",
            "file": "js/scroll.js",
            "line": 21,
            "description": "_API docs for this extension are included in the DataTable class._\n\nAdds the ability to make the table rows scrollable while preserving the header\nplacement.\n\nThere are two types of scrolling, horizontal (x) and vertical (y).  Horizontal\nscrolling is achieved by wrapping the entire table in a scrollable container.\nVertical scrolling is achieved by splitting the table headers and data into two\nseparate tables, the latter of which is wrapped in a vertically scrolling\ncontainer.  In this case, column widths of header cells and data cells are kept\nin sync programmatically.\n\nSince the split table synchronization can be costly at runtime, the split is only\ndone if the data in the table stretches beyond the configured `height` value.\n\nTo activate or deactivate scrolling, set the `scrollable` attribute to one of\nthe following values:\n\n * `false` - (default) Scrolling is disabled.\n * `true` or 'xy' - If `height` is set, vertical scrolling will be activated, if\n            `width` is set, horizontal scrolling will be activated.\n * 'x' - Activate horizontal scrolling only. Requires the `width` attribute is\n         also set.\n * 'y' - Activate vertical scrolling only. Requires the `height` attribute is\n         also set.",
            "since": "3.5.0"
        },
        "DataTable.Sortable": {
            "name": "DataTable.Sortable",
            "shortname": "DataTable.Sortable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-sort",
            "namespace": "",
            "file": "js/sort.js",
            "line": 26,
            "description": "_API docs for this extension are included in the DataTable class._\n\nThis DataTable class extension adds support for sorting the table data by API\nmethods `table.sort(...)` or `table.toggleSort(...)` or by clicking on column\nheaders in the rendered UI.\n\nSorting by the API is enabled automatically when this module is `use()`d.  To\nenable UI triggered sorting, set the DataTable's `sortable` attribute to\n`true`.\n\n<pre><code>\nvar table = new Y.DataTable({\n    columns: [ 'id', 'username', 'name', 'birthdate' ],\n    data: [ ... ],\n    sortable: true\n});\n\ntable.render('#table');\n</code></pre>\n\nSetting `sortable` to `true` will enable UI sorting for all columns.  To enable\nUI sorting for certain columns only, set `sortable` to an array of column keys,\nor just add `sortable: true` to the respective column configuration objects.\nThis uses the default setting of `sortable: auto` for the DataTable instance.\n\n<pre><code>\nvar table = new Y.DataTable({\n    columns: [\n        'id',\n        { key: 'username',  sortable: true },\n        { key: 'name',      sortable: true },\n        { key: 'birthdate', sortable: true }\n    ],\n    data: [ ... ]\n    // sortable: 'auto' is the default\n});\n\n// OR\nvar table = new Y.DataTable({\n    columns: [ 'id', 'username', 'name', 'birthdate' ],\n    data: [ ... ],\n    sortable: [ 'username', 'name', 'birthdate' ]\n});\n</code></pre>\n\nTo disable UI sorting for all columns, set `sortable` to `false`.  This still\npermits sorting via the API methods.\n\nAs new records are inserted into the table's `data` ModelList, they will be inserted at the correct index to preserve the sort order.\n\nThe current sort order is stored in the `sortBy` attribute.  Assigning this value at instantiation will automatically sort your data.\n\nSorting is done by a simple value comparison using &lt; and &gt; on the field\nvalue.  If you need custom sorting, add a sort function in the column's\n`sortFn` property.  Columns whose content is generated by formatters, but don't\nrelate to a single `key`, require a `sortFn` to be sortable.\n\n<pre><code>\nfunction nameSort(a, b, desc) {\n    var aa = a.get('lastName') + a.get('firstName'),\n        bb = a.get('lastName') + b.get('firstName'),\n        order = (aa > bb) ? 1 : -(aa < bb);\n\n    return desc ? -order : order;\n}\n\nvar table = new Y.DataTable({\n    columns: [ 'id', 'username', { key: name, sortFn: nameSort }, 'birthdate' ],\n    data: [ ... ],\n    sortable: [ 'username', 'name', 'birthdate' ]\n});\n</code></pre>\n\nSee the user guide for more details.",
            "since": "3.5.0"
        },
        "DataTable.TableView": {
            "name": "DataTable.TableView",
            "shortname": "DataTable.TableView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable",
            "file": "js/table.js",
            "line": 16,
            "description": "View class responsible for rendering a `<table>` from provided data.  Used as\nthe default `view` for `Y.DataTable.Base` and `Y.DataTable` classes.",
            "extends": "View",
            "since": "3.6.0"
        }
    },
    "classitems": [
        {
            "file": "docs/assets/datatable-chkboxselect-tests.js",
            "line": 6,
            "description": "The example code looks for chkbox.on('click')... attr checked == true\nIE doesn't set attr checked with a click\nIn non-IE, if you set checked to true then also click it checked == false (it seems)",
            "params": [
                {
                    "name": "expectedState",
                    "description": "Boolean"
                }
            ],
            "class": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 219,
            "description": "Pass through to `delegate()` called from the `contentBox`.",
            "itemtype": "method",
            "name": "delegate",
            "params": [
                {
                    "name": "type",
                    "description": "the event type to delegate",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function to execute.  This function\n             will be provided the event object for the delegated event.",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "a selector that must match the target of the\n             event or a function to test target and its parents for a match",
                    "type": "String|Function"
                },
                {
                    "name": "context",
                    "description": "optional argument that specifies what 'this' refers to",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "0..n additional arguments to pass on to the callback\n             function.  These arguments will be added after the event object.",
                    "type": "Any",
                    "multiple": true
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "EventHandle"
            },
            "since": "3.5.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 240,
            "description": "Destroys the table `View` if it's been created.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 253,
            "description": "Returns the `<td>` Node from the given row and column index.  Alternately,\nthe `seed` can be a Node.  If so, the nearest ancestor cell is returned.\nIf the `seed` is a cell, it is returned.  If there is no cell at the given\ncoordinates, `null` is returned.\n\nOptionally, include an offset array or string to return a cell near the\ncell identified by the `seed`.  The offset can be an array containing the\nnumber of rows to shift followed by the number of columns to shift, or one\nof \"above\", \"below\", \"next\", or \"previous\".\n\n<pre><code>// Previous cell in the previous row\nvar cell = table.getCell(e.target, [-1, -1]);\n\n// Next cell\nvar cell = table.getCell(e.target, 'next');\nvar cell = table.getCell(e.taregt, [0, 1];</pre></code>\n\nThis is actually just a pass through to the `view` instance's method\nby the same name.",
            "itemtype": "method",
            "name": "getCell",
            "params": [
                {
                    "name": "seed",
                    "description": "Array of row and column indexes, or a Node that\n    is either the cell itself or a descendant of one.",
                    "type": "Number[]|Node"
                },
                {
                    "name": "shift",
                    "description": "Offset by which to identify the returned\n    cell Node",
                    "type": "Number[]|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "since": "3.5.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 287,
            "description": "Returns the `<tr>` Node from the given row index, Model, or Model's\n`clientId`.  If the rows haven't been rendered yet, or if the row can't be\nfound by the input, `null` is returned.\n\nThis is actually just a pass through to the `view` instance's method\nby the same name.",
            "itemtype": "method",
            "name": "getRow",
            "params": [
                {
                    "name": "id",
                    "description": "Row index, Model instance, or clientId",
                    "type": "Number|String|Model"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "since": "3.5.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 305,
            "description": "Updates the `_displayColumns` property.",
            "itemtype": "method",
            "name": "_afterDisplayColumnsChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `columnsChange` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 319,
            "description": "Attaches subscriptions to relay core change events to the view.",
            "itemtype": "method",
            "name": "bindUI",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 336,
            "description": "The default behavior of the `renderView` event.  Calls `render()` on the\n`View` instance on the event.",
            "itemtype": "method",
            "name": "_defRenderViewFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `renderView` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 348,
            "description": "Processes the full column array, distilling the columns down to those that\ncorrespond to cell data columns.",
            "itemtype": "method",
            "name": "_extractDisplayColumns",
            "params": [
                {
                    "name": "columns",
                    "description": "The full set of table columns",
                    "type": "Object[]"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 377,
            "description": "Array of the columns that correspond to those with value cells in the\ndata rows. Excludes colspan header columns (configured with `children`).",
            "itemtype": "property",
            "name": "_displayColumns",
            "type": "{Object[]}",
            "since": "3.5.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 388,
            "description": "Sets up the instance's events.",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration object passed at construction",
                    "type": "Object",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 411,
            "description": "Relays attribute changes to the instance's `view`.",
            "itemtype": "method",
            "name": "_relayCoreAttrChange",
            "params": [
                {
                    "name": "e",
                    "description": "The change event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 425,
            "description": "Instantiates the configured `view` class that will be responsible for\nsetting up the View class.",
            "itemtype": "method",
            "name": "@renderUI",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 512,
            "description": "Fires the `renderView` event, delegating UI updates to the configured View.",
            "itemtype": "method",
            "name": "syncUI",
            "since": "3.5.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 524,
            "description": "Verifies the input value is a function with a `render` method on its\nprototype.  `null` is also accepted to remove the default View.",
            "itemtype": "method",
            "name": "_validateView",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 538,
            "description": "The View class used to render the `<table>` into the Widget's\n`contentBox`.  This View can handle the entire table rendering itself\nor delegate to other Views.\n\nIt is not strictly necessary that the class function assigned here be\na View subclass.  It must however have a `render()` method.\n\nWhen the DataTable is rendered, an instance of this View will be\ncreated and its `render()` method called.  The View instance will be\nassigned to the DataTable instance's `view` property.",
            "itemtype": "attribute",
            "name": "view",
            "type": "{Function}",
            "default": "Y.DataTable.TableView",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 560,
            "description": "Configuration object passed to the class constructor in `view`\nduring render.",
            "itemtype": "attribute",
            "name": "viewConfig",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 572,
            "description": "If the View class assigned to the DataTable's `view` attribute supports\nit, this class will be used for rendering the contents of the\n`<thead>`&mdash;the column headers for the table.\n\nSimilar to `view`, the instance of this View will be assigned to the\nDataTable instance's `head` property.\n\nIt is not strictly necessary that the class function assigned here be\na View subclass.  It must however have a `render()` method.",
            "itemtype": "attribute",
            "name": "headerView",
            "type": "{Function|Object}",
            "default": "Y.DataTable.HeaderView",
            "since": "3.5.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 595,
            "description": "Configuration object passed to the class constructor in `headerView`\nduring render.",
            "itemtype": "attribute",
            "name": "headerConfig",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 607,
            "description": "If the View class assigned to the DataTable's `view` attribute supports\nit, this class will be used for rendering the contents of the `<tfoot>`.\n\nSimilar to `view`, the instance of this View will be assigned to the\nDataTable instance's `foot` property.\n\nIt is not strictly necessary that the class function assigned here be\na View subclass.  It must however have a `render()` method.",
            "itemtype": "attribute",
            "name": "footerView",
            "type": "{Function|Object}",
            "since": "3.5.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 627,
            "description": "Configuration object passed to the class constructor in `footerView`\nduring render.",
            "itemtype": "attribute",
            "name": "footerConfig",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 639,
            "description": "If the View class assigned to the DataTable's `view` attribute supports\nit, this class will be used for rendering the contents of the `<tbody>`\nincluding all data rows.\n\nSimilar to `view`, the instance of this View will be assigned to the\nDataTable instance's `body` property.\n\nIt is not strictly necessary that the class function assigned here be\na View subclass.  It must however have a `render()` method.",
            "itemtype": "attribute",
            "name": "bodyView",
            "type": "{Function}",
            "default": "Y.DataTable.BodyView",
            "since": "3.5.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/base.js",
            "line": 662,
            "description": "Configuration object passed to the class constructor in `bodyView`\nduring render.",
            "itemtype": "attribute",
            "name": "bodyConfig",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.Base",
            "module": "datatable",
            "submodule": "datatable-base",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 116,
            "description": "HTML template used to create table cells.",
            "itemtype": "property",
            "name": "CELL_TEMPLATE",
            "type": "{HTML}",
            "default": "'<td {headers} class=\"{className}\">{content}</td>'",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 126,
            "description": "CSS class applied to even rows.  This is assigned at instantiation.\n\nFor DataTable, this will be `yui3-datatable-even`.",
            "itemtype": "property",
            "name": "CLASS_EVEN",
            "type": "{String}",
            "default": "'yui3-table-even'",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 138,
            "description": "CSS class applied to odd rows.  This is assigned at instantiation.\n\nWhen used by DataTable instances, this will be `yui3-datatable-odd`.",
            "itemtype": "property",
            "name": "CLASS_ODD",
            "type": "{String}",
            "default": "'yui3-table-odd'",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 150,
            "description": "HTML template used to create table rows.",
            "itemtype": "property",
            "name": "ROW_TEMPLATE",
            "type": "{HTML}",
            "default": "'<tr id=\"{rowId}\" data-yui3-record=\"{clientId}\" class=\"{rowClass}\">{content}</tr>'",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 160,
            "description": "The object that serves as the source of truth for column and row data.\nThis property is assigned at instantiation from the `host` property of\nthe configuration object passed to the constructor.",
            "itemtype": "property",
            "name": "host",
            "type": "{Object}",
            "default": "(initially unset)",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 173,
            "description": "HTML templates used to create the `<tbody>` containing the table rows.",
            "itemtype": "property",
            "name": "TBODY_TEMPLATE",
            "type": "{HTML}",
            "default": "'<tbody class=\"{className}\">{content}</tbody>'",
            "since": "3.6.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 185,
            "description": "Returns the `<td>` Node from the given row and column index.  Alternately,\nthe `seed` can be a Node.  If so, the nearest ancestor cell is returned.\nIf the `seed` is a cell, it is returned.  If there is no cell at the given\ncoordinates, `null` is returned.\n\nOptionally, include an offset array or string to return a cell near the\ncell identified by the `seed`.  The offset can be an array containing the\nnumber of rows to shift followed by the number of columns to shift, or one\nof \"above\", \"below\", \"next\", or \"previous\".\n\n<pre><code>// Previous cell in the previous row\nvar cell = table.getCell(e.target, [-1, -1]);\n\n// Next cell\nvar cell = table.getCell(e.target, 'next');\nvar cell = table.getCell(e.taregt, [0, 1];</pre></code>",
            "itemtype": "method",
            "name": "getCell",
            "params": [
                {
                    "name": "seed",
                    "description": "Array of row and column indexes, or a Node that\n    is either the cell itself or a descendant of one.",
                    "type": "Number[]|Node"
                },
                {
                    "name": "shift",
                    "description": "Offset by which to identify the returned\n    cell Node",
                    "type": "Number[]|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 249,
            "description": "Returns the generated CSS classname based on the input.  If the `host`\nattribute is configured, it will attempt to relay to its `getClassName`\nor use its static `NAME` property as a string base.\n\nIf `host` is absent or has neither method nor `NAME`, a CSS classname\nwill be generated using this class's `NAME`.",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "token",
                    "description": "Any number of token strings to assemble the\n    classname from.",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 278,
            "description": "Returns the Model associated to the row Node or id provided. Passing the\nNode or id for a descendant of the row also works.\n\nIf no Model can be found, `null` is returned.",
            "itemtype": "method",
            "name": "getRecord",
            "params": [
                {
                    "name": "seed",
                    "description": "Row Node or `id`, or one for a descendant of a row",
                    "type": "String|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Model"
            },
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 313,
            "description": "Returns the `<tr>` Node from the given row index, Model, or Model's\n`clientId`.  If the rows haven't been rendered yet, or if the row can't be\nfound by the input, `null` is returned.",
            "itemtype": "method",
            "name": "getRow",
            "params": [
                {
                    "name": "id",
                    "description": "Row index, Model instance, or clientId",
                    "type": "Number|String|Model"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 340,
            "description": "Creates the table's `<tbody>` content by assembling markup generated by\npopulating the `ROW\\_TEMPLATE`, and `CELL\\_TEMPLATE` templates with content\nfrom the `columns` and `modelList` attributes.\n\nThe rendering process happens in three stages:\n\n1. A row template is assembled from the `columns` attribute (see\n   `_createRowTemplate`)\n\n2. An HTML string is built up by concatening the application of the data in\n   each Model in the `modelList` to the row template. For cells with\n   `formatter`s, the function is called to generate cell content. Cells\n   with `nodeFormatter`s are ignored. For all other cells, the data value\n   from the Model attribute for the given column key is used.  The\n   accumulated row markup is then inserted into the container.\n\n3. If any column is configured with a `nodeFormatter`, the `modelList` is\n   iterated again to apply the `nodeFormatter`s.\n\nSupported properties of the column objects include:\n\n  * `key` - Used to link a column to an attribute in a Model.\n  * `name` - Used for columns that don't relate to an attribute in the Model\n    (`formatter` or `nodeFormatter` only) if the implementer wants a\n    predictable name to refer to in their CSS.\n  * `cellTemplate` - Overrides the instance's `CELL_TEMPLATE` for cells in\n    this column only.\n  * `formatter` - Used to customize or override the content value from the\n    Model.  These do not have access to the cell or row Nodes and should\n    return string (HTML) content.\n  * `nodeFormatter` - Used to provide content for a cell as well as perform\n    any custom modifications on the cell or row Node that could not be\n    performed by `formatter`s.  Should be used sparingly for better\n    performance.\n  * `emptyCellValue` - String (HTML) value to use if the Model data for a\n    column, or the content generated by a `formatter`, is the empty string,\n    `null`, or `undefined`.\n  * `allowHTML` - Set to `true` if a column value, `formatter`, or\n    `emptyCellValue` can contain HTML.  This defaults to `false` to protect\n    against XSS.\n  * `className` - Space delimited CSS classes to add to all `<td>`s in a\n    column.\n\nColumn `formatter`s are passed an object (`o`) with the following\nproperties:\n\n  * `value` - The current value of the column's associated attribute, if\n    any.\n  * `data` - An object map of Model keys to their current values.\n  * `record` - The Model instance.\n  * `column` - The column configuration object for the current column.\n  * `className` - Initially empty string to allow `formatter`s to add CSS\n    classes to the cell's `<td>`.\n  * `rowIndex` - The zero-based row number.\n  * `rowClass` - Initially empty string to allow `formatter`s to add CSS\n    classes to the cell's containing row `<tr>`.\n\nThey may return a value or update `o.value` to assign specific HTML\ncontent.  A returned value has higher precedence.\n\nColumn `nodeFormatter`s are passed an object (`o`) with the following\nproperties:\n\n  * `value` - The current value of the column's associated attribute, if\n    any.\n  * `td` - The `<td>` Node instance.\n  * `cell` - The `<div>` liner Node instance if present, otherwise, the\n    `<td>`.  When adding content to the cell, prefer appending into this\n    property.\n  * `data` - An object map of Model keys to their current values.\n  * `record` - The Model instance.\n  * `column` - The column configuration object for the current column.\n  * `rowIndex` - The zero-based row number.\n\nThey are expected to inject content into the cell's Node directly, including\nany \"empty\" cell content.  Each `nodeFormatter` will have access through the\nNode API to all cells and rows in the `<tbody>`, but not to the `<table>`,\nas it will not be attached yet.\n\nIf a `nodeFormatter` returns `false`, the `o.td` and `o.cell` Nodes will be\n`destroy()`ed to remove them from the Node cache and free up memory.  The\nDOM elements will remain as will any content added to them.  _It is highly\nadvisable to always return `false` from your `nodeFormatter`s_.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "The instance",
                "type": "BodyView"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 458,
            "description": "Handles changes in the source's columns attribute.  Redraws the table data.",
            "itemtype": "method",
            "name": "_afterColumnsChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `columnsChange` event object",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 477,
            "description": "Handles modelList changes, including additions, deletions, and updates.\n\nModifies the existing table DOM accordingly.",
            "itemtype": "method",
            "name": "_afterDataChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `change` event from the ModelList",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 494,
            "description": "Handles replacement of the modelList.\n\nRerenders the `<tbody>` contents.",
            "itemtype": "method",
            "name": "_afterModelListChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `modelListChange` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 518,
            "description": "Iterates the `modelList`, and calls any `nodeFormatter`s found in the\n`columns` param on the appropriate cell Nodes in the `tbody`.",
            "itemtype": "method",
            "name": "_applyNodeFormatters",
            "params": [
                {
                    "name": "tbody",
                    "description": "The `<tbody>` Node whose columns to update",
                    "type": "Node"
                },
                {
                    "name": "columns",
                    "description": "The column configurations",
                    "type": "Object[]"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 585,
            "description": "Binds event subscriptions from the UI and the host (if assigned).",
            "itemtype": "method",
            "name": "bindUI",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 609,
            "description": "Iterates the `modelList` and applies each Model to the `_rowTemplate`,\nallowing any column `formatter` or `emptyCellValue` to override cell\ncontent for the appropriate column.  The aggregated HTML string is\nreturned.",
            "itemtype": "method",
            "name": "_createDataHTML",
            "params": [
                {
                    "name": "columns",
                    "description": "The column configurations to customize the\n            generated cell content or class names",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "The markup for all Models in the `modelList`, each applied\n            to the `_rowTemplate`",
                "type": "HTML"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 636,
            "description": "Applies the data of a given Model, modified by any column formatters and\nsupplemented by other template values to the instance's `_rowTemplate` (see\n`_createRowTemplate`).  The generated string is then returned.\n\nThe data from Model's attributes is fetched by `toJSON` and this data\nobject is appended with other properties to supply values to {placeholders}\nin the template.  For a template generated from a Model with 'foo' and 'bar'\nattributes, the data object would end up with the following properties\nbefore being used to populate the `_rowTemplate`:\n\n  * `clientID` - From Model, used the assign the `<tr>`'s 'id' attribute.\n  * `foo` - The value to populate the 'foo' column cell content.  This\n    value will be the value stored in the Model's `foo` attribute, or the\n    result of the column's `formatter` if assigned.  If the value is '',\n    `null`, or `undefined`, and the column's `emptyCellValue` is assigned,\n    that value will be used.\n  * `bar` - Same for the 'bar' column cell content.\n  * `foo-className` - String of CSS classes to apply to the `<td>`.\n  * `bar-className` - Same.\n  * `rowClass`      - String of CSS classes to apply to the `<tr>`. This\n    will be the odd/even class per the specified index plus any additional\n    classes assigned by column formatters (via `o.rowClass`).\n\nBecause this object is available to formatters, any additional properties\ncan be added to fill in custom {placeholders} in the `_rowTemplate`.",
            "itemtype": "method",
            "name": "_createRowHTML",
            "params": [
                {
                    "name": "model",
                    "description": "The Model instance to apply to the row template",
                    "type": "Model"
                },
                {
                    "name": "index",
                    "description": "The index the row will be appearing",
                    "type": "Number"
                },
                {
                    "name": "columns",
                    "description": "The column configurations",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "The markup for the provided Model, less any `nodeFormatter`s",
                "type": "HTML"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 724,
            "description": "Creates a custom HTML template string for use in generating the markup for\nindividual table rows with {placeholder}s to capture data from the Models\nin the `modelList` attribute or from column `formatter`s.\n\nAssigns the `_rowTemplate` property.",
            "itemtype": "method",
            "name": "_createRowTemplate",
            "params": [
                {
                    "name": "columns",
                    "description": "Array of column configuration objects",
                    "type": "Object[]"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 781,
            "description": "Cleans up temporary values created during rendering.",
            "itemtype": "method",
            "name": "_afterRenderCleanup",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 796,
            "description": "Creates the `<tbody>` node that will store the data rows.",
            "itemtype": "method",
            "name": "_createTBodyNode",
            "return": {
                "description": "",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 810,
            "description": "Destroys the instance.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 821,
            "description": "Holds the event subscriptions needing to be detached when the instance is\n`destroy()`ed.",
            "itemtype": "property",
            "name": "_eventHandles",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 833,
            "description": "Returns the row ID associated with a Model's clientId.",
            "itemtype": "method",
            "name": "_getRowId",
            "params": [
                {
                    "name": "clientId",
                    "description": "The Model clientId",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 845,
            "description": "Map of Model clientIds to row ids.",
            "itemtype": "property",
            "name": "_idMap",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 854,
            "description": "Initializes the instance. Reads the following configuration properties in\naddition to the instance attributes:\n\n  * `columns` - (REQUIRED) The initial column information\n  * `host`    - The object to serve as source of truth for column info and\n                for generating class names",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration data",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 881,
            "description": "The HTML template used to create a full row of markup for a single Model in\nthe `modelList` plus any customizations defined in the column\nconfigurations.",
            "itemtype": "property",
            "name": "_rowTemplate",
            "type": "{HTML}",
            "default": "(initially unset)",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/body.js",
            "line": 894,
            "description": "Hash of formatting functions for cell contents.\n\nThis property can be populated with a hash of formatting functions by the developer\nor a set of pre-defined functions can be loaded via the `datatable-formatters` module.\n\nSee: [DataTable.BodyView.Formatters](./DataTable.BodyView.Formatters.html)",
            "itemtype": "property",
            "name": "Formatters",
            "type": "Object",
            "since": "3.8.0",
            "static": 1,
            "class": "DataTable.BodyView",
            "module": "datatable",
            "submodule": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 30,
            "description": "Defines the INPUT HTML content \"template\" for the editor's View container.\n\nTo be defined by the subclass.",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "''",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 41,
            "description": "Placeholder for the input or textarea Node created within the View container.\nFor input widgets that don't have any, such as Calendar, this can be left null.\nIn such cases, code must be provided for navigation and to display and update\nthe [value](#attr_value) attribute with the entered value.",
            "itemtype": "property",
            "name": "_inputNode",
            "type": "Node",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 54,
            "description": "Array of generic event listener handles created by this class to be\ndetached on destruction.",
            "itemtype": "property",
            "name": "_subscr",
            "type": "[EventHandles]",
            "default": "null",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 67,
            "description": "Copy of the [formatter](#attr_formatter) attribute for internal use.",
            "itemtype": "method",
            "name": "_formatter",
            "type": "Function",
            "default": "(returns value unchanged)",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 76,
            "description": "Copy of the [parser](#attr_parser) attribute for internal use.",
            "itemtype": "method",
            "name": "_parser",
            "type": "Function",
            "default": "(returns value unchanged)",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 85,
            "description": "Collection of information related to the cell being edited.\nIt is used mostly to provide context information when firing events.",
            "itemtype": "property",
            "name": "_cellInfo",
            "type": "Object",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 95,
            "description": "CSS class name to add to an input box when it fails validation.",
            "itemtype": "property",
            "name": "_classError",
            "type": "String",
            "default": "\"yui3-datatable-celleditor-error\"",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 105,
            "description": "Creates the View instance and sets the container and bindings",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 115,
            "description": "Event fired when the inline editor has been initialized and is ready for use.",
            "itemtype": "event",
            "name": "render",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 124,
            "description": "Event fired when the cell editor is displayed and becomes visible.",
            "itemtype": "event",
            "name": "show",
            "params": [
                {
                    "name": "ev",
                    "description": "Event Facade including:",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "td",
                            "description": "The TD Node that was edited",
                            "type": "Node"
                        },
                        {
                            "name": "record",
                            "description": "Model instance of the record data for the edited cell",
                            "type": "Model"
                        },
                        {
                            "name": "colKey",
                            "description": "Column key (or name) of the edited cell",
                            "type": "String"
                        },
                        {
                            "name": "initialValue",
                            "description": "The original value of the underlying data for the cell",
                            "type": "Any"
                        },
                        {
                            "name": "inputNode",
                            "description": "The editor's INPUT / TEXTAREA Node",
                            "type": "Node"
                        },
                        {
                            "name": "formattedValue",
                            "description": "The value as shown to the user.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 140,
            "description": "Event that is fired when the user has finished editing the View's cell contents",
            "itemtype": "event",
            "name": "save",
            "params": [
                {
                    "name": "ev",
                    "description": "Event facade, including:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "td",
                            "description": "The TD Node that was edited",
                            "type": "Node"
                        },
                        {
                            "name": "record",
                            "description": "Model instance of the record data for the edited cell",
                            "type": "Model"
                        },
                        {
                            "name": "colKey",
                            "description": "Column key (or name) of the edited cell",
                            "type": "String"
                        },
                        {
                            "name": "initialValue",
                            "description": "The original value of the underlying data for the cell",
                            "type": "Any"
                        },
                        {
                            "name": "formattedValue",
                            "description": "Data value as entered by the user",
                            "type": "Any"
                        },
                        {
                            "name": "newValue",
                            "description": "Parsed value ready to be saved",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 156,
            "description": "Fired when editing is cancelled (without saving) on this cell editor.",
            "itemtype": "event",
            "name": "cancel",
            "params": [
                {
                    "name": "ev",
                    "description": "Event facade, including:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "td",
                            "description": "The TD Node that was edited",
                            "type": "Node"
                        },
                        {
                            "name": "record",
                            "description": "Model instance of the record data for the edited cell",
                            "type": "Model"
                        },
                        {
                            "name": "colKey",
                            "description": "Column key (or name) of the edited cell",
                            "type": "String"
                        },
                        {
                            "name": "initialValue",
                            "description": "The original value of the underlying data for the cell",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 173,
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 186,
            "description": "Renders the editor and binds several event listeners.\nDevelopers writing specific cell editors should not override this method\nbut [_defRenderFn](#method__defRenderFn) instead.",
            "itemtype": "method",
            "name": "render",
            "chainable": 1,
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 201,
            "description": "It should insert the HTML for this editor into the container.\nThe default implementation does nothing.\n\nIt must be defined by the subclass.\n\nIf a particular cell editor has an input or textarea control,\na reference to it should be stored in the [_inputNode](#property__inputNode)\nproperty to enable keyboard navigation, setting and updating the value and\na few other actions.",
            "itemtype": "method",
            "name": "_defRenderFn",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 220,
            "description": "Sets the event listeners.\nIf [_inputNode](#property__inputNode) is set it will also set listeners for it.",
            "itemtype": "method",
            "name": "_bindUI",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 249,
            "description": "Detaches all event listeners.",
            "itemtype": "method",
            "name": "_unbindUI",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 265,
            "description": "The default action for the [save](#event_save) event.",
            "itemtype": "method",
            "name": "_defSaveFn",
            "params": [
                {
                    "name": "e",
                    "description": "For [save](#event_save) event",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 278,
            "description": "The default action for the [cancel](#event_cancel) event.",
            "itemtype": "method",
            "name": "_defCancelFn",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 289,
            "description": "The default action for the [show](#event_show) event which should make the editor visible.\n\nThe default implementation expects [_inputNode](#property__inputNode) to be\na reference to an input or textarea with a `focus` method and a `value` attribute.",
            "itemtype": "method",
            "name": "_defShowFn",
            "params": [
                {
                    "name": "e",
                    "description": "for the [show](#event_show) event.",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 313,
            "description": "Displays, positions and resizes the cell editor over the edited TD element.\n\nSets the initial value after formatting.",
            "itemtype": "method",
            "name": "showEditor",
            "params": [
                {
                    "name": "cellInfo",
                    "description": "Information about the cell that is to be edited, including:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "td",
                            "description": "Reference to the table cell",
                            "type": "Node"
                        },
                        {
                            "name": "record",
                            "description": "Reference to the model containing the underlying data",
                            "type": "Model"
                        },
                        {
                            "name": "colKey",
                            "description": "Key of the column for the cell to be edited",
                            "type": "String"
                        },
                        {
                            "name": "initialValue",
                            "description": "The underlying value of the cell to be edited",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 343,
            "description": "Saves the value provided after validating and parsing it.",
            "itemtype": "method",
            "name": "saveEditor",
            "params": [
                {
                    "name": "value",
                    "description": "Raw value (not yet parsed) to be saved.",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 377,
            "description": "Hides the current editor View instance.",
            "itemtype": "method",
            "name": "hideEditor",
            "access": "public",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 395,
            "description": "Called when the user has requested to cancel and abort any changes to the DT cell,\nusually signified by a keyboard ESC or \"Cancel\" button, etc..",
            "itemtype": "method",
            "name": "cancelEditor",
            "access": "public",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 409,
            "description": "Key listener for the input element `keydown` event.\nIt handles navigation, Enter or Esc.\nIt is automatically attached if [_inputNode](#property__inputNode) is set.",
            "itemtype": "method",
            "name": "_onKeyDown",
            "params": [
                {
                    "name": "e",
                    "description": "Keydown event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 418,
            "description": "Fires when the navigation keys are pressed to move to another cell.",
            "itemtype": "event",
            "name": "keyNav",
            "params": [
                {
                    "name": "e",
                    "description": "event facade including:",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "dx",
                            "description": "number of cells to move in the x direction. (usually -1: left, 0 or 1: right)",
                            "type": "Integer"
                        },
                        {
                            "name": "dy",
                            "description": "number of cells to move in the y direction. (usually -1: up, 0 or 1: down)",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 475,
            "description": "Listener to INPUT \"click\" events that will stop bubbling to the DT TD listener,\nto prevent closing editing while clicking within an INPUT.",
            "itemtype": "method",
            "name": "_onClick",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 488,
            "description": "Event listener for the [xy](#attr_xy) change event.\nIt can be used to quickly reset the cell editor's position,\nused for scrollable DataTables.\n\nTo be implemented by the subclasses.",
            "itemtype": "method",
            "name": "_afterXYChange",
            "params": [
                {
                    "name": "e",
                    "description": "Standard attribute change event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 503,
            "description": "Responds to changes in the [visible](#attr_visible) attribute by showing/hiding the\ncell editor",
            "itemtype": "method",
            "name": "_afterVisibleChange",
            "params": [
                {
                    "name": "e",
                    "description": "Standard Attribute change event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 525,
            "description": "Value being edited.  It should be a copy of the value stored in the record.",
            "itemtype": "attribute",
            "name": "value",
            "type": "Any",
            "default": "null",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 537,
            "description": "Function to execute on the [value](#attr_value) just prior to displaying in the\neditor's input element.\n(i.e. typically used for pre-formatting Date information from JS to mm/dd/YYYY format)\n\nThis function will receive the value from the record as its only argument\nand should return the formatted version to be shown to the user.",
            "itemtype": "attribute",
            "name": "formatter",
            "type": "Function || null",
            "default": "null",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 558,
            "description": "Function to execute prior to saving the data to the record (Model).\n\nThis function will receive the raw value from the INPUT element as\nits only argument and should return the value to be stored in the record.\n\nThis method can also be used for input validation prior to saving.\nIf the returned value is `Y.Attribute.INVALID_VALUE` saving will be prevented.",
            "itemtype": "attribute",
            "name": "parser",
            "type": "Function",
            "default": "null",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 581,
            "description": "Signals whether the editor is open and active.",
            "itemtype": "attribute",
            "name": "active",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 595,
            "description": "Determines whether the cell editor is visible.\n\nThe cell editor might be [active](#attr_active) but it might have scrolled off the\nvisible area of an scrolling datatable hence turning invisible.",
            "itemtype": "attribute",
            "name": "visible",
            "type": "Boolean",
            "default": "false",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 611,
            "description": "XY coordinate position of the editor View container (INPUT).",
            "itemtype": "attribute",
            "name": "xy",
            "type": "Array",
            "default": "null",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 624,
            "description": "Provides the capability to validate the final value to be saved after editing is finished.\nThis attribute can be a RegEx that operates on the entire\n`value` setting of the editor input element.\n\nFurther validation can be provided by the method set in the [parser](#attr_parser)\nattribute.\n//TODO: shouldn't they be enclosed in between $ and ^ ?",
            "example": [
                "\n     /\\d/            // for numeric digit-only input\n     /\\d|\\-|\\.|\\+/   // for floating point numeric input\n     /\\d|\\//         // for Date field entry in MM/DD/YYYY format"
            ],
            "itemtype": "attribute",
            "name": "validator",
            "type": "RegExp",
            "default": "null",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 646,
            "description": "A flag to signify whether the editor View should be \"saved\" upon detecting the Enter keystroke\nwithin the INPUT area.\n\nFor example, textarea typically will not, to allow a newline to be added.",
            "itemtype": "attribute",
            "name": "saveOnEnterKey",
            "type": "boolean",
            "default": "true",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-base.js",
            "line": 660,
            "description": "A flag to indicate if cell-to-cell navigation should be implemented (currently setup for CTRL-arrow\nkey, TAB and Shift-TAB) capability",
            "itemtype": "attribute",
            "name": "navigationEnabled",
            "type": "Boolean",
            "default": "true",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-base"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 20,
            "description": "Defines the INPUT HTML content \"template\" for this editor's View container",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "'<input type=\"text\" class=\"{cssInput}\" />'",
            "class": "DataTable.BaseCellInlineEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 28,
            "description": "CSS classname to identify the editor's INPUT Node",
            "itemtype": "property",
            "name": "_classInput",
            "type": "String",
            "default": "'yui3-datatable-inline-input'",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellInlineEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 40,
            "description": "The default action for the `show` event which should make the editor visible.",
            "itemtype": "method",
            "name": "_defShowFn",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellInlineEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 65,
            "description": "Processes the initial container for this View, sets up the HTML content\n and creates a listener for positioning changes",
            "itemtype": "method",
            "name": "_defRenderFn",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellInlineEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 96,
            "description": "Overrides the base _bindUI method to add a its own event listeners",
            "itemtype": "method",
            "name": "_bindUI",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellInlineEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 108,
            "description": "Resizes the view \"container\" to match the dimensions of the TD cell that is\n being edited.",
            "itemtype": "method",
            "name": "_resizeCont",
            "params": [
                {
                    "name": "cont",
                    "description": "The Node instance of the \"container\" of this view",
                    "type": "Node"
                },
                {
                    "name": "td",
                    "description": "The Node instance for the TD to match dimensions of",
                    "type": "Node"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellInlineEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 138,
            "description": "Listener to mouseleave event that will hide the editor if attribute \"hideMouseLeave\" is true",
            "itemtype": "method",
            "name": "_onMouseLeave",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellInlineEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 150,
            "description": "This method can be used to quickly reset the current View editor's position,\n used for scrollable DataTables.\n\nNOTE: Scrollable inline editing is a little \"rough\" right now",
            "itemtype": "method",
            "name": "_afterXYChange",
            "params": [
                {
                    "name": "e",
                    "description": "The xy attribute change event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellInlineEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 176,
            "description": "This flag dictates whether the View container is hidden when the mouse leaves\nthe focus of the inline container.\nTypically we want this behavior, one example where we don't would be an\ninline autocomplete editor.",
            "itemtype": "attribute",
            "name": "hideMouseLeave",
            "type": "Boolean",
            "default": "true",
            "class": "DataTable.BaseCellInlineEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 190,
            "description": "Prescribes a CSS class name to be added to the editor's INPUT node after creation.",
            "itemtype": "attribute",
            "name": "className",
            "type": "String",
            "default": "null",
            "class": "DataTable.BaseCellInlineEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 213,
            "description": "Produces a simple simple inline-type cell editor.\n\n##### Basic Usage:\n\n    // Column definition\n    { key:'surName', editor:\"inline\" }\n\nSince the `defaultEditor` attribute defaults to `\"inline\"`, any cell that\ndoesn't have editing disable will use this editor.",
            "itemtype": "property",
            "name": "inline",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 234,
            "description": "This cell editor is identical to the \"inline\" textual editor but incorporates Numeric validation prior to\nsaving to the DT.\n\n##### Basic Usage:\n\n    // Column definition\n    { key:'unit_price', editor:\"inlineNumber\" }\n\n    // Column definition ... to allow integers only\n    {\n        key:'QuantityInStock',\n        editor:\"inlineNumber\",\n        editorConfig: {\n            keyFiltering: /^\\d*$/\n        }\n    }\n\n(note: keyFiltering requires the `datatable-celleditor-keyfiltering` module to be active)",
            "itemtype": "property",
            "name": "inlineNumber",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 273,
            "description": "A validation regular expression object used to check validity of the input floating point number.\nThis can be defined by the user to accept other numeric input, or set to \"null\" to disable regex checks.",
            "itemtype": "attribute",
            "name": "validator",
            "type": "{RegExp|Function}",
            "default": "/^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 299,
            "description": "This cell editor is identical to the \"inline\" textual editor but incorporates date validation prior to\nsaving to the DT.\n\n##### Basic Usage:\n\n    // Column definition\n    { key:'weddingDate', editor:\"inlineDate\" }\n\n    // Column definition with user-specified 'dateFormat' to display Date in text box on display\n    {\n        key:'date_of_claim',\n        editor:\"inlineDate\",\n        editorConfig:{ dateformat:'%Y-%m-%d'}\n    }",
            "itemtype": "property",
            "name": "inlineDate",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 327,
            "description": "A user-supplied Date format string to be used to display the date in the View's container.\n(Must conform with date format strings from http://yuilibrary.com/yui/docs/api/classes/Date.html#method_format,\ni.e. strftime format)",
            "itemtype": "attribute",
            "name": "dateFormat",
            "type": "String",
            "default": "\"%D\"",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 367,
            "description": "This cell editor has the AutoComplete plugin attached to the input node.\n\n##### Basic Usage:\n\n    // Column definition\n    {\n        key:'degreeProgram',\n        editor:\"inlineAC\",\n        editorConfig:{\n\n            // The following object is passed to \"autocomplete\" plugin when this\n            //   editor is instantiated\n            autocompleteConfig: {\n               source:  [ \"Bachelor of Science\", \"Master of Science\", \"PhD\" ]\n               on: {\n                   select: function (r) {\n                       var val = r.result.display;\n                       this.editor.saveEditor(val);\n                   }\n               }\n            }\n        }\n    }",
            "itemtype": "property",
            "name": "inlineAC",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-inline.js",
            "line": 432,
            "description": "A user-supplied set of configuration parameters to be passed into this View's Y.Plugin.AutoComplete\nconfiguration object.\n\nAt a bare minimum, the user MUST provide the \"source\" of data for the AutoComplete !!\n\nFor this control to save anything, the user needs to define an \"on:select\" listener in the AC's\n\"autocompleteConfig\" in order to saveEditor when the select action occurs.",
            "itemtype": "attribute",
            "name": "autocompleteConfig",
            "type": "Object",
            "default": "{}",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-inline"
        },
        {
            "file": "js/celleditor-keyfiltering.js",
            "line": 20,
            "description": "Provides a input filtering capability to restrict input into the editing area\nchecked via the event-valuechange module.\nThis attribute is set to either a RegEx or a function that confirms if the entry\nwas valid for this editor.\n\nIf a function is provided, the single argument is the current input value and if\nit is valid it should return true.",
            "example": [
                "\n      /^\\d*$/            // for numeric digit-only input\n      /^(\\d|\\-|\\.)*$/      // for floating point numeric input\n      /^(\\d|\\/)*$/         // for Date field entry in MM/DD/YYYY format"
            ],
            "itemtype": "attribute",
            "name": "keyFiltering",
            "type": "RegExp | Function",
            "default": "null",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-keyfiltering"
        },
        {
            "file": "js/celleditor-keyfiltering.js",
            "line": 46,
            "description": "Event handle to changes in the [keyFiltering](#attr_keyFiltering) attribute\nvalue change, to detach when done.",
            "itemtype": "property",
            "name": "_keyFilteringSubscr",
            "type": "EventHandle | null",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-keyfiltering"
        },
        {
            "file": "js/celleditor-keyfiltering.js",
            "line": 56,
            "description": "Internal copy of the function set in the [keyFiltering](#attr_keyFiltering)\nattribute for faster processing.  If  [keyFiltering](#attr_keyFiltering)\nwas a RegExp, it will be converted to a function using that RegExp to check\nthe entry.",
            "itemtype": "method",
            "name": "_keyFilter",
            "params": [
                {
                    "name": "value",
                    "description": "input value to be validated",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if value is valid",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-keyfiltering"
        },
        {
            "file": "js/celleditor-keyfiltering.js",
            "line": 70,
            "description": "Lifecycle method",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-keyfiltering"
        },
        {
            "file": "js/celleditor-keyfiltering.js",
            "line": 80,
            "description": "Processes both changes in the [keyFiltering](#attr_keyFiltering)  attribute\nand the initial rendering of the input element to be monitored for valid\nentries.",
            "itemtype": "method",
            "name": "_processKeyFiltering",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-keyfiltering"
        },
        {
            "file": "js/celleditor-keyfiltering.js",
            "line": 111,
            "description": "Returns a function that uses the regular expression provided to check a value\npassed to that function.  It is used along the [keyFiltering](#attr_keyFiltering)\nattribute to set the [_keyFilter](#method__keyFilter) method for input validation.",
            "itemtype": "method",
            "name": "_regExpFilter",
            "params": [
                {
                    "name": "regExp",
                    "description": "regular expression to use when checking.",
                    "type": "RegExp"
                }
            ],
            "return": {
                "description": "Function that checks a value passed to it against the regular expression.",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-keyfiltering"
        },
        {
            "file": "js/celleditor-keyfiltering.js",
            "line": 129,
            "description": "Handles validation while the value is being entered. It applies the\n[keyFiltering](#attr_keyFiltering) regular expression or function to the input\nand rejects the entry if it doesn't match.\n\nIt will be active if there is an [_inputNode](#property__inputNode) set and\na [keyFiltering](#attr_keyFiltering) set.",
            "itemtype": "method",
            "name": "_onValueChange",
            "params": [
                {
                    "name": "e",
                    "description": "Event facade as provided by the `valuechange` event.",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-keyfiltering"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 19,
            "description": "Defines the HTML content \"template\" for the containing Overlay of this editor,\nthis property is also set by default to the attribute",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "See Code",
            "static": 1,
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 29,
            "description": "Defines the HTML content \"template\" for BUTTON elements that are added to the Overlay\nvia the overlayButtons attribute.",
            "itemtype": "property",
            "name": "btnTemplate",
            "type": "String",
            "default": "See Code",
            "static": 1,
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 39,
            "description": "Placeholder property for the Overlay that is created by this View",
            "itemtype": "property",
            "name": "overlay",
            "type": "Widget",
            "default": "null",
            "static": 1,
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 51,
            "description": "CSS classname to identify the input HTML node within the View container",
            "itemtype": "property",
            "name": "_classInput",
            "type": "String",
            "default": "'yui3-datatable-editor-input'",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 61,
            "description": "CSS classname to identify the individual input collection HTML nodes within\nthe View container",
            "itemtype": "property",
            "name": "_classItem",
            "type": "String",
            "default": "'yui3-datatable-editor-input-item'",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 72,
            "description": "CSS classname for the Overlay content within the View container",
            "itemtype": "property",
            "name": "_classOverlay",
            "type": "String",
            "default": "'yui3-datatable-editor-overlay'",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 82,
            "description": "CSS classname used for Overlay BUTTON elements within the View container",
            "itemtype": "property",
            "name": "_classOverlayBtn",
            "type": "String",
            "default": "'yui3-datatable-editor-overlay-button'",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 97,
            "description": "Creates this View's container, including instantiating the Overlay widget within\nthe container, incorporating user-supplied overlay configs, creating buttons and\ncreating the internal HTML content within the Overlay (using a Template-based\nmethod)",
            "itemtype": "method",
            "name": "_defRenderFn",
            "return": {
                "description": "Overlay instance for this View",
                "type": "Y.Overlay"
            },
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 143,
            "description": "Detaches the listeners that were set on this view, any widgets that were created\nand on the View's Overlay instance.",
            "itemtype": "method",
            "name": "_unbindUI",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 168,
            "description": "The default action for the `show` event which should make the editor visible.",
            "itemtype": "method",
            "name": "_defShowFn",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 213,
            "description": "Method that creates the Editor's Overlay instance and populates the base content.",
            "itemtype": "method",
            "name": "_createOverlay",
            "return": {
                "description": "",
                "type": "Y.Overlay"
            },
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 256,
            "description": "Method creates a footer section within the Overlay and adds the buttons entered\nas the \"buttons\" config property of \"overlayConfig\".",
            "itemtype": "method",
            "name": "_createOverlayButtons",
            "params": [
                {
                    "name": "overlay",
                    "description": "",
                    "type": "Widget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 294,
            "description": "Method used to process the [templateObject](#attr_templateObject) attribute and generate the\nOverlay's `bodyContent`.  This method uses the `Y.Template` module to prepare the HTML, which\nis passed in via [templateObject](#attr_templateObject)'s `html` property.\n\nThis method uses the `Y.Template.Micro` module by default to process the template.  Implementers\ncan pass in any different Y.Template supported-template engine via the [templateEngine](#attr_templateEngine)\nattribute (i.e. `templateEngine: Y.Handlebars`) but will have to modify the `html` property of templateObject\nappropriately for that engine.\n\nImplementers can pass in \"options\" and other properties to the [templateObject](#attr_templateObject) ATTR and\nthis function will normalize the `this.options` to an Object with keys {value,text,title,raw} which can be\nused more directly within HTML construction.\n\nThe templateObject ATTR `options` property can be either an Array or an Object, this function converts and\nnormalizes the content to an output Array as `this.options` within the template definitions.",
            "itemtype": "method",
            "name": "_createTemplateContent",
            "params": [
                {
                    "name": "overlay",
                    "description": "Overlay instance for this View",
                    "type": "Widget"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 398,
            "description": "This method can be used to quickly reset the current View editor's position,\n used for scrollable DataTables.",
            "itemtype": "method",
            "name": "_afterXYChange",
            "params": [
                {
                    "name": "e",
                    "description": "The xy attribute change event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 412,
            "description": "Listener to mouseleave event that closes the active editor",
            "itemtype": "method",
            "name": "_mouseLeave",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 422,
            "description": "Helper method to clear DOM \"selected\" text or ranges\nNOTE: could probably do this with CSS `user-select: none;`, but anyway ...",
            "itemtype": "method",
            "name": "_clearDOMSelection",
            "access": "private",
            "tagname": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 444,
            "description": "Name for this View, this is useful because the `name` attribute is prefixed to the\n 'Options' string for some Views (i.e. a cell editor named 'myRadio' will have a defined\n set of options available of 'myRadioOptions'",
            "itemtype": "attribute",
            "name": "name",
            "type": "String",
            "default": "null",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 458,
            "description": "Defines the Overlay's HTML template for the overall View (not recommended to change this!!)\nNOTE: This the Overlay structure template **and not** the bodyContent template for the Overlay,\nit is not recommended you change this attr.\n\nPlease see the [templateObject](#attr_templateObject) attribute to define the HTML for your View!",
            "itemtype": "attribute",
            "name": "template",
            "type": "String",
            "access": "private",
            "tagname": "",
            "default": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 475,
            "description": "Additional config parameters for the Overlay to be used in constructing the Editor.\nThese configs are merged with the defaults required by the Editor.",
            "itemtype": "attribute",
            "name": "overlayConfig",
            "type": "Object",
            "default": "{}",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 489,
            "description": "Specifies a width attribute style to set the `_classInput` Node element to upon rendering.",
            "itemtype": "attribute",
            "name": "inputWidth",
            "type": "String|Number",
            "default": "null",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 499,
            "description": "Defines the `width` parameter to set the Overlay widget to upon rendering, can also be overridden\nby setting `overlayConfig.width`.",
            "itemtype": "attribute",
            "name": "overlayWidth",
            "type": "String|Number",
            "default": "null",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 510,
            "description": "A flag to indicate if cell-to-cell navigation should be implemented (currently setup for CTRL-arrow\nkey, TAB and Shift-TAB) capability",
            "itemtype": "attribute",
            "name": "inputKeys",
            "type": "Boolean",
            "default": "true",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 522,
            "description": "Defines the type of template engine that will be used to parse Templates, (via Y.Template).\nTypically this would be set to `Y.Template.Micro` or `Y.Handlebars`\n\nNOTE: If you use Y.Handlebars (or any other YUI template engine) you MUST include it in your YUI.use\nloader statement (\"template\" is included in this module's `requires` by default)",
            "itemtype": "attribute",
            "name": "templateEngine",
            "type": "Object",
            "default": "Y.Template.Micro",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 537,
            "description": "This attribute is used to define the HTML content that will be created / generated and inserted within\nthis View's Y.Overlay.   The attribute definitions include an object with the following recognizable\nproperties: `html, xxxOptions, propValue, propText, propTitle`\n\nNote that xxxOptions matches the `name` attribute (i.e. the editor \"name\" you include on your column\ndefinitions), where xxx is replaced with the name.  For \"radio\" it is `radioOptions`, for \"select\" it is\n`selectOptions`, \"checkbox\" it is `checkboxOptions`, etc...\n\nThe method [_createTemplateContent](#method__createTemplateContent) uses this attribute and processes the\ntemplate using the `html` and other properties to generate the HTML.  It then inserts the compiled HTML into\nthe Overlay's `bodyContent`.",
            "example": [
                "\n\n     templateObject: {\n         // set the template definition\n         html: '<select class=\"myselect\">'\n            +  '<% Y.Array.each( data.options, function(r){ %>'\n            +  '<option value=\"<%= r.value %>\" <% (r.title) ? \\'title=\"r.title\"\\' :  %>>'\n            +  '<%= r.text %></option>'\n            +  '<% },this); %>'\n            +  '</select>'\n         options: states   // [ {value:'AZ', text:'Arizona}, {value:'DE', text:'Delaware' } ]\n     }"
            ],
            "itemtype": "attribute",
            "name": "templateObject",
            "type": "Object",
            "default": "null",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 571,
            "description": "A cell reference object populated by the calling DataTable, contains the following key properties:\n  `{td,value,recClientId,colKey}`",
            "itemtype": "attribute",
            "name": "cell",
            "type": "Object",
            "default": "{}",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 583,
            "description": "Value that was saved in the Editor View and returned to the record",
            "itemtype": "attribute",
            "name": "value",
            "type": "{String|Number|Date}",
            "default": "null",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 594,
            "description": "Value that was contained in the cell when the Editor View was initiated",
            "itemtype": "attribute",
            "name": "lastValue",
            "type": "{String|Number|Date}",
            "default": "null",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 606,
            "description": "Setting for checking the visibility status of this Editor",
            "itemtype": "attribute",
            "name": "visible",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 619,
            "description": "Setting to check if the editor is \"still open\" but just hidden, created in order to support\nscrolling datatables when an editor scrolls out of open window.",
            "itemtype": "attribute",
            "name": "hidden",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 634,
            "description": "Sets an offset of the XY coordinates that will be used for positioning the Overlay upon\ndisplaying the editor View",
            "itemtype": "attribute",
            "name": "offsetXY",
            "type": "Array",
            "default": "[0,0]",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 646,
            "description": "XY coordinate position of the View container Overlay for this editor",
            "itemtype": "attribute",
            "name": "xy",
            "type": "Array",
            "default": "null",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 657,
            "description": "A flag to signify whether the editor View should be \"saved\" upon detecting the RTN keystroke\nwithin the INPUT area.\n\nFor example, textarea typically will not, to allow a newline to be added.",
            "itemtype": "attribute",
            "name": "saveOnEnterKey",
            "type": "boolean",
            "default": "true",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 672,
            "description": "Provides a keystroke filtering capability to restrict input into the editing area checked during the\n\"keypress\" event.  This attribute is set to either a RegEx or a function that confirms if the keystroke\nwas valid for this editor.  (TRUE meaning valid, FALSE meaning invalid)\n\nIf a function is provided, the single argument is the keystroke event facade `e` and if\nthe keystroke is valid it should return true, otherwise if invalid false;",
            "example": [
                "\n     /^\\d*$/            // for numeric digit-only input\n     /^(\\d|\\-|\\.)*$/      // for floating point numeric input\n     /^(\\d|\\/)*$/         // for Date field entry in MM/DD/YYYY format"
            ],
            "itemtype": "attribute",
            "name": "keyFiltering",
            "type": "{RegExp|Function}",
            "default": "null",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 693,
            "description": "Provides the capability to validate the final saved value after editing is finished.\nThis attribute can be set to either a RegEx or a function, that operates on the entire\n\"value\" setting of the editor input (whereas [keyFiltering](#attr_keyFilter) performs\nvalidation checks on each key input).\n\nIf a function is provided, the single argument is the value setting of the editor.\nthe keystroke is valid it should return true, otherwise if invalid false;",
            "example": [
                "\n     /^\\d$/            // for numeric digit-only input\n     /^\\d|\\-|\\.|\\+$/   // for floating point numeric input\n     /^\\d|\\/$/         // for Date field entry in MM/DD/YYYY format"
            ],
            "itemtype": "attribute",
            "name": "validator",
            "type": "{RegExp|Function}",
            "default": "null",
            "class": "DataTable.BaseCellPopupEditor",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 724,
            "description": "Produces a basic textbox type popup cell editor.\n\n##### Basic Usage\n\n    // Column definition\n    { key:'firstName', editor:\"text\"}\n\n    // Column definition ... disabling inputKeys navigation and setting offsetXY\n    { key:'firstName',\n      editor:\"text\", editorConfig:{ inputKeys:false, offsetXY: [5,7] }\n    }",
            "itemtype": "property",
            "name": "text",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 761,
            "description": "Produces a \"textarea\"  popup  cell editor.\n\n ##### Basic Usage:\n\n    // Column definition\n    { key:'experience', editor:\"textarea\"}\n\n    // Column definition ... disabling inputKeys navigation and setting offsetXY\n    {\n        key:'firstName',\n        editor:\"JobDescription\",\n        editorConfig:{\n             // disables the buttons below the TEXTAREA\n             overlayConfig:{ buttons: null }\n        }\n    }",
            "itemtype": "property",
            "name": "textarea",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 825,
            "description": "Produces  a basic numeric editor as a popup-type cell editor.\n A `parser` is prescribed that handles validation and converting the input text to numeric format.\n\n ##### Basic Usage\n    // Column definition\n    { key:'salary', editor:\"number\" }\n\n    // Column definition ... disabling keyfiltering and setting a CSS class\n    {\n        key:'firstName',\n        editor:\"text\",\n        editorConfig:{ className:'align-right', keyFiltering:null }\n    }",
            "itemtype": "property",
            "name": "number",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 857,
            "description": "A validation regular expression object used to check validity of the input floating point number.\nThis can be defined by the user to accept other numeric input, or set to \"null\" to disable regex checks.",
            "itemtype": "attribute",
            "name": "validator",
            "type": "RegExp",
            "default": "/^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 898,
            "description": "Produces a bare-bones date editor as a popup-type cell editor.\nConfiguration is setup with both `formatter` and `parser` to convert the Date object.\n\n##### Basic Usage\n\n   // Column definition\n   { key:'firstName', editor:\"date\"}\n\n   // Column definition ... with user-defined dateFormat and disabling keyfiltering\n   {\n       key:'firstName',\n       editor:\"text\",\n       editorConfig:{ dateFormat: '%Y-%m-%d', keyFiltering:null }\n   }",
            "itemtype": "property",
            "name": "date",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 949,
            "description": "Produces a \"calendar\" popup cell editor that\nincludes a Y.Calendar widget incorporated within the View container.\n\n##### Basic Usage\n\n   // Column definition\n   { key:'startDate', editor:\"calendar\" }\n\n   // Column definition ...\n   {\n       key:'birthdate',\n       label:'Employee DOB',\n       formatter:\"shortDate\",\n       editor:\"calendar\",\n       editorConfig:{\n           inputKeys:false,\n       }\n   }",
            "itemtype": "property",
            "name": "calendar",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 1153,
            "description": "Produces a textbox-type popup cell editor that has an Autocomplete\n plugin attached to the INPUT[text] node.\n\n ##### Basic Usage\n\n    // Column definition\n    {\n        key:'state',\n        editor:\"autocomplete\",\n        editorConfig:{\n            autocompleteConfig:{\n                source:  myStateArray,\n                alwaysShowList: true\n            }\n        }\n    }",
            "itemtype": "property",
            "name": "autocomplete",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 1214,
            "description": "Produces a group of INPUT[type=radio] controls within the view's Overlay\n\n ##### Basic Usage\n\n    // Column definition via Array options\n    {\n        key:\"size\",\n        editor:\"radio\",\n        editorConfig:{\n            radioOptions:[ {value:0, text:\"S\"}, {value:1, text:\"M\"}, {value:2, text:\"L\"} ]\n        }\n    }\n    // Column definition via Object type options\n    {\n        key:\"size\",\n        editor:\"radio\",\n        editorConfig:{\n            radioOptions:{ S:\"Small\", M:\"Medium\", L:\"Large\" }\n        }\n    }",
            "itemtype": "property",
            "name": "radio",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 1319,
            "description": "Produces a popup cell editor containing a single SELECT control within\nthe Overlay.\n\n##### Basic Usage\n// Column definition ... simple Array data\n{\n   key:\"inTheForest\",\n   editor:\"dropdown\",\n   editorConfig: { dropdownOptions:[ \"lions\", \"tigers\", \"bears\", \"oh my!\" ] }\n}\n\n// Column definition ... options via Object type data\n{\n   key:\"color\",\n   formatter:\"custom\",\n   formatConfig:stypesObj,\n   editor:\"select\",\n   editorConfig:{\n       selectOptions:{ 0:'Red', 1:'Green', 2:'Fuschia', 3:'Blue' }\n   }\n}\n\n// Column definition ... options via Array of Objects, non-trivial!\n{\n   key:\"firstTopping\",\n   editor:\"dropdown\",\n   editorConfig:{\n       dropdownOptions:[\n          {controlUnit:'a7',  descr:'Pepperoni'},    {controlUnit:'f3', descr:'Anchovies'},\n          {controlUnit:'b114',descr:'Extra Cheese'}, {controlUnit:'7', descr:'Mushrooms'}\n       ],\n       templateObject:{ propValue:'controlUnit', propText:'descr' }\n   }\n}",
            "itemtype": "property",
            "name": "dropdown",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/celleditor-popup.js",
            "line": 1442,
            "description": "Produces a simple checkbox (i.e. on/off, yes/no, true/false) popup cell editor\n within the popup Overlay.\n\n ##### Basic Usage\n    // Column definition\n    {\n        key:'arrived',\n        editor:\"checkbox\",\n        editorConfig:{ checkboxHash:{ 'true':'Y', 'false':'N' } }\n    }",
            "itemtype": "property",
            "name": "checkbox",
            "type": "DataTable.BaseCellEditor",
            "since": "3.8.0",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editors",
            "module": "datatable",
            "submodule": "datatable-celleditor-popup"
        },
        {
            "file": "js/colwidths.js",
            "line": 118,
            "description": "The HTML template used to create the table's `<col>`s.",
            "itemtype": "property",
            "name": "COL_TEMPLATE",
            "type": "{HTML}",
            "default": "'<col/>'",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-column-widths"
        },
        {
            "file": "js/colwidths.js",
            "line": 128,
            "description": "The HTML template used to create the table's `<colgroup>`.",
            "itemtype": "property",
            "name": "COLGROUP_TEMPLATE",
            "type": "{HTML}",
            "default": "'<colgroup/>'",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-column-widths"
        },
        {
            "file": "js/colwidths.js",
            "line": 138,
            "description": "Assigns the style width of the `<col>` representing the column identifed by\n`id` and updates the column configuration.\n\nPass the empty string for `width` to return a column to auto sizing.\n\nThis does not trigger a `columnsChange` event today, but I can be convinced\nthat it should.",
            "itemtype": "method",
            "name": "setColumnWidth",
            "params": [
                {
                    "name": "id",
                    "description": "The column config object or key, name, or\n        index of a column in the host's `_displayColumns` array.",
                    "type": "Number|String|Object"
                },
                {
                    "name": "width",
                    "description": "CSS width value. Numbers are treated as pixels",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-column-widths"
        },
        {
            "file": "js/colwidths.js",
            "line": 175,
            "description": "Renders the table's `<colgroup>` and populates the `_colgroupNode` property.",
            "itemtype": "method",
            "name": "_createColumnGroup",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-column-widths"
        },
        {
            "file": "js/colwidths.js",
            "line": 186,
            "description": "Hooks up to the rendering lifecycle to also render the `<colgroup>` and\nsubscribe to `columnChange` events.",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-column-widths"
        },
        {
            "file": "js/colwidths.js",
            "line": 198,
            "description": "Sets a columns's `<col>` element width style. This is needed to get around\nbrowser rendering differences.\n\nThe colIndex corresponds to the item index of the `<col>` in the table's\n`<colgroup>`.\n\nTo unset the width, pass a falsy value for the `width`.",
            "itemtype": "method",
            "name": "_setColumnWidth",
            "params": [
                {
                    "name": "colIndex",
                    "description": "The display column index",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The desired width",
                    "type": "Number|String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-column-widths"
        },
        {
            "file": "js/colwidths.js",
            "line": 254,
            "description": "Populates the table's `<colgroup>` with a `<col>` per item in the `columns`\nattribute without children.  It is assumed that these are the columns that\nhave data cells renderered for them.",
            "itemtype": "method",
            "name": "_uiSetColumnWidths",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-column-widths"
        },
        {
            "file": "js/core.js",
            "line": 39,
            "description": "Columns to include in the rendered table.\n\nIf omitted, the attributes on the configured `recordType` or the first item\nin the `data` collection will be used as a source.\n\nThis attribute takes an array of strings or objects (mixing the two is\nfine).  Each string or object is considered a column to be rendered.\nStrings are converted to objects, so `columns: ['first', 'last']` becomes\n`columns: [{ key: 'first' }, { key: 'last' }]`.\n\nDataTable.Core only concerns itself with a few properties of columns.\nThese properties are:\n\n* `key` - Used to identify the record field/attribute containing content for\n  this column.  Also used to create a default Model if no `recordType` or\n  `data` are provided during construction.  If `name` is not specified, this\n  is assigned to the `_id` property (with added incrementer if the key is\n  used by multiple columns).\n* `children` - Traversed to initialize nested column objects\n* `name` - Used in place of, or in addition to, the `key`.  Useful for\n  columns that aren't bound to a field/attribute in the record data.  This\n  is assigned to the `_id` property.\n* `id` - For backward compatibility.  Implementers can specify the id of\n  the header cell.  This should be avoided, if possible, to avoid the\n  potential for creating DOM elements with duplicate IDs.\n* `field` - For backward compatibility.  Implementers should use `name`.\n* `_id` - Assigned unique-within-this-instance id for a column.  By order\n  of preference, assumes the value of `name`, `key`, `id`, or `_yuid`.\n  This is used by the rendering views as well as feature module\n  as a means to identify a specific column without ambiguity (such as\n  multiple columns using the same `key`.\n* `_yuid` - Guid stamp assigned to the column object.\n* `_parent` - Assigned to all child columns, referencing their parent\n  column.",
            "itemtype": "attribute",
            "name": "columns",
            "type": "{Object[]|String[]}",
            "default": "(from `recordType` ATTRS or first item in the `data`)",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 87,
            "description": "Model subclass to use as the `model` for the ModelList stored in the `data`\nattribute.\n\nIf not provided, it will try really hard to figure out what to use.  The\nfollowing attempts will be made to set a default value:\n\n1. If the `data` attribute is set with a ModelList instance and its `model`\n   property is set, that will be used.\n2. If the `data` attribute is set with a ModelList instance, and its\n   `model` property is unset, but it is populated, the `ATTRS` of the\n   `constructor of the first item will be used.\n3. If the `data` attribute is set with a non-empty array, a Model subclass\n   will be generated using the keys of the first item as its `ATTRS` (see\n   the `_createRecordClass` method).\n4. If the `columns` attribute is set, a Model subclass will be generated\n   using the columns defined with a `key`. This is least desirable because\n   columns can be duplicated or nested in a way that's not parsable.\n5. If neither `data` nor `columns` is set or populated, a change event\n   subscriber will listen for the first to be changed and try all over\n   again.",
            "itemtype": "attribute",
            "name": "recordType",
            "type": "{Function}",
            "default": "(see description)",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 119,
            "description": "The collection of data records to display.  This attribute is a pass\nthrough to a `data` property, which is a ModelList instance.\n\nIf this attribute is passed a ModelList or subclass, it will be assigned to\nthe property directly.  If an array of objects is passed, a new ModelList\nwill be created using the configured `recordType` as its `model` property\nand seeded with the array.\n\nRetrieving this attribute will return the ModelList stored in the `data`\nproperty.",
            "itemtype": "attribute",
            "name": "data",
            "type": "{ModelList|Object[]}",
            "default": "`new ModelList()`",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 142,
            "description": "Content for the `<table summary=\"ATTRIBUTE VALUE HERE\">`.  Values assigned\nto this attribute will be HTML escaped for security.",
            "itemtype": "attribute",
            "name": "summary",
            "type": "{String}",
            "default": "'' (empty string)",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 153,
            "description": "HTML content of an optional `<caption>` element to appear above the table.\nLeave this config unset or set to a falsy value to remove the caption.",
            "itemtype": "attribute",
            "name": "caption",
            "type": "HTML",
            "default": "'' (empty string)",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 164,
            "description": "Deprecated as of 3.5.0. Passes through to the `data` attribute.\n\nWARNING: `get('recordset')` will NOT return a Recordset instance as of\n3.5.0.  This is a break in backward compatibility.",
            "itemtype": "attribute",
            "name": "recordset",
            "type": "{Object[]|Recordset}",
            "deprecated": true,
            "deprecationMessage": "Use the `data` attribute",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 181,
            "description": "Deprecated as of 3.5.0. Passes through to the `columns` attribute.\n\nWARNING: `get('columnset')` will NOT return a Columnset instance as of\n3.5.0.  This is a break in backward compatibility.",
            "itemtype": "attribute",
            "name": "columnset",
            "type": "{Object[]}",
            "deprecated": true,
            "deprecationMessage": "Use the `columns` attribute",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 201,
            "description": "The ModelList that manages the table's data.",
            "itemtype": "property",
            "name": "data",
            "type": "{ModelList}",
            "default": "undefined (initially unset)",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 213,
            "description": "Gets the column configuration object for the given key, name, or index.  For\nnested columns, `name` can be an array of indexes, each identifying the index\nof that column in the respective parent's \"children\" array.\n\nIf you pass a column object, it will be returned.\n\nFor columns with keys, you can also fetch the column with\n`instance.get('columns.foo')`.",
            "itemtype": "method",
            "name": "getColumn",
            "params": [
                {
                    "name": "name",
                    "description": "Key, \"name\", index, or index array to\n            identify the column",
                    "type": "String|Number|Number[]"
                }
            ],
            "return": {
                "description": "the column configuration object",
                "type": "Object"
            },
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 262,
            "description": "Returns the Model associated to the record `id`, `clientId`, or index (not\nrow index).  If none of those yield a Model from the `data` ModelList, the\narguments will be passed to the `view` instance's `getRecord` method\nif it has one.\n\nIf no Model can be found, `null` is returned.",
            "itemtype": "method",
            "name": "getRecord",
            "params": [
                {
                    "name": "seed",
                    "description": "Record `id`, `clientId`, index, Node, or\n    identifier for a row or child element",
                    "type": "Number|String|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Model"
            },
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 295,
            "description": "This tells `Y.Base` that it should create ad-hoc attributes for config\nproperties passed to DataTable's constructor. This is useful for setting\nconfigurations on the DataTable that are intended for the rendering View(s).",
            "itemtype": "property",
            "name": "_allowAdHocAttrs",
            "type": "Boolean",
            "default": "true",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 308,
            "description": "A map of column key to column configuration objects parsed from the\n`columns` attribute.",
            "itemtype": "property",
            "name": "_columnMap",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 320,
            "description": "The Node instance of the table containing the data rows.  This is set when\nthe table is rendered.  It may also be set by progressive enhancement,\nthough this extension does not provide the logic to parse from source.",
            "itemtype": "property",
            "name": "_tableNode",
            "type": "{Node}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 333,
            "description": "Updates the `_columnMap` property in response to changes in the `columns`\nattribute.",
            "itemtype": "method",
            "name": "_afterColumnsChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `columnsChange` event object",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 346,
            "description": "Updates the `modelList` attributes of the rendered views in response to the\n`data` attribute being assigned a new ModelList.",
            "itemtype": "method",
            "name": "_afterDataChange",
            "params": [
                {
                    "name": "e",
                    "description": "the `dataChange` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 367,
            "description": "Assigns to the new recordType as the model for the data ModelList",
            "itemtype": "method",
            "name": "_afterRecordTypeChange",
            "params": [
                {
                    "name": "e",
                    "description": "recordTypeChange event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 391,
            "description": "Creates a Model subclass from an array of attribute names or an object of\nattribute definitions.  This is used to generate a class suitable to\nrepresent the data passed to the `data` attribute if no `recordType` is\nset.",
            "itemtype": "method",
            "name": "_createRecordClass",
            "params": [
                {
                    "name": "attrs",
                    "description": "Names assigned to the Model subclass's\n            `ATTRS` or its entire `ATTRS` definition object",
                    "type": "String[]|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Model"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 420,
            "description": "Tears down the instance.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 431,
            "description": "The getter for the `columns` attribute.  Returns the array of column\nconfiguration objects if `instance.get('columns')` is called, or the\nspecific column object if `instance.get('columns.columnKey')` is called.",
            "itemtype": "method",
            "name": "_getColumns",
            "params": [
                {
                    "name": "columns",
                    "description": "The full array of column objects",
                    "type": "Object[]"
                },
                {
                    "name": "name",
                    "description": "The attribute name requested\n                     (e.g. 'columns' or 'columns.foo');",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 450,
            "description": "Relays the `get()` request for the deprecated `columnset` attribute to the\n`columns` attribute.\n\nTHIS BREAKS BACKWARD COMPATIBILITY.  3.4.1 and prior implementations will\nexpect a Columnset instance returned from `get('columnset')`.",
            "itemtype": "method",
            "name": "_getColumnset",
            "params": [
                {
                    "name": "ignored",
                    "description": "The current value stored in the `columnset` state",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The attribute name requested\n                     (e.g. 'columnset' or 'columnset.foo');",
                    "type": "String"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "This will be removed with the `columnset` attribute in a future\n            version.",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 470,
            "description": "Returns the Model class of the instance's `data` attribute ModelList.  If\nnot set, returns the explicitly configured value.",
            "itemtype": "method",
            "name": "_getRecordType",
            "params": [
                {
                    "name": "val",
                    "description": "The currently configured value",
                    "type": "Model"
                }
            ],
            "return": {
                "description": "",
                "type": "Model"
            },
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 488,
            "description": "Initializes the `_columnMap` property from the configured `columns`\nattribute.  If `columns` is not set, but there are records in the `data`\nModelList, use\n`ATTRS` of that class.",
            "itemtype": "method",
            "name": "_initColumns",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 517,
            "description": "Sets up the change event subscriptions to maintain internal state.",
            "itemtype": "method",
            "name": "_initCoreEvents",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 532,
            "description": "Defaults the `data` attribute to an empty ModelList if not set during\nconstruction.  Uses the configured `recordType` for the ModelList's `model`\nproeprty if set.",
            "itemtype": "method",
            "name": "_initData",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "",
                "type": "ModelList"
            },
            "since": "3.6.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 554,
            "description": "Initializes the instance's `data` property from the value of the `data`\nattribute.  If the attribute value is a ModelList, it is assigned directly\nto `this.data`.  If it is an array, a ModelList is created, its `model`\nproperty is set to the configured `recordType` class, and it is seeded with\nthe array data.  This ModelList is then assigned to `this.data`.",
            "itemtype": "method",
            "name": "_initDataProperty",
            "params": [
                {
                    "name": "data",
                    "description": "Collection of data to populate the\n        DataTable",
                    "type": "Array|ModelList|ArrayList"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 597,
            "description": "Initializes the columns, `recordType` and data ModelList.",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration object passed to constructor",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 640,
            "description": "Iterates the array of column configurations to capture all columns with a\n`key` property.  An map is built with column keys as the property name and\nthe corresponding column object as the associated value.  This map is then\nassigned to the instance's `_columnMap` property.",
            "itemtype": "method",
            "name": "_setColumnMap",
            "params": [
                {
                    "name": "columns",
                    "description": "The array of column config objects",
                    "type": "Object[]|String[]"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 684,
            "description": "Translates string columns into objects with that string as the value of its\n`key` property.\n\nAll columns are assigned a `_yuid` stamp and `_id` property corresponding\nto the column's configured `name` or `key` property with any spaces\nreplaced with dashes.  If the same `name` or `key` appears in multiple\ncolumns, subsequent appearances will have their `_id` appended with an\nincrementing number (e.g. if column \"foo\" is included in the `columns`\nattribute twice, the first will get `_id` of \"foo\", and the second an `_id`\nof \"foo1\").  Columns that are children of other columns will have the\n`_parent` property added, assigned the column object to which they belong.",
            "itemtype": "method",
            "name": "_setColumns",
            "params": [
                {
                    "name": "val",
                    "description": "Array of config objects or strings",
                    "type": "Null|Object[]|String[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Null|Object[]"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 792,
            "description": "Relays attribute assignments of the deprecated `columnset` attribute to the\n`columns` attribute.  If a Columnset is object is passed, its basic object\nstructure is mined.",
            "itemtype": "method",
            "name": "_setColumnset",
            "params": [
                {
                    "name": "val",
                    "description": "The columnset value to relay",
                    "type": "Array|Columnset"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "This will be removed with the deprecated `columnset` attribute\n            in a later version.",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 810,
            "description": "Accepts an object with `each` and `getAttrs` (preferably a ModelList or\nsubclass) or an array of data objects.  If an array is passes, it will\ncreate a ModelList to wrap the data.  In doing so, it will set the created\nModelList's `model` property to the class in the `recordType` attribute,\nwhich will be defaulted if not yet set.\n\nIf the `data` property is already set with a ModelList, passing an array as\nthe value will call the ModelList's `reset()` method with that array rather\nthan replacing the stored ModelList wholesale.\n\nAny non-ModelList-ish and non-array value is invalid.",
            "itemtype": "method",
            "name": "_setData",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 853,
            "description": "Relays the value assigned to the deprecated `recordset` attribute to the\n`data` attribute.  If a Recordset instance is passed, the raw object data\nwill be culled from it.",
            "itemtype": "method",
            "name": "_setRecordset",
            "params": [
                {
                    "name": "val",
                    "description": "The recordset value to relay",
                    "type": "Object[]|Recordset"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "This will be removed with the deprecated `recordset` attribute\n            in a later version.",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/core.js",
            "line": 881,
            "description": "Accepts a Base subclass (preferably a Model subclass). Alternately, it will\ngenerate a custom Model subclass from an array of attribute names or an\nobject defining attributes and their respective configurations (it is\nassigned as the `ATTRS` of the new class).\n\nAny other value is invalid.",
            "itemtype": "method",
            "name": "_setRecordType",
            "params": [
                {
                    "name": "val",
                    "description": "The Model subclass, array of\n        attribute names, or the `ATTRS` definition for a custom model\n        subclass",
                    "type": "Function|String[]|Object"
                }
            ],
            "return": {
                "description": "A Base/Model subclass",
                "type": "Function"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-core"
        },
        {
            "file": "js/datatable-datasource.js",
            "line": 23,
            "description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.",
            "itemtype": "property",
            "name": "NS",
            "type": "String",
            "static": 1,
            "final": 1,
            "value": "\"datasource\"",
            "class": "Plugin.DataTableDataSource",
            "module": "datatable",
            "submodule": "datatable-datasource"
        },
        {
            "file": "js/datatable-datasource.js",
            "line": 35,
            "description": "Class name.",
            "itemtype": "property",
            "name": "NAME",
            "type": "String",
            "static": 1,
            "final": 1,
            "value": "\"dataTableDataSource\"",
            "class": "Plugin.DataTableDataSource",
            "module": "datatable",
            "submodule": "datatable-datasource"
        },
        {
            "file": "js/datatable-datasource.js",
            "line": 52,
            "itemtype": "attribute",
            "name": "datasource",
            "description": "Pointer to DataSource instance.",
            "type": "{DataSource}",
            "class": "Plugin.DataTableDataSource",
            "module": "datatable",
            "submodule": "datatable-datasource"
        },
        {
            "file": "js/datatable-datasource.js",
            "line": 61,
            "itemtype": "attribute",
            "name": "initialRequest",
            "description": "Request sent to DataSource immediately upon initialization.",
            "type": "Object",
            "class": "Plugin.DataTableDataSource",
            "module": "datatable",
            "submodule": "datatable-datasource"
        },
        {
            "file": "js/datatable-datasource.js",
            "line": 83,
            "itemtype": "method",
            "name": "_setDataSource",
            "description": "Creates new DataSource instance if one is not provided.",
            "params": [
                {
                    "name": "ds",
                    "description": "",
                    "type": "Object | Y.DataSource"
                }
            ],
            "return": {
                "description": "",
                "type": "DataSource"
            },
            "access": "private",
            "tagname": "",
            "class": "Plugin.DataTableDataSource",
            "module": "datatable",
            "submodule": "datatable-datasource"
        },
        {
            "file": "js/datatable-datasource.js",
            "line": 94,
            "itemtype": "method",
            "name": "_setInitialRequest",
            "description": "Sends request to DataSource.",
            "params": [
                {
                    "name": "request",
                    "description": "DataSource request.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Plugin.DataTableDataSource",
            "module": "datatable",
            "submodule": "datatable-datasource"
        },
        {
            "file": "js/datatable-datasource.js",
            "line": 108,
            "description": "Initializer.",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "Config object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Plugin.DataTableDataSource",
            "module": "datatable",
            "submodule": "datatable-datasource"
        },
        {
            "file": "js/datatable-datasource.js",
            "line": 127,
            "description": "Load data by calling DataSource's sendRequest() method under the hood.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "config",
                    "description": "Optional configuration parameters:\n\n<dl>\n<dt>request</dt><dd>Pass in a new request, or initialRequest is used.</dd>\n<dt>callback</dt><dd>Pass in DataSource callback object, or the following default is used:\n   <dl>\n     <dt>success</dt><dd>datatable.onDataReturnInitializeTable</dd>\n     <dt>failure</dt><dd>datatable.onDataReturnInitializeTable</dd>\n     <dt>scope</dt><dd>datatable</dd>\n     <dt>argument</dt><dd>datatable.getState()</dd>\n   </dl>\n</dd>\n<dt>datasource</dt><dd>Pass in a new DataSource instance to override the current DataSource for this transaction.</dd>\n</dl>",
                    "type": "Object"
                }
            ],
            "class": "Plugin.DataTableDataSource",
            "module": "datatable",
            "submodule": "datatable-datasource"
        },
        {
            "file": "js/datatable-datasource.js",
            "line": 161,
            "description": "Callback function passed to DataSource's sendRequest() method populates\nan entire DataTable with new data, clearing previous data, if any.",
            "itemtype": "method",
            "name": "onDataReturnInitializeTable",
            "params": [
                {
                    "name": "e",
                    "description": "DataSource Event Facade object.",
                    "type": "Event.Facade"
                }
            ],
            "class": "Plugin.DataTableDataSource",
            "module": "datatable",
            "submodule": "datatable-datasource"
        },
        {
            "file": "js/editable.js",
            "line": 41,
            "description": "A boolean flag that sets the DataTable state to allow editing (either inline or popup cell editing).\n(May support row editing in future also)",
            "itemtype": "attribute",
            "name": "editable",
            "type": "boolean",
            "default": "false",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 54,
            "description": "Defines the event type on the TD that opens the cell editor, usually\n'click' or 'dblclick'",
            "itemtype": "attribute",
            "name": "editorOpenAction",
            "type": "{String|null}",
            "default": "'dblclick'",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 69,
            "description": "Specifies a default editor name to respond to an editing event defined in\n[_editorOpenAction](#attr_editorOpenAction) attribute.\nThe default editor is used if the DataTable is in editing mode (i.e. \"editable:true\") and if\nthe column DOES NOT include a property `editable:false` in its definitions.\n\nCell editors are typically assigned by setting a column property\n(i.e. `editor:\"text\"` or `editor:\"date\"`) on each individual column.\n\nThis attribute can be used to set a single editor to work on every column without having to define it on each\ncolumn.",
            "itemtype": "attribute",
            "name": "defaultEditor",
            "type": "{String|Null}",
            "default": "null",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 92,
            "description": "Determines whether keyboard navigation beyond an edge of the table wraps\naround to the opposite edge.",
            "itemtype": "attribute",
            "name": "wrapAroundNavigation",
            "type": "Boolean",
            "default": "true",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 108,
            "description": "Holds a reference to the active cell editor.",
            "itemtype": "property",
            "name": "_openEditor",
            "type": "DataTable.BaseCellEditor",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 117,
            "description": "Holds the current record (i.e. a Model class) of the TD being edited",
            "itemtype": "property",
            "name": "_editorRecord",
            "type": "Model",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 126,
            "description": "Holds the column key (or name) of the cell being edited",
            "itemtype": "property",
            "name": "_editorColKey",
            "type": "String",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 135,
            "description": "Holds the TD Node currently being edited",
            "itemtype": "property",
            "name": "_editorTd",
            "type": "Node",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 147,
            "description": "Array with the Event Handles of the events to be cleared on destroying.",
            "itemtype": "property",
            "name": "_subscrEditable",
            "type": "[EventHandle]",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 156,
            "description": "Event handle to the action set in [editorOpenAction](#attr_editorOpenAction).",
            "itemtype": "property",
            "name": "_subscrEditOpen",
            "type": "EventHandle",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 166,
            "description": "CSS class name that is added to indicate a column is editable",
            "itemtype": "property",
            "name": "_classColEditable",
            "type": "String",
            "default": "'yui3-datatable-col-editable'",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 175,
            "description": "CSS classname applied to the TD element being edited.",
            "itemtype": "property",
            "name": "_classEditing",
            "type": "String",
            "default": "'yui3-datatable-col-editing'",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 185,
            "description": "Hash that stores the \"common\" editors, i.e. standard editor names that occur\nwithin Y.DataTable.Editors and are used in this DataTable.\n\nThis object holds the BaseCellEditor instances, keyed by the editor \"name\" for quick hash reference.",
            "itemtype": "property",
            "name": "_commonEditors",
            "type": "Object",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 198,
            "description": "Hash that stores cell editors keyed by column key (or column name) where the value\nfor the associated key is either:<ul>\n    <li>`String` which references an editor name in the [_commonEditors](#property__commonEditors) hash</li>\n    <li>`DataTable.BaseCellEditor` instance for a customized editor instance\n (typically one with specified \"editorConfig\" in the column definition)</li>\n    </ul>",
            "itemtype": "property",
            "name": "_columnEditors",
            "type": "Object",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 215,
            "description": "Initializer that sets up listeners for `editable` and `editorOpenAction` attributes\nand sets some CSS names",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 232,
            "description": "Cleans up ALL of the DT listeners and the editor instances and generated private props",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 246,
            "description": "Opens a cell editor on the given DataTable cell.\nIt also accepts an EventFacade resulting from a user action.",
            "itemtype": "method",
            "name": "openCellEditor",
            "params": [
                {
                    "name": "td",
                    "description": "Table cell to be edited or EventFacade of an action on that cell.",
                    "type": "Node | EventFacade"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 322,
            "description": "Cleans up a currently open cell editor and unbinds any listeners that this DT had\nset on the View.",
            "itemtype": "method",
            "name": "hideCellEditor",
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 336,
            "description": "Utility method that scans through all editor instances and hides them",
            "itemtype": "method",
            "name": "hideAllCellEditors",
            "access": "private",
            "tagname": "* / //TODO: Can there be more than one at a time??\nhideAllCellEditors: function (){\n    Y.log('DataTable.Editable.hideAllCellEditors');\n    this.hideCellEditor();\n    var ces = this._getAllCellEditors();\n    arrEach(ces, function (editor){\n        if(editor && editor.hideEditor) {\n            editor.hideEditor();\n        }\n    });\n},",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 353,
            "description": "Returns all cell editor instances for the editable columns of the current DT instance",
            "itemtype": "method",
            "name": "getCellEditors",
            "return": {
                "description": "Hash containing all the cell editors instances indexed by the column key.",
                "type": "Object"
            },
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 368,
            "description": "Returns the cell editor instance associated with a particular column of the\nDatatable.\n\nReturns null if the given column is not editable.",
            "itemtype": "method",
            "name": "getCellEditor",
            "params": [
                {
                    "name": "col",
                    "description": "Column identifier, either the Column object, column key or column index",
                    "type": "Object|String|Integer"
                }
            ],
            "return": {
                "description": "Cell editor instance, or null if no editor for given column",
                "type": "DataTable.BaseCellEditor"
            },
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 399,
            "description": "Returns the Column object (from the original \"columns\") associated with the input TD Node.",
            "itemtype": "method",
            "name": "getColumnByTd",
            "params": [
                {
                    "name": "cell",
                    "description": "Node of TD for which column object is desired",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "column  The column object entry associated with the desired cell",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 413,
            "description": "Returns the column \"key\" or \"name\" string for the requested TD Node",
            "itemtype": "method",
            "name": "getColumnNameByTd",
            "params": [
                {
                    "name": "cell",
                    "description": "Node of TD for which column name is desired",
                    "type": "Node"
                }
            ],
            "return": {
                "description": "colName  Column key or name",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 441,
            "description": "Sets up listeners for the DT editable module,",
            "itemtype": "method",
            "name": "_bindEditable",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 474,
            "description": "Unbinds ALL of the popup editor listeners and removes column editors.",
            "itemtype": "method",
            "name": "_unbindEditable",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 521,
            "description": "Listener that toggles the DT editable state, setting/unsetting the listeners associated with\ncell editing.\n\nIt uses the _UI_ATTRS facility of Widget.",
            "itemtype": "method",
            "name": "_uiSetEditable",
            "params": [
                {
                    "name": "value",
                    "description": "Value for [editable](#attr_editable) attribute",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 546,
            "description": "Listener for changes on [defaultEditor](#attr_defaultEditor) attribute for this DT.\nIf the default editor is changed to a valid setting, we disable and re-enable\nediting on the DT to reset the column editors.\n\n//TODO either do it better or make defaultEditor writeOnce",
            "itemtype": "method",
            "name": "_afterDefaultEditorChange",
            "params": [
                {
                    "name": "e",
                    "description": "Attribute change event facade",
                    "type": "EventFacade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 568,
            "description": "Setter method for the [editorOpenAction](#attr_editorOpenAction) attribute,\nSets the TD event listener for initiating editing.\n\nIt uses the _UI_ATTRS facility of Widget.",
            "itemtype": "method",
            "name": "_uiSetEditorOpenAction",
            "params": [
                {
                    "name": "val",
                    "description": "Name of the event that should open the editor",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 590,
            "description": "Pre-scans the DT columns looking for named editors and collects unique editors,\ninstantiates them, and adds them to the  [_columnEditors](#property__columnEditors) array.\nThis method only creates the editor instances that are required, through a combination of\n[_commonEditors](#property__commonEditors) and [_columnEditors](#property__columnEditors)\nproperties.",
            "itemtype": "method",
            "name": "_buildColumnEditors",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 667,
            "description": "Takes the given editorName (i.e. 'textarea'),\nfetches the corresponding editor class, merges any column 'editorConfig'\nand creates the corresponding\ncell editor instance.",
            "itemtype": "method",
            "name": "_createCellEditorInstance",
            "params": [
                {
                    "name": "editorName",
                    "description": "Editor name",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "Column object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A newly created editor instance",
                "type": "DataTable.BaseCellEditor"
            },
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 692,
            "description": "Loops through the column editor instances, destroying them and resetting the collection to null object",
            "itemtype": "method",
            "name": "_destroyColumnEditors",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 721,
            "description": "Utility method to combine \"common\" and \"column-specific\" cell editor instances and return them",
            "itemtype": "method",
            "name": "_getAllCellEditors",
            "return": {
                "description": "Of cell editor instances used for the current DT column configurations",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 750,
            "description": "Listener to the \"sort\" event, so we can hide any open editors and update the editable column CSS\nafter the UI refreshes",
            "itemtype": "method",
            "name": "_afterEditableSort",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 764,
            "description": "Re-initializes the cell-dependent properties to null",
            "itemtype": "method",
            "name": "_unsetEditor",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 778,
            "description": "Method to update all of the current TD's within the current DT to add/remove the editable CSS",
            "itemtype": "method",
            "name": "_updateAllEditableColumnsCSS",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 794,
            "description": "Method that adds/removes the CSS editable-column class from a DataTable column,\nbased upon the setting of the boolean \"opt\"",
            "itemtype": "method",
            "name": "_updateEditableColumnCSS",
            "params": [
                {
                    "name": "colKey",
                    "description": "Column key or name to alter",
                    "type": "String"
                },
                {
                    "name": "opt",
                    "description": "True of False to indicate if the CSS class should be added or removed",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 830,
            "description": "Listener to TD \"click\" events that hides a popup editor if not in the current cell",
            "itemtype": "method",
            "name": "_handleCellClick",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 846,
            "description": "Listener that fires on a scrollable DT scrollbar \"scroll\" event, and updates the current XY position\n of the currently open Editor.",
            "itemtype": "method",
            "name": "_onScrollUpdateCellEditor",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 903,
            "description": "Listens to the editor's \"keyNav\" event, which results from the user\npressing \"ctrl-\" arrow key while in an editor to navigate to an cell.",
            "itemtype": "method",
            "name": "_afterkeyNav",
            "params": [
                {
                    "name": "e",
                    "description": "Event facade, including:",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "dx",
                            "description": "the 'x' displacement",
                            "type": "Integer"
                        },
                        {
                            "name": "dy",
                            "description": "the 'y' displacement",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 968,
            "description": "Fired when the the cell editor is about to be opened.",
            "itemtype": "event",
            "name": "celleditor:show",
            "params": [
                {
                    "name": "ev",
                    "description": "Event facade, including:",
                    "type": "Event Facade",
                    "props": [
                        {
                            "name": "editor",
                            "description": "Editor instance used to edit this cell.",
                            "type": "DataTable.BaseCellEditor"
                        },
                        {
                            "name": "td",
                            "description": "The TD Node that was edited",
                            "type": "Node"
                        },
                        {
                            "name": "record",
                            "description": "Model instance of the record data for the edited cell",
                            "type": "Model"
                        },
                        {
                            "name": "colKey",
                            "description": "Column key (or name) of the edited cell",
                            "type": "String"
                        },
                        {
                            "name": "initialValue",
                            "description": "The original value of the underlying data for the cell",
                            "type": "Any"
                        },
                        {
                            "name": "formattedValue",
                            "description": "Value as shown to the user",
                            "type": "Any"
                        },
                        {
                            "name": "inputNode",
                            "description": "Input element for the editor",
                            "type": "Node"
                        }
                    ]
                }
            ],
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 980,
            "description": "Fired when the open Cell Editor has sent an 'cancel' event, typically from\na user cancelling editing via ESC key or \"Cancel Button\"",
            "itemtype": "event",
            "name": "celleditor:cancel",
            "params": [
                {
                    "name": "ev",
                    "description": "Event facade, including:",
                    "type": "Event Facade",
                    "props": [
                        {
                            "name": "editor",
                            "description": "Editor instance used to edit this cell.",
                            "type": "DataTable.BaseCellEditor"
                        },
                        {
                            "name": "td",
                            "description": "The TD Node that was edited",
                            "type": "Node"
                        },
                        {
                            "name": "record",
                            "description": "Model instance of the record data for the edited cell",
                            "type": "Model"
                        },
                        {
                            "name": "colKey",
                            "description": "Column key (or name) of the edited cell",
                            "type": "String"
                        },
                        {
                            "name": "initialValue",
                            "description": "The original value of the underlying data for the cell",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 991,
            "description": "Event fired after a Cell Editor has sent the `save` event, closing an editing session.",
            "itemtype": "event",
            "name": "celleditor:save",
            "params": [
                {
                    "name": "ev",
                    "description": "Event facade, including:",
                    "type": "Event Facade",
                    "props": [
                        {
                            "name": "editor",
                            "description": "Editor instance used to edit this cell.",
                            "type": "DataTable.BaseCellEditor"
                        },
                        {
                            "name": "td",
                            "description": "The TD Node that was edited",
                            "type": "Node"
                        },
                        {
                            "name": "record",
                            "description": "Model instance of the record data for the edited cell",
                            "type": "Model"
                        },
                        {
                            "name": "colKey",
                            "description": "Column key (or name) of the edited cell",
                            "type": "String"
                        },
                        {
                            "name": "initialValue",
                            "description": "The original value of the underlying data for the cell",
                            "type": "Any"
                        },
                        {
                            "name": "formattedValue",
                            "description": "Value as entered by the user",
                            "type": "Any"
                        },
                        {
                            "name": "newValue",
                            "description": "The value to be saved",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 1004,
            "description": "After listener for the cell editor `cancel` event. If no other listener\nhas halted the event, this method will finally hide the editor.",
            "itemtype": "method",
            "name": "_afterCellEditorCancel",
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/editable.js",
            "line": 1022,
            "description": "After listener for the cell editor `save` event. If no other listener\nhas halted the event, this method will finally save the new value\nand hide the editor.",
            "itemtype": "method",
            "name": "_afterCellEditorSave",
            "params": [
                {
                    "name": "ev",
                    "description": "Event facade (see: [celleditor:save](#event_celleditor:save) event.",
                    "type": "Event Facade"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DataTable.Editable",
            "module": "datatable",
            "submodule": "datatable-editable"
        },
        {
            "file": "js/formatters.js",
            "line": 40,
            "description": "Returns a formatter that produces a BUTTON element using the value of\nthe `buttonLabel` column definition attribute as its label or the text\n`Click` if not found.\n\nApplies the CSS className `yui3-datatable-button` to the cell.",
            "itemtype": "method",
            "name": "button",
            "params": [
                {
                    "name": "col",
                    "description": "The column definition.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A formatter function that produces a `<button>` element.",
                "type": "Function"
            },
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/formatters.js",
            "line": 63,
            "description": "Returns a formatter function that returns the texts `\"true\"` or `\"false\"`\nand assigns the CSS classNames `yui3-datatable-true` or `yui3-datatable-false`\nbased on the value of the cell.\n\nIf either a `booleanLabels` configuration object is defined for the column\nor a `booleanLabels` configuration attribute is defined for the datatable,\nthe formatter will use the values for the properties `true` or `false`\nof either of those objects as the text to show.\n\nIt returns `null`s or `undefined`s unchanged so that the `emptyCellValue`\nconfiguration attribute will eventually apply.\n\n     {key:\"active\", formatter: \"boolean\", booleanLabels: {\n         \"true\": \"yes\",\n         \"false\": \"no\"\n     }}",
            "itemtype": "method",
            "name": "boolean",
            "params": [
                {
                    "name": "col",
                    "description": "The column definition.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A formatter function that formats boolean data.",
                "type": "Function"
            },
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/formatters.js",
            "line": 100,
            "description": "Returns a formatter function that formats values as currency using\nthe `Y.Number.format` method.\nIt looks for the format to apply in the `currencyFormat` property of the column\nor in the `currencyFormat` attribute of the whole table.\n\n    {key: \"amount\", formatter: \"currency\", currencyFormat: {\n        decimalPlaces:2,\n        decimalSeparator: \",\",\n        thousandsSeparator: \".\",\n        suffix: \"&euro;\"\n    }}\n\nSee <a href=\"Number.html#method_format\">Y.Number.format</a> for the available format specs.\n\nAnything that cannot be parsed as a number will be returned unchanged.\n\nApplies the CSS className `yui3-datatable-currency` to the cell.",
            "itemtype": "method",
            "name": "currency",
            "params": [
                {
                    "name": "col",
                    "description": "The column definition.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A formatter function that formats numerical data as currency.",
                "type": "Function"
            },
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/formatters.js",
            "line": 138,
            "description": "Returns a date formatting function based on the given format.",
            "itemtype": "method",
            "name": "_date",
            "params": [
                {
                    "name": "format",
                    "description": "The format spec definition.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A formatter function that formats numerical data as currency.",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/formatters.js",
            "line": 155,
            "description": "Returns a date formatting function.\nIt looks for the format to apply in the `dateFormat` property of the column\nor in the `dateFormat` attribute of the whole table.\n\n    {key: \"DOB\", formatter: \"date\", dateFormat: \"%I:%M:%S %p\"}\n\nSee <a href=\"Date.html#method_format\">Y.Date.format</a> for the available format specs.\n\nAnything that is not a date is returned unchanged.\n\nApplies the CSS className `yui3-datatable-date` to the cell.",
            "itemtype": "method",
            "name": "date",
            "params": [
                {
                    "name": "col",
                    "description": "The column definition.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A formatter function that formats dates.",
                "type": "Function"
            },
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/formatters.js",
            "line": 175,
            "description": "Returns a date-only (no time part) formatting function using the current locale.\n\n    {key: \"DOB\", formatter: \"localDate\"}\n\nAnything that is not a date is returned unchanged.\n\nApplies the CSS className `yui3-datatable-date` to the cell.",
            "itemtype": "method",
            "name": "localDate",
            "return": {
                "description": "A formatter function that formats dates.",
                "type": "Function"
            },
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/formatters.js",
            "line": 190,
            "description": "Returns a time-only (no date part) formatting function using the current locale.\n\n    {key: \"startTime\", formatter: \"localTime\"}\n\nAnything that is not a date is returned unchanged.\n\nApplies the CSS className `yui3-datatable-date` to the cell.",
            "itemtype": "method",
            "name": "localTime",
            "return": {
                "description": "A formatter function that formats dates.",
                "type": "Function"
            },
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/formatters.js",
            "line": 205,
            "description": "Returns a date formatting function using the current locale.\n\n    {key: \"DOB\", formatter: \"localDateTime\"}\n\nAnything that is not a date is returned unchanged.\n\nApplies the CSS className `yui3-datatable-date` to the cell.",
            "itemtype": "method",
            "name": "localDateTime",
            "return": {
                "description": "A formatter function that formats dates.",
                "type": "Function"
            },
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/formatters.js",
            "line": 222,
            "description": "Returns a function that produces email links.\nIf the column definition contains a property `linkFrom` it will use the value\nin that field for the link, otherwise, the same column value will be used for both\nlink and text.\n\n    {key: \"contact\", formatter: \"email\", linkFrom: \"contactEmail\"}\n\nIt will use the respective `emptyCellValue` column configuration attribute\nfor each of the value and the link if either is empty.\nIf the link value is still empty, it will return the value with no link.\n\nApplies the CSS className `yui3-datatable-email` to the cell.",
            "itemtype": "method",
            "name": "email",
            "params": [
                {
                    "name": "col",
                    "description": "The column definition.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A formatter function that adds a mailto: link to the value.",
                "type": "Function"
            },
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/formatters.js",
            "line": 259,
            "description": "Returns a function that produces links.\nIf the column definition contains a property `linkFrom` it will use the value\nin that field for the link, otherwise, the same column value will be used for both\nlink and text.\n\n    {key: \"company\", formatter: \"link\", linkFrom: \"webSite\"}\n\nIt will use the respective `emptyCellValue` column configuration attribute\nfor each of the value and the link if either is empty.\nIf the link value is still empty, it will return the value with no link.\n\nApplies the CSS className `yui3-datatable-link` to the cell.",
            "itemtype": "method",
            "name": "link",
            "params": [
                {
                    "name": "col",
                    "description": "The column definition.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A formatter function that adds a link to the value.",
                "type": "Function"
            },
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/formatters.js",
            "line": 296,
            "description": "Returns a formatter function that formats values using\nthe `Y.Number.format` method.\nIt looks for the format to apply in the `numberFormat` property of the column\nor in the `numberFormat` attribute of the whole table.\n\n     {key: \"weight\", formatter: \"number\", numberFormat: {\n         decimalPlaces:2,\n         decimalSeparator: \",\",\n         thousandsSeparator: \",\",\n         suffix: \"kg\"\n     }}\n\nSee <a href=\"Number.html#method_format\">Y.Number.format</a> for the available format specs.\n\nAnything that cannot be parsed as a number will be returned unchanged.\n\nApplies the CSS className `yui3-datatable-number` to the cell.",
            "itemtype": "method",
            "name": "number",
            "params": [
                {
                    "name": "col",
                    "description": "The column definition.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A formatter function that formats numerical data as currency.",
                "type": "Function"
            },
            "static": 1,
            "class": "DataTable.BodyView.Formatters",
            "module": "datatable",
            "submodule": "datatable-formatters"
        },
        {
            "file": "js/head.js",
            "line": 83,
            "description": "Template used to create the table's header cell markup.  Override this to\ncustomize how header cell markup is created.",
            "itemtype": "property",
            "name": "CELL_TEMPLATE",
            "type": "{HTML}",
            "default": "'<th id=\"{id}\" colspan=\"{_colspan}\" rowspan=\"{_rowspan}\" class=\"{className}\" scope=\"col\" {_id}{abbr}{title}>{content}</th>'",
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 95,
            "description": "The data representation of the header rows to render.  This is assigned by\nparsing the `columns` configuration array, and is used by the render()\nmethod.",
            "itemtype": "property",
            "name": "columns",
            "type": "{Array[]}",
            "default": "(initially unset)",
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 108,
            "description": "Template used to create the table's header row markup.  Override this to\ncustomize the row markup.",
            "itemtype": "property",
            "name": "ROW_TEMPLATE",
            "type": "{HTML}",
            "default": "'<tr>{content}</tr>'",
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 120,
            "description": "The object that serves as the source of truth for column and row data.\nThis property is assigned at instantiation from the `source` property of\nthe configuration object passed to the constructor.",
            "itemtype": "property",
            "name": "source",
            "type": "{Object}",
            "default": "(initially unset)",
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 133,
            "description": "HTML templates used to create the `<thead>` containing the table headers.",
            "itemtype": "property",
            "name": "THEAD_TEMPLATE",
            "type": "{HTML}",
            "default": "'<thead class=\"{className}\">{content}</thead>'",
            "since": "3.6.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 145,
            "description": "Returns the generated CSS classname based on the input.  If the `host`\nattribute is configured, it will attempt to relay to its `getClassName`\nor use its static `NAME` property as a string base.\n\nIf `host` is absent or has neither method nor `NAME`, a CSS classname\nwill be generated using this class's `NAME`.",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "token",
                    "description": "Any number of token strings to assemble the\n    classname from.",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 175,
            "description": "Creates the `<thead>` Node content by assembling markup generated by\npopulating the `ROW_TEMPLATE` and `CELL_TEMPLATE` templates with content\nfrom the `columns` property.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "The instance",
                "type": "HeaderView"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 264,
            "description": "Handles changes in the source's columns attribute.  Redraws the headers.",
            "itemtype": "method",
            "name": "_afterColumnsChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `columnsChange` event object",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 278,
            "description": "Binds event subscriptions from the UI and the source (if assigned).",
            "itemtype": "method",
            "name": "bindUI",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 294,
            "description": "Creates the `<thead>` node that will store the header rows and cells.",
            "itemtype": "method",
            "name": "_createTHeadNode",
            "return": {
                "description": "",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 308,
            "description": "Destroys the instance.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 319,
            "description": "Holds the event subscriptions needing to be detached when the instance is\n`destroy()`ed.",
            "itemtype": "property",
            "name": "_eventHandles",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 331,
            "description": "Initializes the instance. Reads the following configuration properties:\n\n  * `columns` - (REQUIRED) The initial column information\n  * `host`    - The object to serve as source of truth for column info",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration data",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/head.js",
            "line": 349,
            "description": "Translate the input column format into a structure useful for rendering a\n`<thead>`, rows, and cells.  The structure of the input is expected to be a\nsingle array of objects, where each object corresponds to a `<th>`.  Those\nobjects may contain a `children` property containing a similarly structured\narray to indicate the nested cells should be grouped under the parent\ncolumn's colspan in a separate row of header cells. E.g.\n\n<pre><code>\n[\n  { key: 'id' }, // no nesting\n  { key: 'name', children: [\n    { key: 'firstName', label: 'First' },\n    { key: 'lastName',  label: 'Last' } ] }\n]\n</code></pre>\n\nwould indicate two header rows with the first column 'id' being assigned a\n`rowspan` of `2`, the 'name' column appearing in the first row with a\n`colspan` of `2`, and the 'firstName' and 'lastName' columns appearing in\nthe second row, below the 'name' column.\n\n<pre>\n---------------------\n|    |     name     |\n|    |---------------\n| id | First | Last |\n---------------------\n</pre>\n\nSupported properties of the column objects include:\n\n  * `label`    - The HTML content of the header cell.\n  * `key`      - If `label` is not specified, the `key` is used for content.\n  * `children` - Array of columns to appear below this column in the next\n                 row.\n  * `abbr`     - The content of the 'abbr' attribute of the `<th>`\n  * `title`    - The content of the 'title' attribute of the `<th>`\n  * `headerTemplate` - Overrides the instance's `CELL_TEMPLATE` for cells\n    in this column only.\n\nThe output structure is basically a simulation of the `<thead>` structure\nwith arrays for rows and objects for cells.  Column objects have the\nfollowing properties added to them:\n\n  * `id`       - (Defaulted by DataTable) The id to assign the rendered\n                 column\n  * `_colspan` - Per the `<th>` attribute\n  * `_rowspan` - Per the `<th>` attribute\n  * `_parent`  - (Added by DataTable) If the column is a child of another\n    column, this points to its parent column\n\nThe column object is also used to provide values for {placeholder}\nreplacement in the `CELL_TEMPLATE`, so you can modify the template and\ninclude other column object properties to populate them.",
            "itemtype": "method",
            "name": "_parseColumns",
            "params": [
                {
                    "name": "data",
                    "description": "Array of column object data",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "An array of arrays corresponding to the header row\n        structure to render",
                "type": "Array[]"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.HeaderView",
            "module": "datatable",
            "submodule": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "js/inputformatters.js",
            "line": 38,
            "description": "Formats a BUTTON element using the value as the label.\n\nApplies the CSS className `yui3-datatable-button` to the cell.",
            "itemtype": "method",
            "name": "button",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the markup for the button.",
                "type": "String"
            },
            "static": 1,
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/inputformatters.js",
            "line": 64,
            "description": "Formats a CHECKBOX element based on the <i>truthy</i> value of the cell.\n\nApplies the CSS className `yui3-datatable-checkbox` to the cell.",
            "itemtype": "method",
            "name": "checkbox",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the markup for the checkbox.",
                "type": "String"
            },
            "static": 1,
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/inputformatters.js",
            "line": 90,
            "description": "Formats values as currency using the `Y.Number.format` method.\nIt looks for the format to apply in the `currencyFormat` property of the column\nor in the `currencyFormat` attribute of the whole table.\n\n    {key: \"amount\", formatter: \"currency\", currencyFormat: {\n        decimalPlaces:2,\n        decimalSeparator: \",\",\n        thousandsSeparator: \".\",\n        suffix: \"&euro;\"\n     }}\n\nApplies the CSS className `yui3-datatable-currency` to the cell.",
            "itemtype": "method",
            "name": "currency",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the formatted value.",
                "type": "String"
            },
            "static": 1,
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/inputformatters.js",
            "line": 124,
            "description": "Formats JavaScript Dates.\nIt looks for the format to apply in the `dateFormat` property of the column\nor in the `dateFormat` attribute of the whole table.\n\n    {key: \"DOB\", formatter: \"date\", dateFormat: \"%I:%M:%S %p\"}\n\nApplies the CSS className `yui3-datatable-date` to the cell.",
            "itemtype": "method",
            "name": "date",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the formatted date.",
                "type": "String"
            },
            "static": 1,
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/inputformatters.js",
            "line": 154,
            "description": "Formats SELECT elements.\n\nIt looks for the options to offer in the `dropdownOptions` property of the column.\nThe `dropdownOptions` must be an array either of plain values,\nwhich will be used as both the value and the label or objects with\n`value` and `label` properties.\n\n    {key: \"color\", formatter: \"dropdown\", dropdownOptions: [\n         {value:\"\", label:\"-none selected\"},\n         \"blue\",\n         \"red\",\n         \"green\"\n    ]}\n\n\nApplies the CSS className `yui3-datatable-dropdown` to the cell.",
            "itemtype": "method",
            "name": "dropdown",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the markup for the dropdown box.",
                "type": "String"
            },
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/inputformatters.js",
            "line": 208,
            "description": "Formats emails links.\nIf the column definition contains a property `linkFrom` it will use the value\nin that field for the link, otherwise, the same column value will be used for both\nlink and text.\n\n    {key: \"contact\", formatter: \"email\", linkFrom: \"contactEmail\"}\n\nApplies the CSS className `yui3-datatable-email` to the cell.",
            "itemtype": "method",
            "name": "email",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the markup for the address.",
                "type": "String"
            },
            "static": 1,
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/inputformatters.js",
            "line": 240,
            "description": "Formats links.\nIf the column definition contains a property `linkFrom` it will use the value\nin that field for the link, otherwise, the same column value will be used for both\nlink and text.\n\n    {key: \"companyName\", formatter: \"link\", linkFrom: \"CompanyWebSite\"}\n\nApplies the CSS className `yui3-datatable-link` to the cell.",
            "itemtype": "method",
            "name": "link",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the markup for the address.",
                "type": "String"
            },
            "static": 1,
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/inputformatters.js",
            "line": 272,
            "description": "Formats values as a number using the `Y.Number.format` method.\nIt looks for the format to apply in the `numberFormat` property of the column\nor in the `numberFormat` attribute of the whole table.\n\n    {key: \"weight\", formatter: \"number\", numberFormat: {\n        decimalPlaces:2,\n        decimalSeparator: \",\",\n        thousandsSeparator: \",\",\n        suffix: \"kg\"\n    }}\n\nApplies the CSS className `yui3-datatable-number` to the cell.",
            "itemtype": "method",
            "name": "number",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the formatted value.",
                "type": "String"
            },
            "static": 1,
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/inputformatters.js",
            "line": 306,
            "description": "Formats a CHECKBOX element based on the <i>truthy</i> value of the cell.\nAll the radios on the same column share a unique name so they are mutually exclusive\n\nApplies the CSS className `yui3-datatable-radio` to the cell.",
            "itemtype": "method",
            "name": "radio",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the markup for the radio.",
                "type": "String"
            },
            "static": 1,
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/inputformatters.js",
            "line": 333,
            "description": "It produces a TEXTAREA filled with the escaped value of the cell.\n\nApplies the CSS className `yui3-datatable-textarea` to the cell.",
            "itemtype": "method",
            "name": "textarea",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the markup for the textarea",
                "type": "String"
            },
            "static": 1,
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/inputformatters.js",
            "line": 358,
            "description": "It produces a TEXTBOX filled with the escaped value of the cell.\n\nApplies the CSS className `yui3-datatable-textbox` to the cell.",
            "itemtype": "method",
            "name": "textbox",
            "params": [
                {
                    "name": "o",
                    "description": "As provided by [BodyView](DataTable.BodyView.html)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The raw value from the record Model to populate this cell.\n     Equivalent to `o.record.get(o.column.key)` or `o.data[o.column.key]`.",
                            "type": "Any"
                        },
                        {
                            "name": "data",
                            "description": "The Model data for this row in simple object format.",
                            "type": "Object"
                        },
                        {
                            "name": "column",
                            "description": "The column configuration object.",
                            "type": "Object"
                        },
                        {
                            "name": "record",
                            "description": "The Model for this row.",
                            "type": "Y.Model"
                        },
                        {
                            "name": "className",
                            "description": "A string of class names to add `<td class=\"HERE\">`\n       in addition to the column class and any classes in the column's className configuration.",
                            "type": "String"
                        },
                        {
                            "name": "rowIndex",
                            "description": "The index of the current Model in the ModelList.\n       Typically correlates to the row index as well.",
                            "type": "Number"
                        },
                        {
                            "name": "rowClass",
                            "description": "A string of css classes to add `<tr class=\"HERE\"><td....`",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the markup for the textbox",
                "type": "String"
            },
            "static": 1,
            "class": "DataTable.BodyView.InputFormatters",
            "module": "datatable",
            "submodule": "datatable-input-formatters"
        },
        {
            "file": "js/message.js",
            "line": 29,
            "description": "Enables the display of messages in the table.  Setting this to false will\nprevent the message Node from being created and `showMessage` from doing\nanything.",
            "itemtype": "attribute",
            "name": "showMessages",
            "type": "{Boolean}",
            "default": "true",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 46,
            "description": "Template used to generate the node that will be used to report messages.",
            "itemtype": "property",
            "name": "MESSAGE_TEMPLATE",
            "type": "{HTML}",
            "default": "<tbody class=\"{className}\"><td class=\"{contentClass}\" colspan=\"{colspan}\"></td></tbody>",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 56,
            "description": "Hides the message node.",
            "itemtype": "method",
            "name": "hideMessage",
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 71,
            "description": "Display the message node and set its content to `message`.  If there is a\nlocalized `strings` entry for the value of `message`, that string will be\nused.",
            "itemtype": "method",
            "name": "showMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message name or message itself to display",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 110,
            "description": "Updates the colspan of the `<td>` used to display the messages.",
            "itemtype": "method",
            "name": "_afterMessageColumnsChange",
            "params": [
                {
                    "name": "e",
                    "description": "The columnsChange event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 133,
            "description": "Relays to `_uiSetMessage` to hide or show the message node.",
            "itemtype": "method",
            "name": "_afterMessageDataChange",
            "params": [
                {
                    "name": "e",
                    "description": "The dataChange event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 145,
            "description": "Removes the message node if `showMessages` is `false`, or relays to\n`_uiSetMessage` if `true`.",
            "itemtype": "method",
            "name": "_afterShowMessagesChange",
            "params": [
                {
                    "name": "e",
                    "description": "The showMessagesChange event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 166,
            "description": "Binds the events necessary to keep the message node in sync with the current\ntable and configuration state.",
            "itemtype": "method",
            "name": "_bindMessageUI",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 184,
            "description": "Merges in the message related strings and hooks into the rendering cycle to\nalso render and bind the message node.",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 203,
            "description": "Creates the `_messageNode` property from the configured `MESSAGE_TEMPLATE`\nand inserts it before the `<table>`'s `<tbody>` node.",
            "itemtype": "method",
            "name": "_initMessageNode",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 224,
            "description": "Add the messaging related strings to the `strings` map.",
            "itemtype": "method",
            "name": "_initMessageStrings",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 237,
            "description": "Node used to display messages from `showMessage`.",
            "itemtype": "property",
            "name": "_messageNode",
            "type": "{Node}",
            "value": "`undefined` (not initially set)",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 247,
            "description": "Synchronizes the message UI with the table state.",
            "itemtype": "method",
            "name": "_syncMessageUI",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/message.js",
            "line": 258,
            "description": "Calls `hideMessage` or `showMessage` as appropriate based on the presence of\nrecords in the `data` ModelList.\n\nThis is called when `data` is reset or records are added or removed.  Also,\nif the `showMessages` attribute is updated.  In either case, if the\ntriggering event has a `message` property on the EventFacade, it will be\npassed to `showMessage` (if appropriate).  If no such property is on the\nfacade, the `emptyMessage` will be used (see the strings).",
            "itemtype": "method",
            "name": "_uiSetMessage",
            "params": [
                {
                    "name": "e",
                    "description": "The columnsChange event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-message"
        },
        {
            "file": "js/mutable.js",
            "line": 40,
            "description": "Controls whether `addRow`, `removeRow`, and `modifyRow` should trigger the\nunderlying Model's sync layer by default.\n\nWhen `true`, it is unnecessary to pass the \"sync\" configuration property to\nthose methods to trigger per-operation sync.",
            "itemtype": "attribute",
            "name": "autoSync",
            "type": "{Boolean}",
            "default": "`false`",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 60,
            "description": "Adds the column configuration to the DataTable's `columns` configuration.\nIf the `index` parameter is supplied, it is injected at that index.  If the\ntable has nested headers, inject a subcolumn by passing an array of indexes\nto identify the new column's final location.\n\nThe `index` parameter is required if adding a nested column.\n\nThis method is a convienience method for fetching the DataTable's `columns`\nattribute, updating it, and calling\n`table.set('columns', _updatedColumnsDefs_)`\n\nFor example:\n\n<pre><code>// Becomes last column\ntable.addColumn('name');\n\n// Inserted after the current second column, moving the current third column\n// to index 4\ntable.addColumn({ key: 'price', formatter: currencyFormatter }, 2 );\n\n// Insert a new column in a set of headers three rows deep.  The index array\n// translates to\n// [ 2, --  in the third column's children\n//   1, --  in the second child's children\n//   3 ] -- as the fourth child column\ntable.addColumn({ key: 'age', sortable: true }, [ 2, 1, 3 ]);\n</code></pre>",
            "itemtype": "method",
            "name": "addColumn",
            "params": [
                {
                    "name": "config",
                    "description": "The new column configuration object",
                    "type": "Object|String"
                },
                {
                    "name": "index",
                    "description": "the insertion index",
                    "type": "Number|Number[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 114,
            "description": "Updates an existing column definition. Fires the `modifyColumn` event.\n\nFor example:\n\n<pre><code>// Add a formatter to the existing 'price' column definition\ntable.modifyColumn('price', { formatter: currencyFormatter });\n\n// Change the label on a header cell in a set of nested headers three rows\n// deep.  The index array translates to\n// [ 2,  -- in the third column's children\n//   1,  -- the second child\n//   3 ] -- the fourth child column\ntable.modifyColumn([2, 1, 3], { label: 'Experience' });\n</code></pre>",
            "itemtype": "method",
            "name": "modifyColumn",
            "params": [
                {
                    "name": "name",
                    "description": "The column key, name, index, or\n            current configuration object",
                    "type": "String|Number|Number[]|Object"
                },
                {
                    "name": "config",
                    "description": "The new column configuration properties",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 153,
            "description": "Moves an existing column to a new location. Fires the `moveColumn` event.\n\nThe destination index can be a number or array of numbers to place a column\nheader in a nested header row.",
            "itemtype": "method",
            "name": "moveColumn",
            "params": [
                {
                    "name": "name",
                    "description": "The column key, name, index, or\n            current configuration object",
                    "type": "String|Number|Number[]|Object"
                },
                {
                    "name": "index",
                    "description": "The destination index of the column",
                    "type": "Number|Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 178,
            "description": "Removes an existing column. Fires the `removeColumn` event.",
            "itemtype": "method",
            "name": "removeColumn",
            "params": [
                {
                    "name": "name",
                    "description": "The column key, name, index, or\n            current configuration object",
                    "type": "String|Number|Number[]|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 198,
            "description": "Adds a new record to the DataTable's `data` ModelList.  Record data can be\nan object of field values or an instance of the DataTable's configured\n`recordType` class.\n\nThis relays all parameters to the `data` ModelList's `add` method.\n\nIf a configuration object is passed as a second argument, and that object\nhas `sync: true` set, the underlying Model will be `save()`d.\n\nIf the DataTable's `autoSync` attribute is set to `true`, the additional\nargument is not needed.\n\nIf syncing and the last argument is a function, that function will be used\nas a callback to the Model's `save()` method.",
            "itemtype": "method",
            "name": "addRow",
            "params": [
                {
                    "name": "data",
                    "description": "The data or Model instance for the new record",
                    "type": "Object"
                },
                {
                    "name": "config",
                    "description": "Configuration to pass along",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback function for Model's `save()`",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "If an error occurred or validation\n    failed, this parameter will contain the error. If the sync operation\n    succeeded, _err_ will be `null`.",
                            "type": "Error|null"
                        },
                        {
                            "name": "response",
                            "description": "The server's response. This value will\n    be passed to the `parse()` method, which is expected to parse it and\n    return an attribute hash.",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 255,
            "description": "Removes a record from the DataTable's `data` ModelList.  The record can be\nprovided explicitly or targeted by it's `id` (see ModelList's `getById`\nmethod), `clientId`, or index in the ModelList.\n\nAfter locating the target Model, this relays the Model and all other passed\narguments to the `data` ModelList's `remove` method.\n\nIf a configuration object is passed as a second argument, and that object\nhas `sync: true` set, the underlying Model will be destroyed, passing\n`{ delete: true }` to trigger calling the Model's sync layer.\n\nIf the DataTable's `autoSync` attribute is set to `true`, the additional\nargument is not needed.\n\nIf syncing and the last argument is a function, that function will be used\nas a callback to the Model's `destroy()` method.",
            "itemtype": "method",
            "name": "removeRow",
            "params": [
                {
                    "name": "id",
                    "description": "The Model instance or identifier",
                    "type": "Object|String|Number"
                },
                {
                    "name": "config",
                    "description": "Configuration to pass along",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback function for Model's `save()`",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "If an error occurred or validation\n    failed, this parameter will contain the error. If the sync operation\n    succeeded, _err_ will be `null`.",
                            "type": "Error|null"
                        },
                        {
                            "name": "response",
                            "description": "The server's response. This value will\n    be passed to the `parse()` method, which is expected to parse it and\n    return an attribute hash.",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 329,
            "description": "Updates an existing record in the DataTable's `data` ModelList.  The record\ncan be provided explicitly or targeted by it's `id` (see ModelList's\n`getById` method), `clientId`, or index in the ModelList.\n\nAfter locating the target Model, this relays the all other passed\narguments to the Model's `setAttrs` method.\n\nIf a configuration object is passed as a second argument, and that object\nhas `sync: true` set, the underlying Model will be `save()`d.\n\nIf the DataTable's `autoSync` attribute is set to `true`, the additional\nargument is not needed.\n\nIf syncing and the last argument is a function, that function will be used\nas a callback to the Model's `save()` method.",
            "itemtype": "method",
            "name": "modifyRow",
            "params": [
                {
                    "name": "id",
                    "description": "The Model instance or identifier",
                    "type": "Object|String|Number"
                },
                {
                    "name": "data",
                    "description": "New data values for the Model",
                    "type": "Object"
                },
                {
                    "name": "config",
                    "description": "Configuration to pass along to `setAttrs()`",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback function for Model's `save()`",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "If an error occurred or validation\n    failed, this parameter will contain the error. If the sync operation\n    succeeded, _err_ will be `null`.",
                            "type": "Error|null"
                        },
                        {
                            "name": "response",
                            "description": "The server's response. This value will\n    be passed to the `parse()` method, which is expected to parse it and\n    return an attribute hash.",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 394,
            "description": "Default function for the `addColumn` event.\n\nInserts the specified column at the provided index.",
            "itemtype": "method",
            "name": "_defAddColumnFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `addColumn` event",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "column",
                            "description": "The new column definition object",
                            "type": "Object"
                        },
                        {
                            "name": "index",
                            "description": "The array index to insert the new column",
                            "type": "Number|Number[]"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 424,
            "description": "Default function for the `modifyColumn` event.\n\nMixes the new column properties into the specified column definition.",
            "itemtype": "method",
            "name": "_defModifyColumnFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `modifyColumn` event",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "column",
                            "description": "The column definition object or identifier",
                            "type": "Object|String|Number|Number[]"
                        },
                        {
                            "name": "newColumnDef",
                            "description": "The properties to assign to the column",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 448,
            "description": "Default function for the `moveColumn` event.\n\nRemoves the specified column from its current location and inserts it at the\nspecified array index (may be an array of indexes for nested headers).",
            "itemtype": "method",
            "name": "_defMoveColumnFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `moveColumn` event",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "column",
                            "description": "The column definition object or identifier",
                            "type": "Object|String|Number|Number[]"
                        },
                        {
                            "name": "index",
                            "description": "The destination index to move to",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 501,
            "description": "Default function for the `removeColumn` event.\n\nSplices the specified column from its containing columns array.",
            "itemtype": "method",
            "name": "_defRemoveColumnFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `removeColumn` event",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "column",
                            "description": "The column definition object or identifier",
                            "type": "Object|String|Number|Number[]"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 530,
            "description": "Publishes the events used by the mutation methods:\n\n * addColumn\n * removeColumn\n * modifyColumn\n * moveColumn",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 552,
            "description": "Adds an array of new records to the DataTable's `data` ModelList.  Record data\ncan be an array of objects containing field values or an array of instance of\nthe DataTable's configured `recordType` class.\n\nThis relays all parameters to the `data` ModelList's `add` method.\n\nTechnically, this is an alias to `addRow`, but please use the appropriately\nnamed method for readability.\n\nIf a configuration object is passed as a second argument, and that object\nhas `sync: true` set, the underlying Models will be `save()`d.\n\nIf the DataTable's `autoSync` attribute is set to `true`, the additional\nargument is not needed.\n\nIf syncing and the last argument is a function, that function will be used\nas a callback to each Model's `save()` method.",
            "itemtype": "method",
            "name": "addRows",
            "params": [
                {
                    "name": "data",
                    "description": "The data or Model instances to add",
                    "type": "Object[]"
                },
                {
                    "name": "config",
                    "description": "Configuration to pass along",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback function for each Model's `save()`",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "If an error occurred or validation\n    failed, this parameter will contain the error. If the sync operation\n    succeeded, _err_ will be `null`.",
                            "type": "Error|null"
                        },
                        {
                            "name": "response",
                            "description": "The server's response. This value will\n    be passed to the `parse()` method, which is expected to parse it and\n    return an attribute hash.",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 592,
            "description": "Fired by the `addColumn` method.",
            "itemtype": "event",
            "name": "addColumn",
            "preventable": "_defAddColumnFn",
            "params": [
                {
                    "name": "column",
                    "description": "The new column definition object",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "The array index to insert the new column",
                    "type": "Number|Number[]"
                }
            ],
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 602,
            "description": "Fired by the `removeColumn` method.",
            "itemtype": "event",
            "name": "removeColumn",
            "preventable": "_defRemoveColumnFn",
            "params": [
                {
                    "name": "column",
                    "description": "The column definition object or identifier",
                    "type": "Object|String|Number|Number[]"
                }
            ],
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 611,
            "description": "Fired by the `modifyColumn` method.",
            "itemtype": "event",
            "name": "modifyColumn",
            "preventable": "_defModifyColumnFn",
            "params": [
                {
                    "name": "column",
                    "description": "The column definition object or identifier",
                    "type": "Object|String|Number|Number[]"
                },
                {
                    "name": "newColumnDef",
                    "description": "The properties to assign to the column",
                    "type": "Object"
                }
            ],
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/mutable.js",
            "line": 621,
            "description": "Fired by the `moveColumn` method.",
            "itemtype": "event",
            "name": "moveColumn",
            "preventable": "_defMoveColumnFn",
            "params": [
                {
                    "name": "column",
                    "description": "The column definition object or identifier",
                    "type": "Object|String|Number|Number[]"
                },
                {
                    "name": "index",
                    "description": "The destination index to move to",
                    "type": "Object"
                }
            ],
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-mutable"
        },
        {
            "file": "js/scroll.js",
            "line": 55,
            "description": "Activates or deactivates scrolling in the table.  Acceptable values are:\n\n * `false` - (default) Scrolling is disabled.\n * `true` or 'xy' - If `height` is set, vertical scrolling will be\n   activated, if `width` is set, horizontal scrolling will be activated.\n * 'x' - Activate horizontal scrolling only. Requires the `width` attribute\n   is also set.\n * 'y' - Activate vertical scrolling only. Requires the `height` attribute\n   is also set.",
            "itemtype": "attribute",
            "name": "scrollable",
            "type": "{String|Boolean}",
            "value": "false",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 79,
            "description": "Scrolls a given row or cell into view if the table is scrolling.  Pass the\n`clientId` of a Model from the DataTable's `data` ModelList or its row\nindex to scroll to a row or a [row index, column index] array to scroll to\na cell.  Alternately, to scroll to any element contained within the table's\nscrolling areas, pass its ID, or the Node itself (though you could just as\nwell call `node.scrollIntoView()` yourself, but hey, whatever).",
            "itemtype": "method",
            "name": "scrollTo",
            "params": [
                {
                    "name": "id",
                    "description": "A row clientId, row index, cell\n        coordinate array, id string, or Node",
                    "type": "String|Number|Number[]|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 122,
            "description": "Template for the `<table>` that is used to fix the caption in place when\nthe table is horizontally scrolling.",
            "itemtype": "property",
            "name": "_CAPTION_TABLE_TEMPLATE",
            "type": "{HTML}",
            "value": "'<table class=\"{className}\" role=\"presentation\"></table>'",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 134,
            "description": "Template used to create sizable element liners around header content to\nsynchronize fixed header column widths.",
            "itemtype": "property",
            "name": "_SCROLL_LINER_TEMPLATE",
            "type": "{HTML}",
            "value": "'<div class=\"{className}\"></div>'",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 146,
            "description": "Template for the virtual scrollbar needed in \"y\" and \"xy\" scrolling setups.",
            "itemtype": "property",
            "name": "_SCROLLBAR_TEMPLATE",
            "type": "{HTML}",
            "value": "'<div class=\"{className}\"><div></div></div>'",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 157,
            "description": "Template for the `<div>` that is used to contain the table when the table is\nhorizontally scrolling.",
            "itemtype": "property",
            "name": "_X_SCROLLER_TEMPLATE",
            "type": "{HTML}",
            "value": "'<div class=\"{className}\"></div>'",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 169,
            "description": "Template for the `<table>` used to contain the fixed column headers for\nvertically scrolling tables.",
            "itemtype": "property",
            "name": "_Y_SCROLL_HEADER_TEMPLATE",
            "type": "{HTML}",
            "value": "'<table cellspacing=\"0\" role=\"presentation\" aria-hidden=\"true\" class=\"{className}\"></table>'",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 181,
            "description": "Template for the `<div>` that is used to contain the rows when the table is\nvertically scrolling.",
            "itemtype": "property",
            "name": "_Y_SCROLLER_TEMPLATE",
            "type": "{HTML}",
            "value": "'<div class=\"{className}\"><div class=\"{scrollerClassName}\"></div></div>'",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 193,
            "description": "Adds padding to the last cells in the fixed header for vertically scrolling\ntables.  This padding is equal in width to the scrollbar, so can't be\nrelegated to a stylesheet.",
            "itemtype": "method",
            "name": "_addScrollbarPadding",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 218,
            "description": "Reacts to changes in the `scrollable` attribute by updating the `_xScroll`\nand `_yScroll` properties and syncing the scrolling structure accordingly.",
            "itemtype": "method",
            "name": "_afterScrollableChange",
            "params": [
                {
                    "name": "e",
                    "description": "The relevant change event (ignored)",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 242,
            "description": "Reacts to changes in the `caption` attribute by adding, removing, or\nsyncing the caption table when the table is set to scroll.",
            "itemtype": "method",
            "name": "_afterScrollCaptionChange",
            "params": [
                {
                    "name": "e",
                    "description": "The relevant change event (ignored)",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 257,
            "description": "Reacts to changes in the `columns` attribute of vertically scrolling tables\nby refreshing the fixed headers, scroll container, and virtual scrollbar\nposition.",
            "itemtype": "method",
            "name": "_afterScrollColumnsChange",
            "params": [
                {
                    "name": "e",
                    "description": "The relevant change event (ignored)",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 277,
            "description": "Reacts to changes in vertically scrolling table's `data` ModelList by\nsynchronizing the fixed column header widths and virtual scrollbar height.",
            "itemtype": "method",
            "name": "_afterScrollDataChange",
            "params": [
                {
                    "name": "e",
                    "description": "The relevant change event (ignored)",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 292,
            "description": "Reacts to changes in the `height` attribute of vertically scrolling tables\nby updating the height of the `<div>` wrapping the data table and the\nvirtual scrollbar.  If `scrollable` was set to \"y\" or \"xy\" but lacking a\ndeclared `height` until the received change, `_syncScrollUI` is called to\ncreate the fixed headers etc.",
            "itemtype": "method",
            "name": "_afterScrollHeightChange",
            "params": [
                {
                    "name": "e",
                    "description": "The relevant change event (ignored)",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 331,
            "description": "Reacts to changes in the width of scrolling tables by expanding the width of\nthe `<div>` wrapping the data table for horizontally scrolling tables or\nupding the position of the virtual scrollbar for vertically scrolling\ntables.",
            "itemtype": "method",
            "name": "_afterScrollWidthChange",
            "params": [
                {
                    "name": "e",
                    "description": "The relevant change event (ignored)",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 348,
            "description": "Binds virtual scrollbar interaction to the `_yScrollNode`'s `scrollTop` and\nvice versa.",
            "itemtype": "method",
            "name": "_bindScrollbar",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 368,
            "description": "Binds to the window resize event to update the vertical scrolling table\nheaders and wrapper `<div>` dimensions.",
            "itemtype": "method",
            "name": "_bindScrollResize",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 385,
            "description": "Attaches internal subscriptions to keep the scrolling structure up to date\nwith changes in the table's `data`, `columns`, `caption`, or `height`.  The\n`width` is taken care of already.\n\nThis executes after the table's native `bindUI` method.",
            "itemtype": "method",
            "name": "_bindScrollUI",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 413,
            "description": "Clears the lock and timer used to manage synchronizing the scroll position\nbetween the vertical scroll container and the virtual scrollbar.",
            "itemtype": "method",
            "name": "_clearScrollLock",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 428,
            "description": "Creates a virtual scrollbar from the `_SCROLLBAR_TEMPLATE`, assigning it to\nthe `_scrollbarNode` property.",
            "itemtype": "method",
            "name": "_createScrollbar",
            "return": {
                "description": "The created Node",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 454,
            "description": "Creates a separate table to contain the caption when the table is\nconfigured to scroll vertically or horizontally.",
            "itemtype": "method",
            "name": "_createScrollCaptionTable",
            "return": {
                "description": "The created Node",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 476,
            "description": "Populates the `_xScrollNode` property by creating the `<div>` Node described\nby the `_X_SCROLLER_TEMPLATE`.",
            "itemtype": "method",
            "name": "_createXScrollNode",
            "return": {
                "description": "The created Node",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 496,
            "description": "Populates the `_yScrollHeader` property by creating the `<table>` Node\ndescribed by the `_Y_SCROLL_HEADER_TEMPLATE`.",
            "itemtype": "method",
            "name": "_createYScrollHeader",
            "return": {
                "description": "The created Node",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 518,
            "description": "Populates the `_yScrollNode` property by creating the `<div>` Node described\nby the `_Y_SCROLLER_TEMPLATE`.",
            "itemtype": "method",
            "name": "_createYScrollNode",
            "return": {
                "description": "The created Node",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 546,
            "description": "Removes the nodes used to create horizontal and vertical scrolling and\nrejoins the caption to the main table if needed.",
            "itemtype": "method",
            "name": "_disableScrolling",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 563,
            "description": "Removes the nodes used to allow horizontal scrolling.",
            "itemtype": "method",
            "name": "_disableXScrolling",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 574,
            "description": "Removes the nodes used to allow vertical scrolling.",
            "itemtype": "method",
            "name": "_disableYScrolling",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 588,
            "description": "Cleans up external event subscriptions.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 601,
            "description": "Sets up event handlers and AOP advice methods to bind the DataTable's natural\nbehaviors with the scrolling APIs and state.",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "The config object passed to the constructor (ignored)",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 621,
            "description": "Removes the table used to house the caption when the table is scrolling.",
            "itemtype": "method",
            "name": "_removeScrollCaptionTable",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 640,
            "description": "Removes the `<div>` wrapper used to contain the data table when the table\nis horizontally scrolling.",
            "itemtype": "method",
            "name": "_removeXScrollNode",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 659,
            "description": "Removes the `<div>` wrapper used to contain the data table and fixed header\nwhen the table is vertically scrolling.",
            "itemtype": "method",
            "name": "_removeYScrollContainer",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 678,
            "description": "Removes the `<table>` used to contain the fixed column headers when the\ntable is vertically scrolling.",
            "itemtype": "method",
            "name": "_removeYScrollHeader",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 694,
            "description": "Removes the `<div>` wrapper used to contain the data table when the table\nis vertically scrolling.",
            "itemtype": "method",
            "name": "_removeYScrollNode",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 713,
            "description": "Removes the virtual scrollbar used by scrolling tables.",
            "itemtype": "method",
            "name": "_removeScrollbar",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 733,
            "description": "Accepts (case insensitive) values \"x\", \"y\", \"xy\", `true`, and `false`.\n`true` is translated to \"xy\" and upper case values are converted to lower\ncase.  All other values are invalid.",
            "itemtype": "method",
            "name": "_setScrollable",
            "params": [
                {
                    "name": "val",
                    "description": "Incoming value for the `scrollable` attribute",
                    "type": "String|Boolea"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 758,
            "description": "Assigns the `_xScroll` and `_yScroll` properties to true if an\nappropriate value is set in the `scrollable` attribute and the `height`\nand/or `width` is set.",
            "itemtype": "method",
            "name": "_setScrollProperties",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 776,
            "description": "Keeps the virtual scrollbar and the scrolling `<div>` wrapper around the\ndata table in vertically scrolling tables in sync.",
            "itemtype": "method",
            "name": "_syncScrollPosition",
            "params": [
                {
                    "name": "e",
                    "description": "The scroll event",
                    "type": "DOMEventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 805,
            "description": "Splits the caption from the data `<table>` if the table is configured to\nscroll.  If not, rejoins the caption to the data `<table>` if it needs to\nbe.",
            "itemtype": "method",
            "name": "_syncScrollCaptionUI",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 844,
            "description": "Assigns widths to the fixed header columns to match the columns in the data\ntable.",
            "itemtype": "method",
            "name": "_syncScrollColumnWidths",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 886,
            "description": "Creates matching headers in the fixed header table for vertically scrolling\ntables and synchronizes the column widths.",
            "itemtype": "method",
            "name": "_syncScrollHeaders",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 934,
            "description": "Wraps the table for X and Y scrolling, if necessary, if the `scrollable`\nattribute is set.  Synchronizes dimensions and DOM placement of all\nscrolling related nodes.",
            "itemtype": "method",
            "name": "_syncScrollUI",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 995,
            "description": "Wraps the table in a scrolling `<div>` of the configured width for \"x\"\nscrolling.",
            "itemtype": "method",
            "name": "_syncXScrollUI",
            "params": [
                {
                    "name": "xy",
                    "description": "True if the table is configured with scrollable =\"xy\"",
                    "type": "Boolean"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1064,
            "description": "Wraps the table in a scrolling `<div>` of the configured height (accounting\nfor the caption if there is one) if \"y\" scrolling is enabled.  Otherwise,\nunwraps the table if necessary.",
            "itemtype": "method",
            "name": "_syncYScrollUI",
            "params": [
                {
                    "name": "xy",
                    "description": "True if the table is configured with scrollable = \"xy\"",
                    "type": "Boolean"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1164,
            "description": "Assigns the appropriate class to the `boundingBox` to identify the DataTable\nas horizontally scrolling, vertically scrolling, or both (adds both classes).\n\nClasses added are \"yui3-datatable-scrollable-x\" or \"...-y\"",
            "itemtype": "method",
            "name": "_uiSetScrollable",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1180,
            "description": "Updates the virtual scrollbar's height to avoid overlapping with the fixed\nheaders.",
            "itemtype": "method",
            "name": "_uiSetScrollbarHeight",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1203,
            "description": "Updates the virtual scrollbar's placement to avoid overlapping the fixed\nheaders or the data table.",
            "itemtype": "method",
            "name": "_uiSetScrollbarPosition",
            "params": [
                {
                    "name": "scroller",
                    "description": "Reference node to position the scrollbar over",
                    "type": "Node"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1238,
            "description": "Assigns the width of the `<div>` wrapping the data table in vertically\nscrolling tables.\n\nIf the table can't compress to the specified width, the container is\nexpanded accordingly.",
            "itemtype": "method",
            "name": "_uiSetYScrollWidth",
            "params": [
                {
                    "name": "width",
                    "description": "The CSS width to attempt to set",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1294,
            "description": "Detaches the scroll event subscriptions used to maintain scroll position\nparity between the scrollable `<div>` wrapper around the data table and the\nvirtual scrollbar for vertically scrolling tables.",
            "itemtype": "method",
            "name": "_unbindScrollbar",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1309,
            "description": "Detaches the resize event subscription used to maintain column parity for\nvertically scrolling tables with percentage widths.",
            "itemtype": "method",
            "name": "_unbindScrollResize",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1324,
            "description": "Indicates horizontal table scrolling is enabled.",
            "itemtype": "property",
            "name": "_xScroll",
            "type": "{Boolean}",
            "default": "undefined (not initially set)",
            "access": "private",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1335,
            "description": "Indicates vertical table scrolling is enabled.",
            "itemtype": "property",
            "name": "_yScroll",
            "type": "{Boolean}",
            "default": "undefined (not initially set)",
            "access": "private",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1346,
            "description": "Fixed column header `<table>` Node for vertical scrolling tables.",
            "itemtype": "property",
            "name": "_yScrollHeader",
            "type": "{Node}",
            "default": "undefined (not initially set)",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1357,
            "description": "Overflow Node used to contain the data rows in a vertically scrolling table.",
            "itemtype": "property",
            "name": "_yScrollNode",
            "type": "{Node}",
            "default": "undefined (not initially set)",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/scroll.js",
            "line": 1368,
            "description": "Overflow Node used to contain the table headers and data in a horizontally\nscrolling table.",
            "itemtype": "property",
            "name": "_xScrollNode",
            "type": "{Node}",
            "default": "undefined (not initially set)",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "js/sort.js",
            "line": 112,
            "description": "Controls which column headers can trigger sorting by user clicks.\n\nAcceptable values are:\n\n * \"auto\" - (default) looks for `sortable: true` in the column configurations\n * `true` - all columns are enabled\n * `false - no UI sortable is enabled\n * {String[]} - array of key names to give sortable headers",
            "itemtype": "attribute",
            "name": "sortable",
            "type": "{String|String[]|Boolean}",
            "default": "\"auto\"",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 132,
            "description": "The current sort configuration to maintain in the data.\n\nAccepts column `key` strings or objects with a single property, the column\n`key`, with a value of 1, -1, \"asc\", or \"desc\".  E.g. `{ username: 'asc'\n}`.  String values are assumed to be ascending.\n\nExample values would be:\n\n * `\"username\"` - sort by the data's `username` field or the `key`\n   associated to a column with that `name`.\n * `{ username: \"desc\" }` - sort by `username` in descending order.\n   Alternately, use values \"asc\", 1 (same as \"asc\"), or -1 (same as \"desc\").\n * `[\"lastName\", \"firstName\"]` - ascending sort by `lastName`, but for\n   records with the same `lastName`, ascending subsort by `firstName`.\n   Array can have as many items as you want.\n * `[{ lastName: -1 }, \"firstName\"]` - descending sort by `lastName`,\n   ascending subsort by `firstName`. Mixed types are ok.",
            "itemtype": "attribute",
            "name": "sortBy",
            "type": "{String|String[]|Object|Object[]}",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 160,
            "description": "Strings containing language for sorting tooltips.",
            "itemtype": "attribute",
            "name": "strings",
            "type": "{Object}",
            "default": "(strings for current lang configured in the YUI instance config)",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 173,
            "description": "Sort the data in the `data` ModelList and refresh the table with the new\norder.\n\nAcceptable values for `fields` are `key` strings or objects with a single\nproperty, the column `key`, with a value of 1, -1, \"asc\", or \"desc\".  E.g.\n`{ username: 'asc' }`.  String values are assumed to be ascending.\n\nExample values would be:\n\n * `\"username\"` - sort by the data's `username` field or the `key`\n   associated to a column with that `name`.\n * `{ username: \"desc\" }` - sort by `username` in descending order.\n   Alternately, use values \"asc\", 1 (same as \"asc\"), or -1 (same as \"desc\").\n * `[\"lastName\", \"firstName\"]` - ascending sort by `lastName`, but for\n   records with the same `lastName`, ascending subsort by `firstName`.\n   Array can have as many items as you want.\n * `[{ lastName: -1 }, \"firstName\"]` - descending sort by `lastName`,\n   ascending subsort by `firstName`. Mixed types are ok.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "fields",
                    "description": "The field(s) to sort by",
                    "type": "String|String[]|Object|Object[]"
                },
                {
                    "name": "payload",
                    "description": "Extra `sort` event payload you want to send along",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 201,
            "description": "Notifies of an impending sort, either from clicking on a column\nheader, or from a call to the `sort` or `toggleSort` method.\n\nThe requested sort is available in the `sortBy` property of the event.\n\nThe default behavior of this event sets the table's `sortBy` attribute.",
            "itemtype": "event",
            "name": "sort",
            "params": [
                {
                    "name": "sortBy",
                    "description": "The requested sort",
                    "type": "String|String[]|Object|Object[]"
                }
            ],
            "preventable": "_defSortFn",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 218,
            "description": "Template for the node that will wrap the header content for sortable\ncolumns.",
            "itemtype": "property",
            "name": "SORTABLE_HEADER_TEMPLATE",
            "type": "{HTML}",
            "value": "'<div class=\"{className}\" tabindex=\"0\"><span class=\"{indicatorClass}\"></span></div>'",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 229,
            "description": "Reverse the current sort direction of one or more fields currently being\nsorted by.\n\nPass the `key` of the column or columns you want the sort order reversed\nfor.",
            "itemtype": "method",
            "name": "toggleSort",
            "params": [
                {
                    "name": "fields",
                    "description": "The field(s) to reverse sort order for",
                    "type": "String|String[]"
                },
                {
                    "name": "payload",
                    "description": "Extra `sort` event payload you want to send along",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 288,
            "description": "Sorts the `data` ModelList based on the new `sortBy` configuration.",
            "itemtype": "method",
            "name": "_afterSortByChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `sortByChange` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 313,
            "description": "Applies the sorting logic to the new ModelList if the `newVal` is a new\nModelList.",
            "itemtype": "method",
            "name": "_afterSortDataChange",
            "params": [
                {
                    "name": "e",
                    "description": "the `dataChange` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 332,
            "description": "Checks if any of the fields in the modified record are fields that are\ncurrently being sorted by, and if so, resorts the `data` ModelList.",
            "itemtype": "method",
            "name": "_afterSortRecordChange",
            "params": [
                {
                    "name": "e",
                    "description": "The Model's `change` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 352,
            "description": "Subscribes to state changes that warrant updating the UI, and adds the\nclick handler for triggering the sort operation from the UI.",
            "itemtype": "method",
            "name": "_bindSortUI",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 376,
            "description": "Sets the `sortBy` attribute from the `sort` event's `e.sortBy` value.",
            "itemtype": "method",
            "name": "_defSortFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `sort` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 388,
            "description": "Getter for the `sortBy` attribute.\n\nSupports the special subattribute \"sortBy.state\" to get a normalized JSON\nversion of the current sort state.  Otherwise, returns the last assigned\nvalue.\n\nFor example:\n\n<pre><code>var table = new Y.DataTable({\n    columns: [ ... ],\n    data: [ ... ],\n    sortBy: 'username'\n});\n\ntable.get('sortBy'); // 'username'\ntable.get('sortBy.state'); // { key: 'username', dir: 1 }\n\ntable.sort(['lastName', { firstName: \"desc\" }]);\ntable.get('sortBy'); // ['lastName', { firstName: \"desc\" }]\ntable.get('sortBy.state'); // [{ key: \"lastName\", dir: 1 }, { key: \"firstName\", dir: -1 }]\n</code></pre>",
            "itemtype": "method",
            "name": "_getSortBy",
            "params": [
                {
                    "name": "val",
                    "description": "The current sortBy value",
                    "type": "String|String[]|Object|Object[]"
                },
                {
                    "name": "detail",
                    "description": "String passed to `get(HERE)`. to parse subattributes",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 442,
            "description": "Sets up the initial sort state and instance properties.  Publishes events\nand subscribes to attribute change events to maintain internal state.",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 477,
            "description": "Creates a `_compare` function for the `data` ModelList to allow custom\nsorting by multiple fields.",
            "itemtype": "method",
            "name": "_initSortFn",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 532,
            "description": "Add the sort related strings to the `strings` map.",
            "itemtype": "method",
            "name": "_initSortStrings",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 545,
            "description": "Fires the `sort` event in response to user clicks on sortable column\nheaders.",
            "itemtype": "method",
            "name": "_onUITriggerSort",
            "params": [
                {
                    "name": "e",
                    "description": "The `click` event",
                    "type": "DOMEventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 595,
            "description": "Normalizes the possible input values for the `sortable` attribute, storing\nthe results in the `_sortable` property.",
            "itemtype": "method",
            "name": "_parseSortable",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 637,
            "description": "Initial application of the sortable UI.",
            "itemtype": "method",
            "name": "_renderSortable",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 650,
            "description": "Parses the current `sortBy` attribute into a normalized structure for the\n`data` ModelList's `_compare` method.  Also updates the column\nconfigurations' `sortDir` properties.",
            "itemtype": "method",
            "name": "_setSortBy",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 718,
            "description": "Array of column configuration objects of those columns that need UI setup\nfor user interaction.",
            "itemtype": "property",
            "name": "_sortable",
            "type": "{Object[]}",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 729,
            "description": "Array of column configuration objects for those columns that are currently\nbeing used to sort the data.  Fake column objects are used for fields that\nare not rendered as columns.",
            "itemtype": "property",
            "name": "_sortBy",
            "type": "{Object[]}",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 741,
            "description": "Replacement `comparator` for the `data` ModelList that defers sorting logic\nto the `_compare` method.  The deferral is accomplished by returning `this`.",
            "itemtype": "method",
            "name": "_sortComparator",
            "params": [
                {
                    "name": "item",
                    "description": "The record being evaluated for sort position",
                    "type": "Model"
                }
            ],
            "return": {
                "description": "The record",
                "type": "Model"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 756,
            "description": "Applies the appropriate classes to the `boundingBox` and column headers to\nindicate sort state and sortability.\n\nAlso currently wraps the header content of sortable columns in a `<div>`\nliner to give a CSS anchor for sort indicators.",
            "itemtype": "method",
            "name": "_uiSetSortable",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 858,
            "description": "Allows values `true`, `false`, \"auto\", or arrays of column names through.",
            "itemtype": "method",
            "name": "_validateSortable",
            "params": [
                {
                    "name": "val",
                    "description": "The input value to `set(\"sortable\", VAL)`",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/sort.js",
            "line": 871,
            "description": "Allows strings, arrays of strings, objects, or arrays of objects.",
            "itemtype": "method",
            "name": "_validateSortBy",
            "params": [
                {
                    "name": "val",
                    "description": "The new `sortBy` value",
                    "type": "String|String[]|Object|Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable",
            "module": "datatable",
            "submodule": "datatable-sort"
        },
        {
            "file": "js/table.js",
            "line": 29,
            "description": "The HTML template used to create the caption Node if the `caption`\nattribute is set.",
            "itemtype": "property",
            "name": "CAPTION_TEMPLATE",
            "type": "{HTML}",
            "default": "'<caption class=\"{className}\"/>'",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 40,
            "description": "The HTML template used to create the table Node.",
            "itemtype": "property",
            "name": "TABLE_TEMPLATE",
            "type": "{HTML}",
            "default": "'<table cellspacing=\"0\" class=\"{className}\"/>'",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 50,
            "description": "The object or instance of the class assigned to `bodyView` that is\nresponsible for rendering and managing the table's `<tbody>`(s) and its\ncontent.",
            "itemtype": "property",
            "name": "body",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 62,
            "description": "The object or instance of the class assigned to `footerView` that is\nresponsible for rendering and managing the table's `<tfoot>` and its\ncontent.",
            "itemtype": "property",
            "name": "foot",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 74,
            "description": "The object or instance of the class assigned to `headerView` that is\nresponsible for rendering and managing the table's `<thead>` and its\ncontent.",
            "itemtype": "property",
            "name": "head",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 90,
            "description": "Returns the `<td>` Node from the given row and column index.  Alternately,\nthe `seed` can be a Node.  If so, the nearest ancestor cell is returned.\nIf the `seed` is a cell, it is returned.  If there is no cell at the given\ncoordinates, `null` is returned.\n\nOptionally, include an offset array or string to return a cell near the\ncell identified by the `seed`.  The offset can be an array containing the\nnumber of rows to shift followed by the number of columns to shift, or one\nof \"above\", \"below\", \"next\", or \"previous\".\n\n<pre><code>// Previous cell in the previous row\nvar cell = table.getCell(e.target, [-1, -1]);\n\n// Next cell\nvar cell = table.getCell(e.target, 'next');\nvar cell = table.getCell(e.taregt, [0, 1];</pre></code>\n\nThis is actually just a pass through to the `bodyView` instance's method\nby the same name.",
            "itemtype": "method",
            "name": "getCell",
            "params": [
                {
                    "name": "seed",
                    "description": "Array of row and column indexes, or a Node that\n    is either the cell itself or a descendant of one.",
                    "type": "Number[]|Node"
                },
                {
                    "name": "shift",
                    "description": "Offset by which to identify the returned\n    cell Node",
                    "type": "Number[]|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 124,
            "description": "Returns the generated CSS classname based on the input.  If the `host`\nattribute is configured, it will attempt to relay to its `getClassName`\nor use its static `NAME` property as a string base.\n\nIf `host` is absent or has neither method nor `NAME`, a CSS classname\nwill be generated using this class's `NAME`.",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "token",
                    "description": "Any number of token strings to assemble the\n    classname from.",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 153,
            "description": "Relays call to the `bodyView`'s `getRecord` method if it has one.",
            "itemtype": "method",
            "name": "getRecord",
            "params": [
                {
                    "name": "seed",
                    "description": "Node or identifier for a row or child element",
                    "type": "String|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Model"
            },
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 166,
            "description": "Returns the `<tr>` Node from the given row index, Model, or Model's\n`clientId`.  If the rows haven't been rendered yet, or if the row can't be\nfound by the input, `null` is returned.\n\nThis is actually just a pass through to the `bodyView` instance's method\nby the same name.",
            "itemtype": "method",
            "name": "getRow",
            "params": [
                {
                    "name": "id",
                    "description": "Row index, Model instance, or clientId",
                    "type": "Number|String|Model"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 188,
            "description": "Updates the table's `summary` attribute.",
            "itemtype": "method",
            "name": "_afterSummaryChange",
            "params": [
                {
                    "name": "e",
                    "description": "The change event",
                    "type": "EventHandle"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 200,
            "description": "Updates the table's `<caption>`.",
            "itemtype": "method",
            "name": "_afterCaptionChange",
            "params": [
                {
                    "name": "e",
                    "description": "The change event",
                    "type": "EventHandle"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 212,
            "description": "Updates the table's width.",
            "itemtype": "method",
            "name": "_afterWidthChange",
            "params": [
                {
                    "name": "e",
                    "description": "The change event",
                    "type": "EventHandle"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 224,
            "description": "Attaches event subscriptions to relay attribute changes to the child Views.",
            "itemtype": "method",
            "name": "_bindUI",
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 247,
            "description": "Creates the `<table>`.",
            "itemtype": "method",
            "name": "_createTable",
            "return": {
                "description": "The `<table>` node",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 261,
            "description": "Calls `render()` on the `bodyView` class instance.",
            "itemtype": "method",
            "name": "_defRenderBodyFn",
            "params": [
                {
                    "name": "e",
                    "description": "The renderBody event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 273,
            "description": "Calls `render()` on the `footerView` class instance.",
            "itemtype": "method",
            "name": "_defRenderFooterFn",
            "params": [
                {
                    "name": "e",
                    "description": "The renderFooter event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 285,
            "description": "Calls `render()` on the `headerView` class instance.",
            "itemtype": "method",
            "name": "_defRenderHeaderFn",
            "params": [
                {
                    "name": "e",
                    "description": "The renderHeader event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 297,
            "description": "Renders the `<table>` and, if there are associated Views, the `<thead>`,\n`<tfoot>`, and `<tbody>` (empty until `syncUI`).\n\nAssigns the generated table nodes to the `tableNode`, `_theadNode`,\n`_tfootNode`, and `_tbodyNode` properties.  Assigns the instantiated Views\nto the `head`, `foot`, and `body` properties.",
            "itemtype": "method",
            "name": "_defRenderTableFn",
            "params": [
                {
                    "name": "e",
                    "description": "The renderTable event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 360,
            "description": "Cleans up state, destroys child views, etc.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 392,
            "description": "Processes the full column array, distilling the columns down to those that\ncorrespond to cell data columns.",
            "itemtype": "method",
            "name": "_extractDisplayColumns",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 421,
            "description": "Array of the columns that correspond to those with value cells in the\ndata rows. Excludes colspan header columns (configured with `children`).",
            "itemtype": "property",
            "name": "displayColumns",
            "type": "{Object[]}",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 432,
            "description": "Publishes core events.",
            "itemtype": "method",
            "name": "_initEvents",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 449,
            "description": "Constructor logic.",
            "itemtype": "method",
            "name": "intializer",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration object passed to the constructor",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 467,
            "description": "Relays attribute changes to the child Views.",
            "itemtype": "method",
            "name": "_relayAttrChange",
            "params": [
                {
                    "name": "e",
                    "description": "The change event",
                    "type": "EventHandle"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 496,
            "description": "Creates the UI in the configured `container`.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "",
                "type": "TableView"
            },
            "chainable": 1,
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 520,
            "description": "Creates, removes, or updates the table's `<caption>` element per the input\nvalue.  Empty values result in the caption being removed.",
            "itemtype": "method",
            "name": "_uiSetCaption",
            "params": [
                {
                    "name": "htmlContent",
                    "description": "The content to populate the table caption",
                    "type": "HTML"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 552,
            "description": "Updates the table's `summary` attribute with the input value.",
            "itemtype": "method",
            "name": "_uiSetSummary",
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 567,
            "description": "Sets the `boundingBox` and table width per the input value.",
            "itemtype": "method",
            "name": "_uiSetWidth",
            "params": [
                {
                    "name": "width",
                    "description": "The width to make the table",
                    "type": "Number|String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 588,
            "description": "Ensures that the input is a View class or at least has a `render` method.",
            "itemtype": "method",
            "name": "_validateView",
            "params": [
                {
                    "name": "val",
                    "description": "The View class",
                    "type": "View|Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 601,
            "description": "Content for the `<table summary=\"ATTRIBUTE VALUE HERE\">`.  Values\nassigned to this attribute will be HTML escaped for security.",
            "itemtype": "attribute",
            "name": "summary",
            "type": "{String}",
            "default": "'' (empty string)",
            "since": "3.5.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 612,
            "description": "HTML content of an optional `<caption>` element to appear above the\ntable.  Leave this config unset or set to a falsy value to remove the\ncaption.",
            "itemtype": "attribute",
            "name": "caption",
            "type": "HTML",
            "default": "undefined (initially unset)",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 624,
            "description": "Columns to include in the rendered table.\n\nThis attribute takes an array of objects. Each object is considered a\ndata column or header cell to be rendered.  How the objects are\ntranslated into markup is delegated to the `headerView`, `bodyView`,\nand `footerView`.\n\nThe raw value is passed to the `headerView` and `footerView`.  The\n`bodyView` receives the instance's `displayColumns` array, which is\nparsed from the columns array.  If there are no nested columns (columns\nconfigured with a `children` array), the `displayColumns` is the same\nas the raw value.",
            "itemtype": "attribute",
            "name": "columns",
            "type": "{Object[]}",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 646,
            "description": "Width of the table including borders.  This value requires units, so\n`200` is invalid, but `'200px'` is valid.  Setting the empty string\n(the default) will allow the browser to set the table width.",
            "itemtype": "attribute",
            "name": "width",
            "type": "{String}",
            "default": "''",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 661,
            "description": "An instance of this class is used to render the contents of the\n`<thead>`&mdash;the column headers for the table.\n\nThe instance of this View will be assigned to the instance's `head`\nproperty.\n\nIt is not strictly necessary that the class function assigned here be\na View subclass.  It must however have a `render()` method.",
            "itemtype": "attribute",
            "name": "headerView",
            "type": "{Function|Object}",
            "default": "Y.DataTable.HeaderView",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 681,
            "description": "Configuration overrides used when instantiating the `headerView`\ninstance.",
            "itemtype": "attribute",
            "name": "headerConfig",
            "type": "{Object}",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 691,
            "description": "An instance of this class is used to render the contents of the\n`<tfoot>` (if appropriate).\n\nThe instance of this View will be assigned to the instance's `foot`\nproperty.\n\nIt is not strictly necessary that the class function assigned here be\na View subclass.  It must however have a `render()` method.",
            "itemtype": "attribute",
            "name": "footerView",
            "type": "{Function|Object}",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 709,
            "description": "Configuration overrides used when instantiating the `footerView`\ninstance.",
            "itemtype": "attribute",
            "name": "footerConfig",
            "type": "{Object}",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 719,
            "description": "An instance of this class is used to render the contents of the table's\n`<tbody>`&mdash;the data cells in the table.\n\nThe instance of this View will be assigned to the instance's `body`\nproperty.\n\nIt is not strictly necessary that the class function assigned here be\na View subclass.  It must however have a `render()` method.",
            "itemtype": "attribute",
            "name": "bodyView",
            "type": "{Function|Object}",
            "default": "Y.DataTable.BodyView",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        },
        {
            "file": "js/table.js",
            "line": 739,
            "description": "Configuration overrides used when instantiating the `bodyView`\ninstance.",
            "itemtype": "attribute",
            "name": "bodyConfig",
            "type": "{Object}",
            "since": "3.6.0",
            "class": "DataTable.TableView",
            "module": "datatable",
            "submodule": "datatable-table",
            "namespace": "DataTable"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nThe example code looks for chkbox.on('click')... attr checked == true\nIE doesn't set attr checked with a click\nIn non-IE, if you set checked to true then also click it checked == false (it seems)",
            "line": " docs/assets/datatable-chkboxselect-tests.js:6"
        }
    ]
}