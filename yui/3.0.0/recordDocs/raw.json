{"majorversion": 2, "classmap": {"FieldDefSet": {"name": "FieldDefSet", "constructors": [{"params": [{"type": "FieldDef or object", "name": "defs", "description": "  Initial set of definitions"}, {"type": "FieldDef", "name": "_parent", "description": "  (private) Reference to the parent definition of this collection"}], "description": "Collection of FieldDef instances"}], "namespace": "", "module": "recordset", "guessedname": "FieldDefSet", "methods": {"traverse": {"params": [{"type": "string", "name": "method", "description": "  Any of the following constants: <ul>\n<li><code>FieldDefSet.TRAVERSE_SHALLOW</code> fieldDefs are traversed by level, useful for building HTML table headers</li>\n<li><code>FieldDefSet.TRAVERSE_DEEP</code> fieldDefs are traversed going deep into each branch before going to the next, \nuseful for building HTML forms with nested fieldSets.</li>\n<li><code>FieldDefSet.TRAVERSE_LEAVES</code> only fieldDefs which have no children, lists only the ones that store data</li>\n</ul>"}, {"type": "function", "name": "fn", "description": "  Function to be called for each field definition.\nIt will receive: <ul>\n<li><code>fieldDef</code> Definition for each field</li>\n<li><code>depth</code> Level of nesting of this definition</li>\n</ul>"}, {"type": "object", "name": "context", "description": "  (optional) Context to execute the function in (defaults to this FieldDefSet instance)"}, {"type": "integer", "name": "_depth", "description": "  (private) Used to keep track of the depth in recursive calling."}], "description": "Traverses the field definitions tree in several ways, calling the provided function for each field definition.\nTraversing is done in the order in which the definitions were added, unless added with explicit indices.", "guessedname": "traverse", "guessedtype": "function"}, "getDepth": {"return": {"type": "integer", "description": "Total depth of the whole tree"}, "description": "Returns the total nesting level of the whole tree.", "guessedname": "getDepth", "guessedtype": "function"}, "get": {"return": {"type": "any", "description": "value for that definition or Y.Attribute.INVALID_VALUE if no such field is found."}, "params": [{"type": "string", "name": "name", "description": "  Name of the field"}, {"type": "string", "name": "key", "description": "  Name of the definition"}], "description": "Returns the value of a definition for a given field", "guessedname": "get", "guessedtype": "function"}, "_init": {"params": [{"type": "FieldDef or object", "name": "defs", "description": "  Initial set of definitions"}, {"type": "FieldDef", "name": "_parent", "description": "  (private) Reference to the parent definition of this collection"}], "description": "Initialization method (called by constructor)", "guessedname": "_init", "guessedtype": "function"}, "item": {"return": {"type": "FieldDef", "description": "Definition for that field"}, "params": [{"type": "string", "name": "name", "description": "  Name of the field definition sought"}], "description": "Returns the FieldDef with the given name", "guessedname": "item", "guessedtype": "function"}, "add": {"params": [{"type": "object or FieldDef", "name": "item", "description": "  FieldDef to add or object literal to convert to a FieldDef and add"}, {"type": "integer", "name": "index", "description": "  Position to add this item at (at the end if missing)"}], "description": "Adds a field definition at a given position, if provided", "guessedname": "add", "guessedtype": "function"}, "set": {"params": [{"type": "string", "name": "name", "description": "  name of the field whose definition is to be set"}, {"type": "string", "name": "key", "description": "  name of the definition to be set"}, {"type": "any", "name": "value", "description": "  value to be set"}], "description": "Adds or create a field definition and sets the value for a particular key.\nFieldDefs are sought by name at any depth in the definitions tree, but if it doesn't exist, \nit will be created in this set.", "guessedname": "set", "guessedtype": "function"}, "isEmpty": {"return": {"type": "Boolean", "description": ""}, "description": "True if this set has no definitions", "guessedname": "isEmpty", "guessedtype": "function"}, "each": {"params": [{"type": "function", "name": "fn", "description": "  Function to be called for each field definition.\nIt will receive: <ul>\n<li><code>fieldDef</code> Definition for each field</li>\n<li><code>depth</code> Level of nesting of this definition</li>\n</ul>"}, {"type": "object", "name": "context", "description": "  (optional) Context to execute the function in (defaults to this FieldDefSet instance)"}], "description": "Shortcut to traverse leaves, that is, definitions for fields containing data.", "guessedname": "each", "guessedtype": "function"}, "size": {"return": {"type": "integer", "description": "number of definitions"}, "description": "Returns the number of definitions contained in this set at this level", "guessedname": "size", "guessedtype": "function"}}, "file": "record.js", "guessedtype": "function", "shortname": "FieldDefSet", "properties": {"FieldDefSet.TRAVERSE_LEAVES": {"type": "string", "static": "", "description": "Constant to indicate <a href=\"#method_traverse\">traversal</a> method", "guessedname": "TRAVERSE_LEAVES", "guessedtype": "property"}, "_totalDepth": {"propery": "_totalDepth", "description": "Number of levels of nesting. Valid only on the root FieldDefSet.", "default": "0", "private": "", "guessedname": "_totalDepth", "guessedtype": "property", "type": "integer"}, "_root": {"description": "Reference to the top-most FieldDefSet instance", "default": "null", "private": "", "guessedname": "_root", "guessedtype": "property", "type": "FieldDefs"}, "FieldDefSet.TRAVERSE_SHALLOW": {"type": "string", "static": "", "description": "Constant to indicate <a href=\"#method_traverse\">traversal</a> method", "guessedname": "TRAVERSE_SHALLOW", "guessedtype": "property"}, "_parent": {"description": "Reference to the FieldDef instance this set is a child of", "default": "null", "private": "", "guessedname": "_parent", "guessedtype": "property", "type": "FieldDef"}, "_keys": {"propery": "_keys", "description": "Collection of FieldDef indexed by name.  Valid only on the root FieldDefSet.", "default": "{}", "private": "", "guessedname": "_keys", "guessedtype": "property", "type": "object"}, "FieldDefSet.TRAVERSE_DEEP": {"type": "string", "static": "", "description": "Constant to indicate <a href=\"#method_traverse\">traversal</a> method", "guessedname": "TRAVERSE_DEEP", "guessedtype": "property"}, "_items": {"description": "Array containing the names of the fields in this level. \nIt is this array that gives the order of the fields when traversing them", "default": "[]", "private": "", "guessedname": "_items", "guessedtype": "property", "type": "[strings]"}}, "description": "Collection of FieldDef instances"}, "DataType.Converters": {"name": "DataType.Converters", "namespace": "", "module": "recordset", "file": "record.js", "shortname": "DataType.Converters", "properties": {"DataType.Converters.dmyDate": {"type": "object", "static": "", "description": "Converters for dates used in DD/MM/YYYY format.\nActually, this should use localized formatters and parsers, but DataType.Date.parse does not take locales.", "guessedname": "dmyDate", "guessedtype": "property"}, "DataType.Converters.dmyDate.parser": {"type": "function", "static": "", "description": "Parses a date in DD/MM/YYYY format into a Date() object instance", "guessedname": "parser", "guessedtype": "function"}, "DataType.Converters.SQLDate.formatter": {"type": "function", "static": "", "description": "Formats a Date() object instance into a date in SQL format  YYYY-MM-DD hh:mm:ss", "guessedname": "formatter", "guessedtype": "function"}, "DataType.Converters.SQLDate.parser": {"type": "function", "static": "", "description": "Parses a date in SQL format  YYYY-MM-DD hh:mm:ss (the time being optional) into a Date() object instance", "guessedname": "parser", "guessedtype": "function"}, "DataType.Converters.dmyDate.formatter": {"type": "function", "static": "", "description": "Formats a Date() object instance into a date in DD/MM/YYYY format", "guessedname": "formatter", "guessedtype": "function"}, "DataType.Converters.SQLDate": {"type": "object", "static": "", "description": "Converters for dates used in SQL, DD-MM-YYYY hh:mm:ss", "guessedname": "SQLDate", "guessedtype": "property"}}, "description": "Contains a list of converters (parsers and formatters) for several standard formats.\nThe developer is expected to add custom application converters for his/her own data types to this list."}, "Form": {"name": "Form", "configs": {"index": {"default": "0", "type": "integer", "description": "Index of the Record to be shown", "guessedname": "index", "guessedtype": "property"}, "recordSet": {"default": "null", "type": "RecordSet", "description": "RecordSet holding the record being shown", "guessedname": "recordSet", "guessedtype": "property"}, "submitLabel": {"default": "'Ok'", "type": "string", "description": "Label for the submit button", "guessedname": "submitLabel", "guessedtype": "property"}, "action": {"default": "'#'", "type": "string", "description": "Default action attribute for the form", "guessedname": "action", "guessedtype": "property"}, "pager": {"default": "null", "type": "HTMLElement", "description": "Container for the pager, if any", "guessedname": "pager", "guessedtype": "property"}, "method": {"default": "'GET'", "type": "string", "description": "Method to be used when submitting the form", "guessedname": "method", "guessedtype": "property"}}, "namespace": "", "module": "recordset", "events": {"beforeActionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeActionChange", "description": "Fires before the value for the configuration attribute 'action' changes. Return false to cancel the attribute change."}, "actionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "actionChange", "description": "Fires when the value for the configuration attribute 'action' changes."}, "submitLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "submitLabelChange", "description": "Fires when the value for the configuration attribute 'submitLabel' changes."}, "beforeSubmitLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSubmitLabelChange", "description": "Fires before the value for the configuration attribute 'submitLabel' changes. Return false to cancel the attribute change."}, "methodChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "methodChange", "description": "Fires when the value for the configuration attribute 'method' changes."}, "indexChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' changes."}, "recordSetChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "recordSetChange", "description": "Fires when the value for the configuration attribute 'recordSet' changes."}, "beforePagerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePagerChange", "description": "Fires before the value for the configuration attribute 'pager' changes. Return false to cancel the attribute change."}, "beforeMethodChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeMethodChange", "description": "Fires before the value for the configuration attribute 'method' changes. Return false to cancel the attribute change."}, "beforeIndexChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeIndexChange", "description": "Fires before the value for the configuration attribute 'index' changes. Return false to cancel the attribute change."}, "pagerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "pagerChange", "description": "Fires when the value for the configuration attribute 'pager' changes."}, "beforeRecordSetChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRecordSetChange", "description": "Fires before the value for the configuration attribute 'recordSet' changes. Return false to cancel the attribute change."}}, "guessedname": "Form", "methods": {"_enableButtons": {"guessedname": "_enableButtons", "params": [{"type": "Event", "name": "ev", "description": ""}], "description": "Enables the submit button if the record is dirty", "private": "", "guessedtype": "function"}, "_defRecordIndexChange": {"guessedname": "_defRecordIndexChange", "params": [{"type": "Event", "name": "ev", "description": "  event object"}], "description": "Default action for the recordIndexChange event, updates the current record", "private": "", "guessedtype": "function"}, "syncUI": {"description": "synchs the internal state with the widget that shows it", "guessedname": "syncUI", "guessedtype": "function"}, "_renderForm": {"private": "", "description": "Renders the form and its input fields", "guessedname": "_renderForm", "guessedtype": "function"}, "_renderPager": {"private": "", "description": "Renders the pager", "guessedname": "_renderPager", "guessedtype": "function"}, "_bindForm": {"private": "", "description": "Binds the index and recordSet change events so the current record can be changed and the screen updated", "guessedname": "_bindForm", "guessedtype": "function"}, "_onPagerClick": {"guessedname": "_onPagerClick", "params": [{"type": "Event", "name": "ev", "description": ""}], "description": "Responds to clicks on the pager controls to move about the Records", "private": "", "guessedtype": "function"}, "_syncForm": {"private": "", "description": "Refreshes the elements in the form with the values in the current record", "guessedname": "_syncForm", "guessedtype": "function"}, "destructor": {"description": "Destructor called by Base", "guessedname": "destructor", "guessedtype": "function"}, "_defSubmitForm": {"guessedname": "_defSubmitForm", "params": [{"type": "Event", "name": "ev", "description": ""}], "description": "Default action for the Form:submit event, it submits the form.", "private": "", "guessedtype": "function"}, "_fieldValueChanged": {"guessedname": "_fieldValueChanged", "params": [{"type": "Event", "name": "ev", "description": ""}], "description": "Saves the value of any changed field to the Record object", "private": "", "guessedtype": "function"}, "_fillConverters": {"private": "", "description": "Reads the field definitions for each field looking either for the ui set of functions (parser, formatter and editor) \nand stores it in the internal tables for later use.  If a field doesn't have a specific function, it will read\nits type atribute and find the standard function for that type", "guessedname": "_fillConverters", "guessedtype": "function"}, "bindUI": {"bindui": "", "description": "Binds events in the widget, called by Widget", "guessedname": "bindUI", "guessedtype": "function"}, "initializer": {"params": [{"type": "object", "name": "cfg", "description": "  initial configuration attributes"}], "description": "Initializer called by Base", "guessedname": "initializer", "guessedtype": "function"}, "renderUI": {"description": "Renderer called by Widget", "guessedname": "renderUI", "guessedtype": "function"}, "_bindPager": {"private": "", "description": "Binds the pager HTMLelements to the listener", "guessedname": "_bindPager", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "record.js", "guessedtype": "property", "shortname": "Form", "properties": {"_buttons": {"guessedname": "_buttons", "type": "HTMLElement", "description": "Reference to the container element for the submit and other buttons in the form", "private": "", "guessedtype": "property"}, "_currentRecord": {"guessedname": "_currentRecord", "type": "Record", "description": "Reference to the current Record instance withing the RecordSet being shown", "private": "", "guessedtype": "property"}, "_editorTypes": {"guessedname": "_editorTypes", "type": "object", "description": "Hash with Form.Field classes to be instanced for each of the fields, indexed by field name", "private": "", "guessedtype": "property"}, "_parsers": {"guessedname": "_parsers", "type": "object", "description": "Hash with parser to accept each of the fields when input, indexed by field name", "private": "", "guessedtype": "property"}, "_editors": {"guessedname": "_editors", "type": "object", "description": "Hash with Form.Field instances for each of the fields, indexed by field name", "private": "", "guessedtype": "property"}, "BUTTON_TEMPLATE": {"type": "string", "static": "", "description": "Template to be used in building the buttons in the form.", "guessedname": "BUTTON_TEMPLATE", "guessedtype": "property"}, "FORM_TEMPLATE": {"type": "string", "static": "", "description": "Template to be used in building the form.", "guessedname": "FORM_TEMPLATE", "guessedtype": "property"}, "_form": {"guessedname": "_form", "type": "HTMLelement (form)", "description": "Reference to the form element", "private": "", "guessedtype": "property"}, "_formatters": {"guessedname": "_formatters", "type": "object", "description": "Hash with UI formatters for each of the fields to be shown, indexed by field name", "private": "", "guessedtype": "property"}, "FIELDSET_TEMPLATE": {"type": "string", "static": "", "description": "Template to be used in building all fieldset elements.", "guessedname": "FIELDSET_TEMPLATE", "guessedtype": "property"}}, "description": "Handles an html form"}, "RecordSet": {"name": "RecordSet", "configs": {"fieldDefSet": {"type": "FieldDefSet", "description": "Holds a reference to the FieldDefSet instance which defines the properties of the Records stored", "guessedname": "fieldDefSet", "guessedtype": "property"}, "serializeFormat": {"default": "\"JSON\"", "type": "string or function", "description": "Format of the RecordSet serialization. \nCan be any of the properties in <a href=\"#property_RecordSet.Serializers\"><code>RecordSet.Serializers</code></a> (built in or added by the developer)\nor a function that will receive an object to serialize and should return a string", "guessedname": "serializeFormat", "guessedtype": "property"}, "sortCompareFunction": {"default": "null.", "type": "function or null", "description": "Function to sort records by.  If none provided (the default) regular comparisons will be used.\nThe function will receive:</ol>\n<li><code>a</code>: first record to compare</li>\n<li><code>b</code>: second record to compare</li>\n<li><code>desc</code>: Boolean indicating the sort should be in descending order\n<li><code>fieldName</code>: Name of the field to sort by\n</ol>", "guessedname": "sortCompareFunction", "guessedtype": "property"}, "sortedBy": {"default": "null (not sorted)", "type": "object", "description": "Signals if the RecordSet is sorted, on which field and in which direction.\nIt contains: <ul>\n<li><code>fieldName</code>: Name of the field it is sorted by\n<li><code>desc</code>: true if sort was descending\n</ul>", "guessedname": "sortedBy", "guessedtype": "property"}, "serializeDirtyOnly": {"default": "true", "type": "Boolean", "description": "Signals that only dirty fields should be included in the serialization", "guessedname": "serializeDirtyOnly", "guessedtype": "property"}, "dataSource": {"default": "null", "type": "Y.DataSource", "description": "Instance of DataSource to use for loading the RecordSet", "guessedname": "dataSource", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "object", "name": "cfg", "description": "  Configuration attributes"}], "description": "Represents a collection of Records"}], "namespace": "", "module": "recordset", "events": {"beforeDataSourceChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDataSourceChange", "description": "Fires before the value for the configuration attribute 'dataSource' changes. Return false to cancel the attribute change."}, "serializeDirtyOnlyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "serializeDirtyOnlyChange", "description": "Fires when the value for the configuration attribute 'serializeDirtyOnly' changes."}, "beforeSerializeFormatChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSerializeFormatChange", "description": "Fires before the value for the configuration attribute 'serializeFormat' changes. Return false to cancel the attribute change."}, "dataSourceChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dataSourceChange", "description": "Fires when the value for the configuration attribute 'dataSource' changes."}, "fieldDefSetChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "fieldDefSetChange", "description": "Fires when the value for the configuration attribute 'fieldDefSet' changes."}, "beforeFieldDefSetChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeFieldDefSetChange", "description": "Fires before the value for the configuration attribute 'fieldDefSet' changes. Return false to cancel the attribute change."}, "sortCompareFunctionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "sortCompareFunctionChange", "description": "Fires when the value for the configuration attribute 'sortCompareFunction' changes."}, "loadData": {"params": [{"type": "event", "name": "ev", "description": "  Event object as received from DataSource.sendRequest"}], "description": "Fires when data has been received and loaded", "guessedname": "defaultFn", "guessedtype": "property"}, "beforeSerializeDirtyOnlyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSerializeDirtyOnlyChange", "description": "Fires before the value for the configuration attribute 'serializeDirtyOnly' changes. Return false to cancel the attribute change."}, "loadFail": {"params": [{"type": "event", "name": "ev", "description": "  Event object as received from DataSource.sendRequest"}], "description": "Fires when data reception has failed"}, "beforeSortCompareFunctionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSortCompareFunctionChange", "description": "Fires before the value for the configuration attribute 'sortCompareFunction' changes. Return false to cancel the attribute change."}, "serializeFormatChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "serializeFormatChange", "description": "Fires when the value for the configuration attribute 'serializeFormat' changes."}, "beforeSortedByChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSortedByChange", "description": "Fires before the value for the configuration attribute 'sortedBy' changes. Return false to cancel the attribute change."}, "sortedByChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "sortedByChange", "description": "Fires when the value for the configuration attribute 'sortedBy' changes."}}, "guessedname": "RecordSet", "methods": {"sort": {"params": [{"type": "string", "name": "fieldName", "description": "  Name of fields to sort the RecordSet by"}, {"type": "Boolean", "name": "desc", "description": "  sort descending"}], "description": "Sorts by the given field in ascending order unless the second argument says otherwise.\nIf either exists, it will use the comparison function set in the \nsortCompareFunction for the <a  href=\"RecordSet.FieldDef.html#config_sortCompareFunction\"><code>field</code></a> \nor the <a  href=\"#config_sortCompareFunction\"><code>whole RecordSet</code></a>, in that order.", "guessedname": "sort", "guessedtype": "function"}, "serializeURL": {"return": {"type": "string", "description": "www-url-encoded output"}, "description": "Serializes an array of objects in www-url-encoded format", "static": "", "guessedname": "serializeURL", "guessedtype": "function", "params": [{"type": "array", "name": "array", "description": "  Array of objects to serialize"}]}, "search": {"return": {"type": "Record", "description": "Record sought or null\n!Warning:  For values containing objects, such as Date, use an object literal as search argument, not the plain value"}, "params": [{"type": "value or object", "name": "needles", "description": "  key values of item to be located. \nFor RecordSets with a single primaryKey field, needles can be a string containing the value of the key sought.\nFor all, needles is an object containing fieldName: value sets of the key values sought"}], "description": "Searches the RecordSet by primaryKey values", "guessedname": "search", "guessedtype": "function"}, "_reIndex": {"private": "", "description": "Rebuilds the index whenever the <a  href=\"RecordSet.FieldDef.html#config_primaryKey\"><code>primaryKey</code></a> setting of a field is changed", "guessedname": "_reIndex", "guessedtype": "function"}, "_defSortFn": {"guessedname": "_defSortFn", "params": [{"type": "event", "name": "ev", "description": "  event object"}], "description": "Default sort function for sort event.", "private": "", "guessedtype": "function"}, "_fieldCompare": {"return": {"type": "0, 1 or -1", "description": "result suitable for Array.sort()"}, "description": "Default Record compare function for sort", "private": "", "params": [{"type": "Record", "name": "a", "description": "  first record to compare"}, {"type": "Record", "name": "b", "description": "  second record to compare"}, {"type": "Boolean", "name": "desc", "description": "  true if comparing in descending order"}, {"type": "string", "name": "fieldName", "description": "  name of the field to sort on"}], "guessedname": "_fieldCompare", "guessedtype": "function"}, "setFieldDef": {"return": {"type": "object", "description": "new field definition"}, "params": [{"type": "string", "name": "fieldName", "description": "  Name of the field to add the definition to"}, {"type": "string or object", "name": "key", "description": "  Depending on the type, it may:<ul>\n<li><i>string</i> Name of <a href=\"FieldDef.html\"><code>FieldDef</code></a> attribute to set (requires third argument)</li>\n<li><i>object</i> Object literal with names and values of attributes to set</li>\n</ul>"}, {"type": "any", "name": "value", "description": "  If <code>key</code> is a string, value to be set. Ignored otherwise."}], "description": "Sets or adds definitions for a field", "guessedname": "setFieldDef", "guessedtype": "function"}, "serialize": {"return": {"type": "string or [object]", "description": "Serialized fields"}, "description": "Serializes the RecordSet in various formats according to attribute <code>serializeFormat</code>.\nIf the serializer is not found, it will return the raw array of objects containing the fields to be serialized.", "guessedname": "serialize", "guessedtype": "function"}, "_defLoadData": {"guessedname": "_defLoadData", "params": [{"type": "event", "name": "ev", "description": "  Event object created by <code>loadData</code>"}], "description": "Loads data from DataSource.  Default function for event <a href=\"#event_loadData\"><code>loadData</code></a>.", "private": "", "guessedtype": "function"}, "destructor": {"description": "Destructor", "guessedname": "destructor", "guessedtype": "function"}, "add": {"return": {"type": "Record", "description": "Record just added"}, "params": [{"type": "Record", "name": "record", "description": "  Record to be added"}, {"type": "integer", "name": "index", "description": "  (optional) position to insert it in, otherwise, at the end."}], "description": "Adds a Record to the collection.\nOverrides ArrayList.add checking that record is an instance of Record and adding indexes if required.", "guessedname": "add", "guessedtype": "function"}, "tabulate": {"params": [{"type": "string", "name": "container", "description": "  CSS3 selector for the container of the table"}], "description": "Produces an HTML table out of the RecordSet.\nIt uses the structure and classNames of YUI2 DataTable but none of its functionality", "guessedname": "tabulate", "guessedtype": "function"}, "getFieldDef": {"return": {"type": "", "description": "if <code>key</code> is provided, the value of the attribute, otherwise, the whole <a href=\"RecordSet.FieldDef.html\"><code>RecordSet.FieldDef</code></a> instance of the filed"}, "params": [{"type": "string", "name": "fieldName", "description": "  Name of the field"}, {"type": "string", "name": "key", "description": "  (optional) Name of the attribute to look for"}], "description": "Returns the value of a given attribute for a field  or the whole <a href=\"RecordSet.FieldDef.html\"><code>RecordSet.FieldDef</code></a>", "guessedname": "getFieldDef", "guessedtype": "function"}, "eachDef": {"params": [{"type": "function} A function to be called for each field definition.\nIt will receive:<ul>\n<li>def {RecordSet.FieldDef} the field definition instance</li>\n<li>name {string", "name": "fn", "description": "  the name of the field</li>\n</ul>"}, {"type": "object", "name": "context", "description": "  (optional) the context to execute the function in.  Defaults to this RecordSet"}], "description": "Loops though each of the field definitions and calls the given function providing it with the instance\nof <a href=\"RecordSet.FieldDef.html\"><code>RecordSet.FieldDef</code></a> for a field and the field key", "guessedname": "eachDef", "guessedtype": "function"}, "formalize": {"params": [{"type": "string", "name": "container", "description": "  CSS3 selector for the container of the table"}, {"type": "integer", "name": "item", "description": "  Position of the record to be shown."}, {"type": "object", "name": "cfg", "description": "  (optional) Additional configuration attributes such as <ul>\n<li><code>method</code>: method for the form submit, defaults to GET</li>\n<li><code>action</code>: action attribute for the form, defaults to #</li>\n<li><code>pager</code>: selector to locate the container for the record paginator</li>\n<li><code>submitLabel</code>: label to be shown in the submit button</li>"}], "description": "Produces an HTML form out of a Record in the RecordSet.\nI'm not trying to be serious with this method, I'm just showing a different traversal method and the possibility of building a form\nfrom a Record instance.  The form doesn't even have <code>method</code> or <code>action</code> HTMLAttributes or buttons to submit it.", "guessedname": "formalize", "guessedtype": "function"}, "sendRequest": {"params": [{"type": "mixed", "name": "request", "description": "  Request to be passed to DataSource's sendRequest method"}], "description": "Loads the RecordSet with values read from the DataSource instance set in the <code>dataSource</code> configuration attribute", "guessedname": "sendRequest", "guessedtype": "function"}, "initializer": {"params": [{"type": "object", "name": "cfg", "description": "  Initial configuration (not used)"}], "description": "Initializer inherited from Y.Base and overridden", "guessedname": "initializer", "guessedtype": "function"}, "setFieldDefs": {"params": [{"type": "object", "name": "cfg", "description": "  Object containing definitions to set. It will use the properties as the names of the fields to set"}], "description": "Sets or adds a set of field definitions.  \nTakes an object literal with names and FieldDef instances or configuration properties and calls <a href=\"#method_setFieldDef\"><code>setFieldDef</code></a> for each", "guessedname": "setFieldDefs", "guessedtype": "function"}, "_valueCompare": {"return": {"type": "0, 1 or -1", "description": "depending on compare and order"}, "params": [{"type": "any", "name": "a", "description": "  first value to compare"}, {"type": "any", "name": "b", "description": "  second value to compare"}, {"type": "Boolean", "name": "desc", "description": "  true if comparing in descending order"}], "description": "Compares a couple of values returning integers to be used in sorting functions", "private": ""}}, "uses": ["ArrayList"], "superclass": "Base", "file": "record.js", "guessedtype": "property", "extends": "Base", "shortname": "RecordSet", "properties": {"_defs": {"guessedname": "_defs", "type": "{object}", "description": "Hash storing the field definitions, indexed by the name of the field", "private": "", "guessedtype": "property"}, "_items": {"guessedname": "_items", "type": "[Record]", "description": "Array storing the Records (ArrayList expects it to have this name)", "private": "", "guessedtype": "property"}, "RecordSet.Serializers": {"type": "{object}", "static": "", "description": "Hash containing the list of serializers available.  \nThe developer is expected to add to this list, if so wished.\nThe following serializers are already set:\n<ul><li>\"JSON\"</li><li>\"XML\"</li><li>\"URL\"</li></ul>", "guessedname": "Serializers", "guessedtype": "property"}, "_index": {"guessedname": "_index", "type": "{object}", "description": "Index of records indexed by all fields marked as <a  href=\"RecordSet.FieldDef.html#config_primaryKey\"><code>primaryKey</code></a>.", "private": "", "guessedtype": "property"}}, "description": "Represents a collection of Records"}, "FieldDef": {"name": "FieldDef", "configs": {"server.parser": {"default": "null", "type": "function or null", "description": "Function to be used for parsing the field when it is received from the server", "guessedname": "parser", "guessedtype": "property"}, "name": {"default": "null", "type": "string", "description": "Name of the field for this definition.", "guessedname": "name", "guessedtype": "property"}, "parent": {"readonly": "", "type": "FieldDef", "description": "Reference to the parent of this definition", "guessedname": "parent", "guessedtype": "property"}, "primaryKey": {"default": "false", "type": "Boolean", "description": "Signals that the field is a primary key.\nFields marked as being a primaryKey will be indexed and can be used to <a href=\"RecordSet.html#method_search\"><code>search</code></a> for Records\nThey will also be included in any serialized output even when not dirty", "guessedname": "primaryKey", "guessedtype": "property"}, "ui.parser": {"default": "null", "type": "function or null", "description": "Function to be used for parsing the field when it is received from some user input component", "guessedname": "parser", "guessedtype": "property"}, "type": {"default": "null", "type": "string", "description": "DataType information.  It should be a reference to any of the types stored in DataType.Types", "guessedname": "type", "guessedtype": "property"}, "sortCompareFunction": {"default": "null.", "type": "function or null", "description": "Function to sort records by when sorted by this field.  \nIf none provided (the default) the sortCompareFunction attribute \nfor the whole RecordSet will be used and finally the regular lexical comparison.\nThe function will receive:</ol>\n<li><code>a</code>: first record to compare</li>\n<li><code>b</code>: second record to compare</li>\n<li><code>desc</code>: Boolean indicating the sort should be in descending order\n<li><code>fieldName</code>: Name of the field to sort by\n</ol>", "guessedname": "sortCompareFunction", "guessedtype": "property"}, "label": {"default": "null", "type": "string", "description": "Label to be shown for this field (defaults to field name)", "guessedname": "label", "guessedtype": "property"}, "_parent": {"guessedname": "_parent", "type": "FieldDef", "description": "Provided as an internal-use setting to read the parent of this node\neven before the initializer method gets called.\nThe parent is required to find out the root, which is used in setting some of the other attributes", "private": "", "guessedtype": "property"}, "server.formatter": {"default": "null", "type": "function or null", "description": "Function to be used for formatting the field value when it is sent to the server", "guessedname": "formatter", "guessedtype": "property"}, "initialValue": {"default": "null", "type": "any", "description": "Initial value for a field when no value is provided.", "guessedname": "initialValue", "guessedtype": "property"}, "ui": {"type": "{object}", "description": "Formatting and parsing functions for exchanging data with the user", "guessedname": "ui", "guessedtype": "property"}, "ui.formatter": {"default": "null", "type": "function or null", "description": "Function to be used for formatting the field value when it is presented to the user", "guessedname": "formatter", "guessedtype": "property"}, "server": {"type": "{object}", "description": "Formatting and parsing functions for exchanging data with the server", "guessedname": "server", "guessedtype": "property"}, "root": {"readonly": "", "type": "FieldDef", "description": "Reference to the top-most definition containing this definition", "guessedname": "root", "guessedtype": "property"}, "children": {"default": "null", "type": "FieldDefs", "description": "Definitions of fields group under this field", "guessedname": "children", "guessedtype": "property"}}, "namespace": "", "module": "recordset", "events": {"_parentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "_parentChange", "description": "Fires when the value for the configuration attribute '_parent' changes."}, "beforeChildrenChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeChildrenChange", "description": "Fires before the value for the configuration attribute 'children' changes. Return false to cancel the attribute change."}, "server.formatterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "server.formatterChange", "description": "Fires when the value for the configuration attribute 'server.formatter' changes."}, "beforeUiChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeUiChange", "description": "Fires before the value for the configuration attribute 'ui' changes. Return false to cancel the attribute change."}, "beforeUi.formatterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeUi.formatterChange", "description": "Fires before the value for the configuration attribute 'ui.formatter' changes. Return false to cancel the attribute change."}, "beforeNameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNameChange", "description": "Fires before the value for the configuration attribute 'name' changes. Return false to cancel the attribute change."}, "server.parserChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "server.parserChange", "description": "Fires when the value for the configuration attribute 'server.parser' changes."}, "serverChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "serverChange", "description": "Fires when the value for the configuration attribute 'server' changes."}, "sortCompareFunctionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "sortCompareFunctionChange", "description": "Fires when the value for the configuration attribute 'sortCompareFunction' changes."}, "beforeParentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeParentChange", "description": "Fires before the value for the configuration attribute 'parent' changes. Return false to cancel the attribute change."}, "ui.formatterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "ui.formatterChange", "description": "Fires when the value for the configuration attribute 'ui.formatter' changes."}, "beforeRootChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeRootChange", "description": "Fires before the value for the configuration attribute 'root' changes. Return false to cancel the attribute change."}, "initialValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "initialValueChange", "description": "Fires when the value for the configuration attribute 'initialValue' changes."}, "childrenChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "childrenChange", "description": "Fires when the value for the configuration attribute 'children' changes."}, "beforePrimaryKeyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforePrimaryKeyChange", "description": "Fires before the value for the configuration attribute 'primaryKey' changes. Return false to cancel the attribute change."}, "typeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' changes."}, "primaryKeyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "primaryKeyChange", "description": "Fires when the value for the configuration attribute 'primaryKey' changes."}, "beforeLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLabelChange", "description": "Fires before the value for the configuration attribute 'label' changes. Return false to cancel the attribute change."}, "beforeTypeChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeTypeChange", "description": "Fires before the value for the configuration attribute 'type' changes. Return false to cancel the attribute change."}, "before_parentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "before_parentChange", "description": "Fires before the value for the configuration attribute '_parent' changes. Return false to cancel the attribute change."}, "beforeSortCompareFunctionChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeSortCompareFunctionChange", "description": "Fires before the value for the configuration attribute 'sortCompareFunction' changes. Return false to cancel the attribute change."}, "ui.parserChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "ui.parserChange", "description": "Fires when the value for the configuration attribute 'ui.parser' changes."}, "labelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' changes."}, "nameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "nameChange", "description": "Fires when the value for the configuration attribute 'name' changes."}, "beforeUi.parserChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeUi.parserChange", "description": "Fires before the value for the configuration attribute 'ui.parser' changes. Return false to cancel the attribute change."}, "beforeServer.formatterChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeServer.formatterChange", "description": "Fires before the value for the configuration attribute 'server.formatter' changes. Return false to cancel the attribute change."}, "beforeInitialValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeInitialValueChange", "description": "Fires before the value for the configuration attribute 'initialValue' changes. Return false to cancel the attribute change."}, "beforeServer.parserChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeServer.parserChange", "description": "Fires before the value for the configuration attribute 'server.parser' changes. Return false to cancel the attribute change."}, "uiChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "uiChange", "description": "Fires when the value for the configuration attribute 'ui' changes."}, "beforeServerChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeServerChange", "description": "Fires before the value for the configuration attribute 'server' changes. Return false to cancel the attribute change."}, "parentChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "parentChange", "description": "Fires when the value for the configuration attribute 'parent' changes."}, "rootChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "rootChange", "description": "Fires when the value for the configuration attribute 'root' changes."}}, "methods": {"add": {"params": [{"type": "FieldDef or object", "name": "item", "description": "  Definition to be added"}, {"type": "integer", "name": "index", "description": "  (optional) Position to add the definition"}], "description": "Adds a child item to the array of children at the given index or at the end of none", "guessedname": "add", "guessedtype": "function"}, "getChildCount": {"return": {"type": "integer", "description": "Number of children"}, "description": "Returns the number of children under this defition", "guessedname": "getChildCount", "guessedtype": "function"}}, "uses": ["Y.Attribute"], "file": "record.js", "shortname": "FieldDef", "properties": {"_parent": {"description": "Reference to the parent of this definition or null if none", "default": "null", "private": "", "guessedname": "_parent", "guessedtype": "property", "type": "FieldDef"}, "_root": {"description": "Reference to the top-most field definition or to itself if at the top", "default": "null", "private": "", "guessedname": "_root", "guessedtype": "property", "type": "FieldDef"}}, "description": "Stores definitions for a field"}, "Form.BaseField": {"name": "Form.BaseField", "configs": {"formId": {"default": "''", "type": "string", "description": "ID attribute of the form element", "guessedname": "formId", "guessedtype": "property"}, "name": {"default": "''", "type": "string", "description": "Name to be given to this field", "guessedname": "name", "guessedtype": "property"}, "value": {"description": "Value to be shown or entered in this input box", "guessedname": "value", "guessedtype": "property"}, "label": {"default": "''", "type": "string", "description": "Text label to be shown along the input element", "guessedname": "label", "guessedtype": "property"}}, "namespace": "", "module": "recordset", "events": {"beforeValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeValueChange", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}, "beforeFormIdChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeFormIdChange", "description": "Fires before the value for the configuration attribute 'formId' changes. Return false to cancel the attribute change."}, "formIdChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "formIdChange", "description": "Fires when the value for the configuration attribute 'formId' changes."}, "valueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' changes."}, "labelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' changes."}, "nameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "nameChange", "description": "Fires when the value for the configuration attribute 'name' changes."}, "beforeNameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNameChange", "description": "Fires before the value for the configuration attribute 'name' changes. Return false to cancel the attribute change."}, "beforeLabelChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeLabelChange", "description": "Fires before the value for the configuration attribute 'label' changes. Return false to cancel the attribute change."}}, "guessedname": "BaseField", "methods": {"bindUI": {"description": "Sets listeners for changes in the input textbox and for changes in the value configuration attribute", "guessedname": "bindUI", "guessedtype": "function"}, "_onInputChange": {"guessedname": "_onInputChange", "params": [{"type": "Event", "name": "ev", "description": ""}], "description": "Called whenever there is any change in the input box.", "private": "", "guessedtype": "function"}, "_onValueChange": {"description": "Called whenever the value attribute is changed", "param": "ev {Event}", "params": [{"type": "Event", "name": "ev", "description": ""}], "private": "", "guessedname": "_onValueChange", "guessedtype": "function"}, "renderUI": {"description": "Renders the input element", "guessedname": "renderUI", "guessedtype": "function"}, "destructor": {"description": "Detaches event listeners", "guessedname": "destructor", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "record.js", "guessedtype": "property", "shortname": "Form.BaseField", "properties": {"FIELD_TEMPLATE": {"type": "string", "static": "", "description": "Template to build the label and input elements with.  \nThe template will have the classNames substituted in first and then the values", "guessedname": "FIELD_TEMPLATE", "guessedtype": "property"}, "_span": {"guessedname": "_span", "type": "HTMLElement", "description": "Holds a reference to the SPAN element that shows the value of the field", "private": "", "guessedtype": "property"}, "_input": {"guessedname": "_input", "type": "HTMLElement", "description": "Holds a reference to the actual input element", "private": "", "guessedtype": "property"}}, "description": "Base for form input fields.  It displays a textBox."}, "Record": {"name": "Record", "configs": {"deleted": {"type": "Boolean", "description": "Marks the record as deleted", "guessedname": "deleted", "guessedtype": "property"}, "new": {"readonly": "", "type": "Boolean", "description": "True when all the fields are new. Read Only"}, "dirty": {"readonly": "", "type": "Boolean", "description": "True when any of the fields is dirty. Read only.", "guessedname": "dirty", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "object", "name": "cfg", "description": "  Configuration Attributes"}], "description": "The Record class provides storage for a single row of data."}], "namespace": "", "module": "recordset", "events": {"dirtyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dirtyChange", "description": "Fires when the value for the configuration attribute 'dirty' changes."}, "newChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "newChange", "description": "Fires when the value for the configuration attribute 'new' changes."}, "deletedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "deletedChange", "description": "Fires when the value for the configuration attribute 'deleted' changes."}, "beforeDirtyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDirtyChange", "description": "Fires before the value for the configuration attribute 'dirty' changes. Return false to cancel the attribute change."}, "beforeNewChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNewChange", "description": "Fires before the value for the configuration attribute 'new' changes. Return false to cancel the attribute change."}, "beforeDeletedChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDeletedChange", "description": "Fires before the value for the configuration attribute 'deleted' changes. Return false to cancel the attribute change."}}, "guessedname": "Record", "methods": {"reset": {"params": [{"type": "string", "name": "fieldName", "description": "  (optional) If provided, it will reset the named field, otherwise, it resets the whole record"}], "description": "Restores the initial value of a field or of a whole record", "guessedname": "reset", "guessedtype": "function"}, "setValue": {"params": [{"type": "string", "name": "fieldName", "description": "  Name of the field"}, {"type": "any", "name": "value", "description": "  value to be set"}], "description": "Sets the value for a specific field.  If field does not exist, it creates it.", "guessedname": "setValue", "guessedtype": "function"}, "addField": {"return": {"type": "", "description": "Instance of <a href=\"Record.Field.html\"><code>Record.Field</code></a> just added"}, "params": [{"type": "string", "name": "fieldName", "description": "  Name of the field"}, {"type": "any", "name": "value", "description": "  initial value"}], "description": "Adds a new <a href=\"Record.Field.html\"><code>Record.Field</code></a> to the Record", "guessedname": "addField", "guessedtype": "function"}, "getField": {"return": {"type": "Record.Field", "description": "field definition"}, "params": [{"type": "string", "name": "fieldName", "description": "  Name of the field"}], "description": "Returns the instance of <a href=\"Record.Field.html\"><code>Record.Field</code></a> for the field", "guessedname": "getField", "guessedtype": "function"}, "undo": {"params": [{"type": "string", "name": "fieldName", "description": "  (optional) If provided, it will undo the named field, otherwise, it undoes the whole record"}], "description": "Restores the previous value of a field or of a whole record.  There is only one level of undo.", "guessedname": "undo", "guessedtype": "function"}, "getValue": {"return": {"type": "any", "description": "The value of the field requested, an object with all values or null if the Record is marked as deleted"}, "params": [{"type": "string", "name": "fieldName", "description": "  Optional: if provided it will return the value of that field, \notherwise it will return an object literal with all values"}], "description": "Returns the value of a field or an object with all the field values", "guessedname": "getValue", "guessedtype": "function"}, "accept": {"params": [{"type": "string", "name": "fieldName", "description": "  (optional) If provided, it will accept the named field, otherwise, it accepts the whole record"}], "description": "Accepts the current value of a field or of whole record as good.  \nUsed when the Record has been synchronized with the original source \n(usually a database table in the server) \nto signal that the current value has been accepted as good by the server.", "guessedname": "accept", "guessedtype": "function"}, "each": {"return": {"type": "", "description": "The YUI instance"}, "params": [{"type": "function", "name": "fn", "description": "  Function to be executed on each field.  It will receive the Field object and the field name"}, {"type": "object", "name": "context", "description": "  Context to execute the function in"}], "description": "Loops through each of the fields", "guessedname": "each", "guessedtype": "function"}, "initializer": {"params": [{"type": "object", "name": "cfg", "description": "  Initial configuration\nIf the configuration object has a <code>data</code> property containing an oject literal, \nit will load the Record with those values"}], "description": "Initializer inherited from Y.Base and overridden", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "record.js", "guessedtype": "property", "shortname": "Record", "properties": {"_fields": {"guessedname": "_fields", "type": "[Record.Field]", "description": "Array of <a href=\"Record.Field.html\"><code>Record.Field</code></a> objects", "private": "", "guessedtype": "property"}}, "description": "The Record class provides storage for a single row of data."}, "Record.Field": {"name": "Record.Field", "constructors": [{"params": [{"type": "mixed", "name": "value", "description": "  initial value for this field"}], "description": "The Record.Field class stores a single piece of data, keeping track of its modified (dirty) or newly created(new)\ncurrent, previous and initial values."}], "namespace": "", "module": "recordset", "events": {"beforeValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeValueChange", "description": "Fires before the value for the configuration attribute 'value' changes. Return false to cancel the attribute change."}, "dirtyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "dirtyChange", "description": "Fires when the value for the configuration attribute 'dirty' changes."}, "oldValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "oldValueChange", "description": "Fires when the value for the configuration attribute 'oldValue' changes."}, "newChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "newChange", "description": "Fires when the value for the configuration attribute 'new' changes."}, "beforeNewChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNewChange", "description": "Fires before the value for the configuration attribute 'new' changes. Return false to cancel the attribute change."}, "beforeOldValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeOldValueChange", "description": "Fires before the value for the configuration attribute 'oldValue' changes. Return false to cancel the attribute change."}, "beforeInitialValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeInitialValueChange", "description": "Fires before the value for the configuration attribute 'initialValue' changes. Return false to cancel the attribute change."}, "valueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' changes."}, "beforeDirtyChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeDirtyChange", "description": "Fires before the value for the configuration attribute 'dirty' changes. Return false to cancel the attribute change."}, "initialValueChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "initialValueChange", "description": "Fires when the value for the configuration attribute 'initialValue' changes."}, "nameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "nameChange", "description": "Fires when the value for the configuration attribute 'name' changes."}, "beforeNameChange": {"params": [{"type": "{oldValue: any, newValue: any}", "name": "event", "description": "An object containing the previous attribute value and the new value."}], "name": "beforeNameChange", "description": "Fires before the value for the configuration attribute 'name' changes. Return false to cancel the attribute change."}}, "guessedname": "Field", "methods": {"initializer": {"params": [{"type": "object", "name": "cfg", "description": "  initial configuration"}], "description": "Ensures the initialValue is set", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "record.js", "guessedtype": "property", "shortname": "Record.Field", "configs": {"initialValue": {"type": "any", "description": "Stores the initial value of the field", "guessedname": "initialValue", "guessedtype": "property"}, "name": {"type": "string", "description": "Stores the name for this field", "guessedname": "name", "guessedtype": "property"}, "value": {"type": "any", "description": "Stores the value for this field", "guessedname": "value", "guessedtype": "property"}, "dirty": {"type": "Boolean", "description": "Signals if the value was modified since last created or accepted as good", "guessedname": "dirty", "guessedtype": "property"}, "oldValue": {"type": "any", "description": "Stores the most recent previous value. Used for undoing", "guessedname": "oldValue", "guessedtype": "property"}, "new": {"type": "Boolean", "description": "Signals if the field has been newly created instead of loaded from a remote source"}}, "description": "The Record.Field class stores a single piece of data, keeping track of its modified (dirty) or newly created(new)\ncurrent, previous and initial values."}, "DataType.Types": {"name": "DataType.Types", "namespace": "", "module": "recordset", "file": "record.js", "shortname": "DataType.Types", "properties": {"DataType.Types.padded": {"static": "", "description": "Just a fake type for testing purposes.", "guessedname": "padded", "guessedtype": "property"}, "DataType.Types.myDate": {"type": "object", "static": "", "description": "Another custom type for testing. \nIt references two DataType.Converters for server-side and ui-side conversions", "guessedname": "myDate", "guessedtype": "property"}, "DataType.Types.number": {"type": "object", "static": "", "description": "Standard number parsers", "guessedname": "number", "guessedtype": "property"}}, "description": "Contains a list of converters (and eventually other info) for several types of data, keyed by a given name.\nThe developer is expected to add custom application types to this list."}}, "version": "1.0", "modules": {"recordset": {"description": "The recordset module provides a standard way to store tabular data, load it from any DataSource\nand serialize it in several formats.  It can also keep meta-information about that data\nsuch as parsers, formatters and labels", "submodules": [], "classlist": ["FieldDef", "FieldDefSet", "Record", "Record.Field", "RecordSet", "Form.BaseField", "Form", "DataType.Converters", "DataType.Types"], "filelist": ["record.js"], "subdata": {}, "name": "recordset"}}, "filemap": {"record.js": {"classlist": ["FieldDef", "FieldDefSet", "Record", "Record.Field", "RecordSet", "Form.BaseField", "Form", "DataType.Converters", "DataType.Types"], "name": "record.js", "module": "recordset"}}}